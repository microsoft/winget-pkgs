# Rebuild pipeline for WinGet.

# Name of the run
name: '$(Build.DefinitionName)-$(Build.DefinitionVersion)-$(Date:yyyyMMdd)-$(Rev:r)'

trigger: none
pr: none

variables:
  Rebuild.SkipManifestIndexUpdate: $[coalesce(variables.SkipManifestIndexUpdate, 'False')]
  Rebuild.SkipPausePublishPipeline: $[coalesce(variables.SkipPausePublishPipeline, 'False')]
  Rebuild.EnableContainerBackup: $[coalesce(variables.EnableContainerBackup, 'False')]
  Rebuild.ClearContainer: $[coalesce(variables.ClearContainer, 'False')]

jobs:

# Agent phase.
- job: 'Rebuild'
  displayName: 'Start Rebuild'
  pool:
    vmImage: 'windows-latest'
  variables:
    skipComponentGovernanceDetection: ${{ true }}
    runCodesignValidationInjection: ${{ false }}
  steps:

  # Allow scripts to access the system token.
  - checkout: self
    persistCredentials: true
    clean: true

  # Downloads all the setup files and its dependencies.
  - task: AzureCLI@1
    displayName: 'Azure Setup'
    inputs:
      azureSubscription: '$(WinGet.Subscription)'
      scriptLocation: inlineScript
      inlineScript: 'az storage blob download-batch -d . --pattern * -s servicewrapper --output none'
    env:
      AZURE_STORAGE_CONNECTION_STRING: $(ValidationStorageAccountConnectionString)

  # WinGet setup
  - script: 'winget_rebuild_setup.cmd'
    name: 'wingetsetup'
    displayName: 'WinGet Setup'
    workingDirectory: scripts
    env:
      HOST_KEY: $(AzureFunctionHostKey)
      SIGN_ENDPOINT: $(AzFuncSignEndpoint)
      PUBLISH_ENDPOINT: $(AzFuncRebuildPublishEndpoint)
      CLEANUP_ENDPOINT: $(AzFuncRebuildCleanupEndpoint)
      RESTSOURCE_REBUILD_ENDPOINT: $(AzFuncRestSourceRebuildEndpoint)

  - task: CmdLine@2
    displayName: 'Validate Manifests'
    inputs:
      script: 'WinGetSvcWrapper.exe rebuild --operationId %BUILD_BUILDNUMBER%'
      failOnStderr: true
    condition: succeeded()
    env:
      ValidationConnectionString: $(ValidationStorageAccountConnectionString)
      ExecutionEnvironment: $(ExecutionEnvironment)
      PackagePublisher: $(PackagePublisher)
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      DIApplicationInsightKey: $(DIApplicationInsightKey)
      WinGet:AppConfig:Primary: $(AppConfigPrimary)
      WinGet:AppConfig:Secondary: $(AppConfigSecondary)
      DevOpsOrganization: $(DevOpsOrganization)
      DevOpsProjectName: $(DevOpsProjectName)
      DevOpsPublishPipelineDefinitionId: $(DevOpsPublishPipelineDefinitionId)

# Agentless phase. Depends on previous job. 
- job: 'SignPackage'
  pool: server
  timeoutInMinutes: 1500
  displayName: 'Sign package'
  dependsOn:
    - 'Rebuild'
  variables:
    HostKeySecret: $[ dependencies.Rebuild.outputs['wingetsetup.hostkey']]
    SignEndpointSecret: $[ dependencies.Rebuild.outputs['wingetsetup.signEndpoint']]
  steps:

  # Sign package.
  - task: AzureFunction@1
    displayName: 'Signing package'
    inputs:
      function: '$(SignEndpointSecret)'
      key: '$(HostKeySecret)'
      body: |
        {
        "operationId": "$(Build.BuildNumber)",
        "BuildId": "$(Build.BuildId)",
        "PlanUrl": "$(system.CollectionUri)",
        "HubName": "$(system.HostType)",
        "pipelineType": "RebuildPipeline",
        "ProjectId": "$(system.TeamProjectId)",
        "PlanId": "$(system.PlanId)", 
        "JobId": "$(system.JobId)", 
        "TimelineId": "$(system.TimelineId)", 
        "TaskInstanceId": "$(system.TaskInstanceId)",
        "AuthToken": "$(system.AccessToken)"
        }
      waitForCompletion: "true"

# Agentless phase. Depends on previous job.
- job: 'Publish'
  pool: server
  timeoutInMinutes: 1500
  displayName: 'Publish'
  dependsOn:
    - 'Rebuild'
    - 'SignPackage'
  variables:
    HostKeySecret: $[ dependencies.Rebuild.outputs['wingetsetup.hostkey']]
    PublishEndpointSecret: $[ dependencies.Rebuild.outputs['wingetsetup.publishEndpoint']]
  steps:

  # Rebuild Publish.
  - task: AzureFunction@1
    displayName: 'Publish'
    inputs:
      function: '$(PublishEndpointSecret)'
      key: '$(HostKeySecret)'
      body: |
        {
        "operationId": "$(Build.BuildNumber)",
        "BuildId": "$(Build.BuildId)",
        "PlanUrl": "$(system.CollectionUri)",
        "HubName": "$(system.HostType)",
        "pipelineType": "RebuildPipeline",
        "ProjectId": "$(system.TeamProjectId)",
        "PlanId": "$(system.PlanId)", 
        "JobId": "$(system.JobId)", 
        "TimelineId": "$(system.TimelineId)", 
        "TaskInstanceId": "$(system.TaskInstanceId)",
        "AuthToken": "$(system.AccessToken)",
        "ContainerName": "$(CacheContainerName)",
        "CommitTablePartitionKey": "$(CommitTablePartitionKey)",
        "CommitTableRowKey": "$(CommitTableRowKey)",
        "EnableContainerBackup": "$(Rebuild.EnableContainerBackup)",
        "SkipManifestIndexUpdate": "$(Rebuild.SkipManifestIndexUpdate)",
        "ClearContainer": "$(Rebuild.ClearContainer)",
        }
      waitForCompletion: "true"

# Agentless phase. Depends on previous job.
- job: 'Cleanup'
  pool: server
  timeoutInMinutes: 1500
  displayName: 'Cleanup'
  dependsOn:
    - 'Rebuild'
    - 'SignPackage'
    - 'Publish'
  condition: and(succeededOrFailed(), ne(variables['Rebuild.SkipPausePublishPipeline'], 'True'))
  variables:
    HostKeySecret: $[ dependencies.Rebuild.outputs['wingetsetup.hostkey']]
    CleanupEndpointSecret: $[ dependencies.Rebuild.outputs['wingetsetup.cleanupEndpoint']]
  steps:

  # Rebuild cleanup.
  - task: AzureFunction@1
    displayName: 'Cleanup'
    inputs:
      function: '$(CleanupEndpointSecret)'
      key: '$(HostKeySecret)'
      body: |
        {
        "operationId": "$(Build.BuildNumber)",
        "BuildId": "$(Build.BuildId)",
        "PlanUrl": "$(system.CollectionUri)",
        "HubName": "$(system.HostType)",
        "pipelineType": "RebuildPipeline",
        "ProjectId": "$(system.TeamProjectId)",
        "PlanId": "$(system.PlanId)", 
        "JobId": "$(system.JobId)", 
        "TimelineId": "$(system.TimelineId)", 
        "TaskInstanceId": "$(system.TaskInstanceId)",
        "AuthToken": "$(system.AccessToken)",
        }
      waitForCompletion: "true"
