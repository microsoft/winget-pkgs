# Created with komac v2.11.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.9.0.schema.json

PackageIdentifier: CXWorld.CapFrameX
PackageVersion: 1.7.4
PackageLocale: en-US
Publisher: CXWorld
PublisherUrl: https://www.capframex.com/
PublisherSupportUrl: https://www.capframex.com/support
PrivacyUrl: https://www.capframex.com/privacy
Author: CapFrameX Team
PackageName: CapFrameX
PackageUrl: https://github.com/CXWorld/CapFrameX
License: MIT
LicenseUrl: https://github.com/CXWorld/CapFrameX/blob/HEAD/LICENSE
ShortDescription: Frametime capture and analysis tool
Description: Frametimes capture and analysis tool based on Intel's PresentMon. Overlay provided by Rivatuner Statistics Server.
Moniker: capframex
Tags:
- analysis-tool
- benchmark
- benchmarking
- fps
- frametime
- rivatuner
ReleaseNotes: |-
  New features
  - Support AMD Zen 5
  - Support Intel Arrow Lake
  - Thread Affinity Controller compatible with Arrow Lake core layout
  - PresentMon v2.2 with new Start-to-PresentReturn / PresentReturn-to-PresentReturn frame time measurement approach
  - New CPU Busy metric which indicates the duration the CPU was engaged in processing the frame before presenting it
  - Added TBP Sim for AMD RDNA2 graphics cards
  image
  image
  Image source: VideoCardz
  Enhancements
  - PMD metrics as floating point numbers with one decimal digit
  Bugfixes
  - Exception handling AMD ADLX API calls
  Info
  With the new PresentMon version the frame time measurement approach has changed from Present-to-Present to Start-to-PresentReturn / PresentReturn-to-PresentReturn. Taken from the PresentMon release notes:
  "The majority of metrics are changed to use the time that the CPU started working on a frame as the reference point instead of the present() call, with values that are more aligned to measuring the quality of graphics applications (e.g., latency and duration of interaction and displayed frames). See README-ConsoleApplication.md for more details."
  Unwinder (the author of RTSS):
  "There is no best or preferable method. Both have their own different usage cases. Frame-start-to-frame-start frametime graph can be used to validate framepacing quality of latency oriented framerate limiting modes (low latency SK limiter mode, async/back edge sync RTSS limiter modes, NV CPL framerate limiter etc). Such graph should become "flat" when such framerate limiting strategy is in use. Present-to-present frametime graph can be used to validate framepacing quality of framerate limiters prioritizing presentation timings adjustment (latent sync or normal framerate limiter in SK, front edge sync or scanline sync in RTSS). Such graph is expected to jitter if latency oriented framerate limiting strategy is in use, but become "flat" if framerate limiter prioritize presentation timings adjustment. You may also switch between these two modes to determine which framerate limiting strategy is used by some other third party framerate limiters or in-game framerate limiters."
ReleaseNotesUrl: https://github.com/CXWorld/CapFrameX/releases/tag/v1.7.4_release
InstallationNotes: If you are using a network drive as your capture directory and having problems connecting to it on autostart, you might want to download this additional zip file (https://cxblobs.blob.core.windows.net/releases/Autostart%20using%20network%20drives.zip) too and read the info inside it.
Documentations:
- DocumentLabel: README for CapFrameX
  DocumentUrl: https://github.com/CXWorld/CapFrameX/blob/master/README.md
ManifestType: defaultLocale
ManifestVersion: 1.9.0
