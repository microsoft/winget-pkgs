# Created with WinGet Automation using Komac v1.10.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: Cppcheck.Cppcheck
PackageVersion: '2.11'
PackageLocale: en-US
Publisher: The Cppcheck team
PublisherUrl: https://github.com/danmar
PackageName: Cppcheck
PackageUrl: https://github.com/danmar/cppcheck
License: GPL 3 or later
LicenseUrl: https://raw.githubusercontent.com/danmar/cppcheck/master/COPYING
ShortDescription: Cppcheck is a static analysis tool for C/C++ code.
Description: |-
  Cppcheck is a static analysis tool for C/C++ code.
  Unlike C/C++ compilers and many other analysis tools it does not detect syntax errors in the code.
  Cppcheck primarily detects the types of bugs that the compilers normally do not detect.
  The goal is to detect only real errors in the code (i.e. have zero false positives).
Moniker: cppcheck
Tags:
- admin
- analysis
- c++
- check
- code
- cpp
- static
ReleaseNotes: |-
  - pop_back on empty container is UB
  - Improve useStlAlgorithm check to handle many more conditions in the loop for any_of, all_of and none_of algorithms
  - ValueFlow can evaluate the return value of functions even when conditionals are used
  - ValueFlow will now forward the container sizes being returned from a function
  - ValueFlow can infer possible values from possible symbolic values
  - Improve valueflow after pushing to container
  - The platform type 'Unspecified' within .cppcheck projects has been deprecated and will be removed in Cppcheck 2.14.
    Please use 'unspecified' instead.
  - Do not replace relative paths with absolute paths in suppressions in the project file dialog
  - The new option --check-level=<level> has been added that controls how much checking is made by Cppcheck.
    The default checking level is "normal".
    If you feel that you can wait longer on results you can use --check-level=exhaustive.
  - It is no longer necessary to run "--check-config" to get detailed "missingInclude" and "missingIncludeSystem" messages.
    They will always be issued in the regular analysis if "missingInclude" is enabled.
  - "missingInclude" and "missingIncludeSystem" are reported with "-j" is > 1 and processes are used in the backend (default in non-Windows binaries)
  - "missingInclude" and "missingIncludeSystem" will now cause the "--error-exitcode" to be applied
  - "--enable=information" will no longer implicitly enable "missingInclude" starting with 2.16.
    Please enable it explicitly if you require it.
  - The constParameter and constVariable checks have been split into 3 different IDs based on if the variable is a pointer, a reference, or local.
    The different IDs will allow users to suppress different const warning based on variable type.
  - constParameter
  - constParameterReference
  - constParameterPointer
  - constVariable
  - constVariableReference
  - constVariablePointer
  - More command-line parameters will now check if the given integer argument is actually valid.
    Several other internal string-to-integer conversions will now be error checked.
  - scanning projects (with -j1) will now defer the analysis of markup files until the whole code was processed
ReleaseNotesUrl: https://github.com/danmar/cppcheck/releases/tag/2.11
ManifestType: defaultLocale
ManifestVersion: 1.4.0
