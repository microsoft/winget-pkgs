# Created with WinGet Automation using Komac v1.11.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.5.0.schema.json

PackageIdentifier: ChristianHohnstadt.xca
PackageVersion: 2.5.0
PackageLocale: en-US
Publisher: Christian Hohnstaedt
PublisherUrl: https://github.com/chris2511/xca
PublisherSupportUrl: https://github.com/chris2511/xca/issues
Author: Christian Hohnstaedt
PackageName: XCA
PackageUrl: https://hohnstaedt.de/xca/index.php
License: BSD License
LicenseUrl: https://github.com/chris2511/xca/blob/master/COPYRIGHT
Copyright: Copyright (C) 2001 - 2021 Christian Hohnstaedt.
CopyrightUrl: https://github.com/chris2511/xca/blob/main/COPYRIGHT
ShortDescription: This application is intended for creating and managing X.509 certificates, certificate requests, RSA, DSA and EC private keys, Smartcards and CRLs.
Moniker: xca
Tags:
- cryptography
ReleaseNotes: |-
  __Release Notes__
  - The latest release is 2.5.0
  - Drop support for Qt4, old XCA < 2.0.0 databases and OpenSSL < 1.1.0
  - Add Support for Qt6 and OpenSSL 3.x
  - Switch from autotools/qmake to cmake
  - Fix a lot of bugs (and probably added some new)
  - Add translations for Indonesian, Persian and Bulgarian
  - Please report issues on github <https://github.com/chris2511/xca/issues>
  - a toolchain
  - cmake: https://cmake.org
  - Qt5 or Qt6: https://www.qt.io
  - OpenSSL: https://www.openssl.org (1.1.1 or higher)
  - Sphinx-Build: https://www.sphinx-doc.org
  Linux / Unix
  - Install the dependencies
  - Clone: git clone https://github.com/chris2511/xca.git
  - Configure: cmake -B build xca
  - Make: cmake --build build -j5
  - Install: sudo cmake --install build
  - Or install local and copy later as root: DESTDIR=DEST cmake --install build --prefix /usr
  Apple macos
  - Install the dependencies
  - Clone: git clone https://github.com/chris2511/xca.git
  - Configure: cmake -B build xca
  - Make: cmake --build build -j5
  - Build the DMG: cd build && cpack
  - Build the PKG: cd build && cpack -G productbuild
  Windows
  - Install the dependencies
  - Install Python for windows from the store or https://www.python.org/downloads/windows/
  - Install OpenSSL from here: https://slproweb.com/download/Win64OpenSSL-3_0_8.msi and verify the sha256 from https://github.com/slproweb/opensslhashes/blob/master/win32_openssl_hashes.json
  - To install the Qt libraries, cmake and the MinGW compiler aqtinstall is used.
  - Add the PATH shown by pip to your PATH
  - Install Qt, cmake and the MinGW toolchain
  - If 7z is missing, install it from the store. 7-Zip File Manager (unofficial) or from 7-zip.org
  - Install the "vcredist\\vcredist_64.exe"
  - Add cmake, MinGW, OpenSSL and Qt5 to your Path
  - Create CMAKE_PREFIX_PATH environment variable:
  - Install https://wixtoolset.org/releases/ if you want to create the MSI installer
  - Clone: git clone https://github.com/chris2511/xca.git
  - Configure: cmake -B build -G "MinGW Makefiles" xca
  - Make: cmake --build build -j5
  - Create the Portable App: cmake --build build -t install
  - Build the MSI installer (and the Portable App): cd build ; cpack
  Linux
  - Debian: libqt6sql6-psql libqt6sql6-mysql or libqt6sql6-odbc.
  - RPM: libqt6-database-plugin-pgsql libqt6-database-plugin-mysql libqt6-database-plugin-odbc
  Apple macos
  - PostgreSQL: Install the https://postgresapp.com/
  - ODBC: It requires the /usr/local/opt/libiodbc/lib/libiodbc.2.dylib.
  - MariaDB: Probably via ODBC ?
  Windows
  - PostgreSQL: https://www.enterprisedb.com/downloads/postgres-postgresql-downloads (Commandline tools).
  - ODBC: Use the ODBC Datasources 64bit app to configure the SQL Server
  - MariaDB (MySQL): Install the Plugin from here: https://github.com/thecodemonkey86/qt_mysql_driver.
ReleaseNotesUrl: https://github.com/chris2511/xca/releases/tag/RELEASE.2.5.0
ManifestType: defaultLocale
ManifestVersion: 1.5.0
