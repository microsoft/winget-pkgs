# Created with YamlCreate.ps1 Dumplings Mod
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: OpenAgentPlatform.Dive
PackageVersion: 0.9.0
PackageLocale: en-US
Publisher: OpenAgentPlatform
PublisherUrl: https://github.com/OpenAgentPlatform
PublisherSupportUrl: https://github.com/OpenAgentPlatform/Dive/issues
Author: BigGo
PackageName: Dive
PackageUrl: https://github.com/OpenAgentPlatform/Dive
License: MIT
LicenseUrl: https://github.com/OpenAgentPlatform/Dive/blob/HEAD/LICENSE
Copyright: Copyright (c) 2025 Open Agent Platform
ShortDescription: An open-source MCP Host Desktop Application that seamlessly integrates with any LLMs supporting function calling capabilities.
Description: |-
  Dive is an open-source AI Agent desktop application that seamlessly integrates any Tools Call-supported LLM with frontend MCP Server‚Äîpart of the Open Agent Platform initiative. ‚ú®
  Features:
  - üåê Universal LLM Support: Compatible with ChatGPT, Anthropic, Ollama and OpenAI-compatible models
  - üíª Cross-Platform: Available for Windows, MacOS, and Linux
  - üîÑ Model Context Protocol: Enabling seamless AI agent integration
  - üîå MCP Server Integration: External data access and processing capabilities
  - üåç Multi-Language Support: Traditional Chinese, English, with more coming soon
  - ‚öôÔ∏è Advanced API Management: Multiple API keys and model switching support
  - üí° Custom Instructions: Personalized system prompts for tailored AI behavior
  - üí¨ Intuitive Chat Interface: Real-time context management and user-friendly design
  - üöÄ Upcoming Features: Prompt Schedule and OpenAgentPlatform MarketPlace
Tags:
- ai
- chatbot
- chatgpt
- claude
- large-language-model
- llm
- mcp
- ollama
ReleaseNotes: |-
  Dive 0.9.0 Release Notes
  Major Architecture Changes
  Starting from version 0.9.0, Dive introduces a significant architectural transformation. The application will now be available in two distinct versions:
  - Electron version (existing architecture)
  - Tauri version (new modern architecture)
  The Tauri version will initially be released for Windows, with macOS and Linux versions to follow as we gradually migrate the entire ecosystem to the Tauri architecture.
  üöÄ New Features
  - OAP Platform Integration: Added comprehensive support for OAP login and authentication
  - Dual Architecture Support: Frontend codebase now supports both Electron and Tauri frameworks simultaneously
  - Optimized Installer Size: Tauri version removes most runtime dependencies, downloading them on first launch, resulting in a Windows installer under 30MB
  - Enhanced Model Configuration: Complete restructuring of model settings with the introduction of model_settings.json for managing multiple models under the same API key
  - Granular MCP Server Control: MCP servers now support individual tool enable/disable functionality for better customization
  - UI/UX Improvements: Various user interface enhancements and refinements across the application for better user experience
  - dive-mcp-host Updates: The dive-mcp-host component has been updated to incorporate all the latest architectural improvements
  üõ†Ô∏è Development Changes
  Due to the dual-architecture approach (Electron + Tauri), the development workflow has been updated:
  - Electron Development: Unchanged workflow using npm run dev command
  - Tauri Development: Requires Tauri CLI installation followed by cargo tauri dev for development
  - Frontend Development: Since both architectures share the same frontend codebase, using the Electron development workflow (npm run dev) is recommended for smoother frontend-only development experience
  - IPC Communication: Changed from direct ipcRenderer calls for Electron communication to abstracted bridge functions defined in src/ipc that support both Electron and Tauri backends
  üîß Technical Improvements
  - Unified frontend codebase supporting multiple desktop frameworks
  - Improved model management system with JSON-based configuration
  - Enhanced MCP server flexibility with per-tool controls
  - Streamlined authentication flow with OAP platform integration
  Platform Availability
  - Windows: Available in both Electron and Tauri versions
  - macOS: Currently Electron only (Tauri version coming soon)
  - Linux: Currently Electron only (Tauri version coming soon)

  OAP Release Notes
  Major Feature: OAP Cloud Service Integration
  Overview
  This release introduces native support for OpenAgent Platform (OAP) cloud services, fundamentally addressing the deployment complexity challenges in the MCP ecosystem.
  Background & Motivation
  Since December 2024, our team has been working extensively with Model Context Protocol (MCP). While MCP provides powerful capabilities, we identified critical adoption barriers:
  - Complex dependency management: Docker, Python environments, and platform-specific configurations
  - Cross-platform compatibility issues: Inconsistent behavior across Windows, macOS, and Linux
  - High technical barrier: Average users struggle with server setup and maintenance
  Local deployment scenarios often require multiple complex installations (searxng for web search, yt-dlp for media processing, playwright for web automation), creating significant friction for end users.
  Solution: OAP Cloud Architecture
  We developed OAPHub.ai (https://oaphub.ai/) as a managed MCP service platform, offering:
  Core Technical Features:
  - Streamable Protocol Implementation: Enhanced MCP protocol supporting real-time streaming capabilities
  - Multi-client Integration: Universal compatibility across AI development tools
  - Managed Infrastructure: Fully hosted MCP servers with enterprise-grade reliability
  Integration Methods:
  Configuration-based Integration
  - Supported Clients: Claude Code, Gemini CLI, OpenAI-SDK, Cursor, and other config-driven tools
  - Method: Copy/paste streamable configuration files
  - Use Case: Development environments requiring programmatic access
  Deep Link Integration
  - Supported Clients: Cursor, LM Studio, Dive Desktop
  - Method: One-click connection via custom URI schemes
  - Use Case: Desktop applications with native deep link support
  OAuth Flow Integration
  - Supported Clients: Claude Desktop
  - Method: Secure OAuth 2.0 authentication flow
  - Use Case: Enterprise applications requiring secure authentication
  Impact & Benefits
  - Deployment Time: Reduced from hours to minutes
  - Technical Expertise Required: Eliminated for end users
  - Platform Compatibility: Unified experience across all supported platforms
  - Maintenance Overhead: Zero ongoing maintenance for users
  Migration Notes
  Existing local MCP/LLM configurations remain fully supported. OAP integration is additive and does not affect current workflows.
ReleaseNotesUrl: https://github.com/OpenAgentPlatform/Dive/releases/tag/v0.9.0
ManifestType: defaultLocale
ManifestVersion: 1.10.0
