# Created using wingetcreate 1.6.5.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json

PackageIdentifier: OpenJS.NodeJS
PackageVersion: 22.10.0
PackageLocale: en-US
Publisher: Node.js Foundation
PublisherUrl: https://openjsf.org/
PublisherSupportUrl: https://github.com/nodejs/node/blob/v22.10.0/.github/SUPPORT.md
PrivacyUrl: https://privacy-policy.openjsf.org/
Author: OpenJS Foundation
PackageName: Node.js
PackageUrl: https://nodejs.org/
License: MIT
LicenseUrl: https://github.com/nodejs/node/blob/v22.10.0/LICENSE
Copyright: Copyright Node.js contributors. All rights reserved.
CopyrightUrl: https://trademark-policy.openjsf.org/
ShortDescription: Run JavaScript Everywhere
Description: Node.js® is a free, open-source, cross-platform JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts.
Moniker: nodejs
Tags:
- coding
- cross-platform
- develop
- development
- environment
- javascript
- js
- node
- npm
- programming
- runtime
- v8
ReleaseNotes: |-
  Notable Changes
  New "module-sync" exports condition
    This release introduces a "module-sync" exports condition that's enabled when require(esm) is enabled, so packages can supply a synchronous ES module to the Node.js module loader, no matter if it's being required or imported. This is similar to the "module" condition that bundlers have been using to support require(esm) in Node.js, and allows dual-package authors to opt into ESM-first only on newer versions of Node.js that supports require(esm) to avoid the dual-package hazard.
    Or if the package is only meant to be run on Node.js and wants to fallback to CJS on older versions that don't have require(esm):

    For package authors:
      this only serves as a feature-detection mechanism for packages that wish to support both CJS and ESM users during the period when some active Node.js LTS versions support require(esm) while some older ones don't. When all active Node.js LTS lines support require(esm), packages can simplify their distributions by bumping the major version, dropping their CJS exports, and removing the module-sync exports condition (with only main or default targetting the ESM exports). If the package needs to support both bundlers and being run unbundled on Node.js during the transition period, use both module-sync and module and point them to the same ESM file. If the package already doesn't want to support older versions of Node.js that doesn't support require(esm), don't use this export condition.

    For bundlers/tools:
      they should avoid implementing this stop-gap condition. Most existing bundlers implement the de-facto bundler standard module exports condition, and that should be enough to support users who want to bundle ESM from CJS consumers. Users who want both bundlers and Node.js to recognize the ESM exports can use both module/module-sync conditions during the transition period, and can drop module-sync+module when they no longer need to support older versions of Node.js. If tools do want to support this condition, it's recommended to make the resolution rules in the graph pointed by this condition match the Node.js native ESM rules to avoid divergence.
      We ended up implementing a condition with a different name instead of reusing "module", because existing code in the ecosystem using the "module" condition sometimes also expect the module resolution for these ESM files to work in CJS style, which is supported by bundlers, but the native Node.js loader has intentionally made ESM resolution different from CJS resolution (e.g. forbidding import './noext' or import './directory'), so it would be breaking to implement a "module" condition without implementing the forbidden ESM resolution rules. For now, this just implements a new condition as semver-minor so it can be backported to older LTS.
    Contributed by Joyee Cheung in #54648.

  node --run is now stable
    This CLI flag runs a specified command from a package.json's "scripts" object.
    You can run node --run test and that would start the test suite.
    Contributed by Yagiz Nizipli in #53763.

  Other notable changes
  - [f0b441230a] - (SEMVER-MINOR) crypto: add KeyObject.prototype.toCryptoKey (Filip Skokan) #55262
  - [349d2ed07b] - (SEMVER-MINOR) crypto: add Date fields for validTo and validFrom (Andrew Moon) #54159
  - [bebc95ed58] - doc: add abmusse to collaborators (Abdirahim Musse) #55086
  - [914db60159] - (SEMVER-MINOR) http2: expose nghttp2_option_set_stream_reset_rate_limit as an option (Maël Nison) #54875
  - [f7c3b03759] - (SEMVER-MINOR) lib: propagate aborted state to dependent signals before firing events (jazelly) #54826
  - [32261fc98a] - (SEMVER-MINOR) module: support loading entrypoint as url (RedYetiDev) #54933
  - [06957ff355] - (SEMVER-MINOR) module: implement flushCompileCache() (Joyee Cheung) #54971
  - [2dcf70c347] - (SEMVER-MINOR) module: throw when invalid argument is passed to enableCompileCache() (Joyee Cheung) #54971
  - [f9b19d7c44] - (SEMVER-MINOR) module: write compile cache to temporary file and then rename it (Joyee Cheung) #54971
  - [e95163b170] - (SEMVER-MINOR) process: add process.features.require_module (Joyee Cheung) #55241
  - [4050f68e5d] - (SEMVER-MINOR) process: add process.features.typescript (Aviv Keller) #54295
  - [86f7cb802d] - (SEMVER-MINOR) test_runner: support custom arguments in run() (Aviv Keller) #55126
  - [b62f2f8259] - (SEMVER-MINOR) test_runner: add 'test:summary' event (Colin Ihrig) #54851
  - [d7c708aec5] - (SEMVER-MINOR) test_runner: add support for coverage via run() (Chemi Atlow) #53937
  - [5fda4a1498] - (SEMVER-MINOR) worker: add markAsUncloneable api (Jason Zhang) #55234
ReleaseNotesUrl: https://github.com/nodejs/node/releases/tag/v22.10.0
Documentations:
- DocumentLabel: Learn
  DocumentUrl: https://nodejs.org/en/learn/
- DocumentLabel: Documentation
  DocumentUrl: https://nodejs.org/docs/v22.10.0/api/
- DocumentLabel: About
  DocumentUrl: https://nodejs.org/about/
ManifestType: defaultLocale
ManifestVersion: 1.6.0
