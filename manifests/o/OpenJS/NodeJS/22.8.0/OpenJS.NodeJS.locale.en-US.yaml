# Created using wingetcreate 1.6.5.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json

PackageIdentifier: OpenJS.NodeJS
PackageVersion: 22.8.0
PackageLocale: en-US
Publisher: Node.js Foundation
PublisherUrl: https://openjsf.org/
PublisherSupportUrl: https://github.com/nodejs/node/blob/v22.8.0/.github/SUPPORT.md
PrivacyUrl: https://privacy-policy.openjsf.org/
Author: OpenJS Foundation
PackageName: Node.js
PackageUrl: https://nodejs.org/
License: MIT
LicenseUrl: https://github.com/nodejs/node/blob/v22.8.0/LICENSE
Copyright: Copyright Node.js contributors. All rights reserved.
CopyrightUrl: https://trademark-policy.openjsf.org/
ShortDescription: Run JavaScript Everywhere
Description: Node.jsÂ® is a free, open-source, cross-platform JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts.
Moniker: nodejs
Tags:
- coding
- cross-platform
- develop
- development
- environment
- javascript
- js
- node
- npm
- programming
- runtime
- v8
ReleaseNotes: |-
  New JS API for compile cache
    This release adds a new API module.enableCompileCache() that can be used to enable on-disk code caching of all modules loaded after this API is called.
    Previously this could only be enabled by the NODE_COMPILE_CACHE environment variable, so it could only set by end-users.
    This API allows tooling and library authors to enable caching of their own code.
    This is a built-in alternative to the v8-compile-cache/v8-compile-cache-lib packages, but have better performance and supports ESM.
    Thanks to Joyee Cheung for working on this.

  New option for vm.createContext() to create a context with a freezable globalThis
    Node.js implements a flavor of vm.createContext() and friends that creates a context without contextifying its global object when vm.constants.DONT_CONTEXTIFY is used. This is suitable when users want to freeze the context (impossible when the global is contextified i.e. has interceptors installed) or speed up the global access if they don't need the interceptor behavior.
    Thanks to Joyee Cheung for working on this.

  Support to coverage thresholds
    Node.js now supports requiring code coverage to meet a specific threshold before the process exits successfully.
    To use this feature, you need to enable the --experimental-test-coverage flag.
    You can set thresholds for the following types of coverage:
    - Branch coverage: Use --test-coverage-branches=<threshold>
    - Function coverage: Use --test-coverage-functions=<threshold>
    - Line coverage: Use --test-coverage-lines=<threshold>
    <threshold> should be an integer between 0 and 100. If an invalid value is provided, a TypeError will be thrown.
    If the code coverage fails to meet the specified thresholds for any category, the process will exit with code 1.
    For instance, to enforce a minimum of 80% line coverage and 60% branch coverage, you can run:
    $ node --experimental-test-coverage --test-coverage-lines=80 --test-coverage-branches=60 example.js
    Thanks Aviv Keller for working on this.

  Other Notable Changes
  - [1f2cc2fa47] - (SEMVER-MINOR) src,lib: add performance.uvMetricsInfo (Rafael Gonzaga) #54413
  - [1e01bdc0d0] - (SEMVER-MINOR) net: exclude ipv6 loopback addresses from server.listen (Giovanni Bucci) #54264
  - [97fa075c2e] - (SEMVER-MINOR) test_runner: support running tests in process (Colin Ihrig) #53927
  - [858b583c88] - (SEMVER-MINOR) test_runner: defer inheriting hooks until run() (Colin Ihrig) #53927
ReleaseNotesUrl: https://github.com/nodejs/node/releases/tag/v22.8.0
Documentations:
- DocumentLabel: Learn
  DocumentUrl: https://nodejs.org/en/learn/
- DocumentLabel: Documentation
  DocumentUrl: https://nodejs.org/docs/v22.8.0/api/
- DocumentLabel: About
  DocumentUrl: https://nodejs.org/about/
ManifestType: defaultLocale
ManifestVersion: 1.6.0
