# Created using wingetcreate 1.6.1.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json

PackageIdentifier: Hex-Rays.IDA.Free
PackageVersion: "8.4"
PackageLocale: en-US
Publisher: Hex-Rays SA
PublisherUrl: https://hex-rays.com/
PublisherSupportUrl: https://hex-rays.com/products/ida/support/
PrivacyUrl: https://hex-rays.com/privacy_policy/
Author: Hex-Rays SA
PackageName: IDA Freeware
PackageUrl: https://hex-rays.com/ida-free/
License: Freeware
LicenseUrl: https://hex-rays.com/terms_of_use/
Copyright: (c) 2024 Hex-Rays SA
ShortDescription: The free binary code analysis tool to kickstart your reverse engineering experience.
Description: This (completely!) free version of IDA offers a privilege opportunity to see IDA in action. This light but powerful tool can quickly analyze the binary code samples and users can save and look closer at the analysis results.
Tags:
- debug
- debugger
- decompile
- decompiler
- develop
- development
- disassemble
- disassembler
- reverse-engineering
ReleaseNotes: |-
  Unified type storage (ASMTIL)
  - The presence of Structures, Enums and Local Types views and synchronization between them confused many users, especially those new to IDA. We have decided to add all missing features (such as structure field representation) to Local Types and now all type manipulations (still with familiar hotkeys!) can be done there. New databases will only have Local Types by default and Structures and Enums are deprecated.
  - The new Local Types Widget allows editing structures like the classic Structures widget, or via a free-text editor.
  - The same goes for enum types

  ARM/iOS improvements
  - We added support for common Apple-specific instructions and system registers commonly encountered in iOS and macOS software. This means you should see fewer instances of undefined bytes breaking disassembly and more understandable code when working with these files.
  - ARMv8.6-A support. We've added most of mandatory and optional instructions from ARMv8.6-A (with notable exception of SVE). In particular, we added the following instruction set extensions:
  - FEAT_SHA3: (4) Advanced SIMD SHA3 instructions
  - FEAT_SHA512: (4) Advanced SIMD SHA512 instructions
  - FEAT_DotProd: (2) Advanced SIMD dot product instructions
  - FEAT_BF16: (8) BFloat16 (Brain Floating Point) instructions
  - FEAT_FHM: (2) Floating-point half-precision multiplication instructions
  - FEAT_I8MM: (5) Int8 matrix multiplication instructions
  - ARMv8-M support: we now properly disassemble accesses to the new system registers introduced since ARMv7-M (for example, NS variants of some registers)
  - The Mach-O loader now offers fine-grained control over the selection of dyld shared cache modules and their dependencies:
  - The ARM32 decompiler supports hard-float ABI (floating point values passed and returned in FPU registers):

  Debugger improvements
  - We added support for recent Android versions and made it more robust when working with apps without debug information. If running on a recent (API28+) Android, IDA will try to guess the variable type automatically. Since in the Dalvik VM the value of a variable cannot be displayed without knowing its type, this boosts the debugging experience significantly.
  - Environment variables can now be specified for Windows/Linux/Mac debuggers in process options:
  - We made various improvements to the debugging backends:
    - Address Space Layout Randomization (ASLR) can now be disabled for most platforms that support it (local debuggers and remote gdbstub). This simplifies debugging in cases where deterministic addresses are desired.
    - We enabled NoAck mode on iOS, saving one round trip time. This is beneficial for anybody debugging remote devices over high-latency connections (typically cloud-based emulators).
    - Finally, our remote debugging server now is available for ARM64 Linux.

  Modernized Look-and-feel
  - We replaced all icons with brushed-up, vectorized versions and added a crosshair effect to the minigraph view for orientation in large graphs.
    Moreover, pixelated fonts are a thing of the past. Texts in graph mode now render crisp at any zoom level.
  - Scrolling and zooming via the trackpad now works smoothly (especially, but not limited to, macOS)
  - better graph layouts with fewer(none?) edge intersections, even on big functions

  Improved Parsing of Rust metadata
  - We added a plugin for parsing Rust-specific data and constructs. As a consequence, the huge string pools typically observed in Rust binaries are now split up properly. Moreover, the plugin adds demangling of both legacy and the v0 Rust name mangling format.

  Full list of changes and new features:
  Processor modules
  - ARM: added some Apple-specific A64 system registers
  - ARM: added support for most ARMv8.6-A instructions: FHM, BF16, SHA3, SHA512, SM3, SM4
  - ARM: decode Apple-specific instructions used in iOS and macOS (GXF, AMX, SDSB etc.)
  - ARM: detect calls in A64 mode when X30 (LR) points to the address after a branch
  - ARM: expand the architecture settings dialog with explicit options for ARMv8-A, ARMv8-M and ARMv9
  - ARM: improved handling of references to fields of structure instances
  - ARM: improved xref creation for LDP and STP instructions
  - PC: added decoding of new Sapphire Rapids instructions (UINTR and HRESET)
  - PC: support x86 switch variation produced by GCC 4.8
  - PPC: implemented a simple regtracker (regfinder)
  - PPC: improved handling of references to fields of structure instances
  - MIPS: added support of $s1 as frame register in mips16 functions
  - MIPS: improved handling of references to fields of structure instances
  - NEC850: implemented a simple regtracker (regfinder)
  - NEC850: print the target for indirect jumps and calls (when available)
  - NEC850: support a new switch pattern (uses 'bnc' after 'addi')
  - TMS320C28X: added support for extended instructions (FPU, FPU64, VCU, VCRC, VCU-II, TMU, FINTDIV)
  File formats
  - MACHO: overhaul of the dyld shared cache module selection system
  - MACHO: properly describe versioned arm64e ABI Mach-O files
  - MACHO: support relocations provided by the __chain_starts section in Apple's firmware components (e.g. SPTM, TXM)
  - MACHO: added support for dyld slide info version 5 (macOS 14.4)
  FLIRT / TILS / IDS
  - FLIRT: added signatures for icl 231 (Intel C++ 2023.1.0)
  - FLIRT: go: runtime signatures for go1.22 (x86_64)
  - FLIRT: go: startup and runtime signatures for go1.21 (x86_64)
  - FLIRT: VC: added signatures for vc14.36 (Visual Studio 2022.16)
  - FLIRT: VC: added signatures for vc14.37 (Visual Studio 2022::VC17.7)
  - TIL: MacOSX12.0 SDK
  - TIL: MacOSX13.0 SDK
  - TIL: MacOSX14.0 SDK
  - TIL: iPhoneOS15.0 SDK
  - TIL: iPhoneOS16.4 SDK
  - TIL: iPhoneOS17.0 SDK
  Standard plugins
  - makesig: new plugin to generate FLIRT signatures from the current database
  - makesig: Added File > Produce file > Create SIG file... action
  - DWARF: Handle oversized bitfield groups at the end of structures
  - idaclang: parse __attribute__((annotate("...")))
  - OBJC: added support for relative lists of properties and protocols (iOS17 optimization)
  - OBJC: got rid of extra cast to 'Class' in the calls to objc_alloc() and objc_alloc_init()
  - OBJC: handle object initialization using objc_opt_new
  - OBJC: simplify calls to the 'objc_msgSend$method' helpers and add cross-references to destination method using the decompiler
  - rust: new plugin for parsing rust-specific data and constructs (e.g. splitting merged string literals)
  - rust: support demangling of both legacy and the v0 mangling format (RFC 2603)
  - SWIFT: group functions by the module name; added an option to swift.cfg
  - SWIFT: updated demangler for Swift 5.9
  Kernel/Misc
  - kernel: added a new analysis option "Merge strlits" (enabled by default, disabled for golang)
  - kernel: allow constant with value 0 for bitmask enum if zero is not the only one constant in group and there is more than 1 group
  - kernel: allow register names as struct/union member names.
  - kernel: assume g++ 3.x (Itanium ABI) name mangling by default
  - kernel: improve strlit discovery from cross-references
  - kernel: parse __attribute__((annotate("...")))
  Scripting & SDK
  - IDAPython: implemented idc.sizeof(), equivalent of the IDC function
  - IDAPython: improve doc and error message for ida_typeinf.calc_type_size()
  - IDC: highlight more keywords in the script editor
  - SDK: improved get_utf8_char() not to move the pointer past the terminating zero
  - SDK: improved idb_event::local_types_changed to include more detailed info about the modified types
  - SDK: renamed get_ordinal_qty -> get_ordinal_limit
  UI
  - UI: added "Find register definition" and "Find register use" to the IDA View context menu
  - UI: debugger: added environment variables to the process options dialog
  - UI: enable folders in the Functions window by default
  - UI: FLIRT signatures can now be loaded from arbitrary location and not just IDA's sig folder
  - UI: graph: add ability to select graph edges, in addition to nodes
  - UI: graph: highlight item under mouse after jump on edge (when the animation stops)
  - UI: graph: improved readability of the graph overview's focus area
  - UI: highlight focused area in the mini graph view
  - UI: improved displaying of string literals in terse structure view
  - UI: improved Local Types view to be a complete replacement for assembler-style Enums and Structs (which are deprecated)
  - UI: improved output of array of structs and output of varstruct (if last field is not empty)
  - UI: improved output of terse struct with nested varstruct
  - UI: improved wheel scrolling, to make it smoother (and more accurate)
  - UI: new icon set, SVG-based and with a refreshed palette
  - UI: reduce the delay when invoking 'Convert to array' action
  - UI: save "Turn on sync
ReleaseNotesUrl: https://hex-rays.com/products/ida/news/8_4/
Documentations:
- DocumentLabel: Documentation
  DocumentUrl: https://hex-rays.com/documentation/
- DocumentLabel: Tutorials
  DocumentUrl: https://hex-rays.com/tutorials/
ManifestType: defaultLocale
ManifestVersion: 1.6.0
