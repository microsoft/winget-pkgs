# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.4.20-M1
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  New project templates in Kotlin/JS:
  - KT-41417 - Add react template to new project wizard
  - KT-40527 - Node.
    JS application template in New Project Wizard
  - KT-35549 - Support kotlin-android-extensions in JVM IR backend (for use with Jetpack Compose projects)
  Kotlin/JS Gradle plugin upgrades:
  - KT-41054 - resolutions rule for yarn
  - KT-35330 -customise generated package.json
  Performance boosts:
  - KT-33394
  - KT-38787
  Backend. Native
  - KT-27534 Bridges to Nothing-returning methods have incorrect signature
  - KT-30284 Native: Nothing? type for expression override and crash
  - KT-36430 Optimize when with in range cases
  - KT-38787 Missing optimization for "in range" check
  - KT-39100 Make Native behaviour of property initialization consistent with JVM
  - KT-39798 Override equals/hashCode in functional interface wrappers on Native
  - KT-39800 equals/hashCode on adapted function references on Native
  - KT-41394 Compilation failed: Backend Internal error: Exception during IR lowering
  - KT-41907 Framework test segfaults on GC on watchos_x86 compiled with -opt
  New Features
  - KT-35549 Support kotlin-android-extensions in JVM IR backend (for use with Jetpack Compose projects)
  Performance Improvements
  - KT-20571 Coroutines: Reduce number of local variables stored at suspension point
  - KT-28016 Coroutine state-machines spill/unspill shall be optimized using data-flow analysis
  - KT-33394 UI freezes triggered by QualifiedExpressionResolver.resolveToPackageOrClassPrefix
  - KT-36814 Support optimized delegated properties in JVM_IR
  - KT-36829 Optimize 'in' expressions (operator fun contains) in JVM_IR
  Fixes
  - KT-16222 Coroutine should be clearing any internal state as soon as possible to avoid memory leaks
  - KT-25519 Extra inline marks inside suspending function callable reference bytecode
  - KT-33226 Object INSTANCE field not annotated with NotNull in generated bytecode
  - KT-35495 FIR: forbid non-Java synthetic properties
  - KT-35651 Kotlin stdlib has greater resolution priority than jars added via @file:DependsOn annotation
  - KT-35730 FIR: consider creating fake overrides for objects
  - KT-36951 IllegalStateException: Expected some types: Throwing exception when there is a type parameter upper bound for itself
  - KT-37321 [FIR] Support java array in type argument
  - KT-37431 [FIR] Support Builder Inference
  - KT-38272 FIR2IR: use lazy IR symbols for externals & fake overrides
  - KT-38333 FIR: CCE on red code with assignment used as expression
  - KT-38334 FIR: CCE when resolving try-as-expression
  - KT-38336 FIR: NPE with corrupted numeric constant literal
  - KT-38397 FIR: Exception while resolving contract definition
  - KT-38444 [FIR] Invoke extension lambda with safe call
  - KT-38470 FIR: ConeDefinitelyNotNullType in signature
  - KT-38471 FIR: ConeIntersectionType in signature
  - KT-38925 Internal error: wrong bytecode generated. (AssertionError: int type expected, but null was found in basic frames)
  - KT-38989 FIR: Refine sealed classes exhaustiveness in case of sealed subclass
  - KT-38992 FIR: Refine type resolution for inner classes
  - KT-39000 FIR: Support smartcast after reference equality check
  - KT-39005 FIR: Resolve plusAssign in a dependent context
  - KT-39008 FIR: Investigate strange effect of type alias and not-nullable bound on inference
  - KT-39012 FIR: Inference doesn't get through elvis to lambda parameter
  - KT-39028 FIR: Strange resolution to synthetic property with implicit extension receiver while there's an explicit receiver
  - KT-39032 FIR: Ambiguity in member scope of a type parameter with multiple bounds
  - KT-39033 FIR: Ambiguity when calling generic overridden property
  - KT-39034 FIR: Support nested extension function types
  - KT-39040 FIR: Deserialize annotations from compiled Kotlin binaries
  - KT-39043 FIR: Bare types incorrectly work with type aliases
  - KT-39044 FIR: Add fillInStackTrace to member scope of kotlin.
    Throwable
  - KT-39046 FIR: Implicit types in lambdas left when call argument is a type cast
  - KT-39048 FIR: Inference fails with integer literal used as Comparable
  - KT-39050 FIR: Type resolver doesn't see nested classes from super class of a local class
  - KT-39070 FIR: Ambiguity on super calls to hashCode/equals when having super interface and class
  - KT-39072 FIR: Subtyping check doesn't affect nullability of safe-call receiver
  - KT-39076 FIR: Synthetic property is not a var because of @Nullable annotation on parameter
  - KT-39080 FIR: Smart casts remain incorrect if lambda is present in when branch
  - KT-39374 Wrong bytecode generated for suspend function call with EXACTLY_ONCE lambda capturing a variable initialized in when-subject
  - KT-39621 [FIR] Support when exhaustiveness checker for java enums
  - KT-40135 JVM IR does not generate restricted suspend lambdas
  - KT-40382 Missing proper jvmSignature for synthesized equals/hashCode/toString in inline classes
  - KT-40605 JVM IR: IndexOutOfBoundsException caused by inner class passed to generic outer class method with Nothing type argument
  - KT-40664 JVM: No bounds check in optimization of ULong in UInt..
    UInt
  - KT-40665 JVM: No resolved function check when optimizing in/contains with mismatched bound types
  - KT-41014 FIR2IR: when/where/how to determine the presence of a backing field for a property
  - KT-41018 FIR2IR: sort members during de/serialization
  - KT-41144 False positive "Redundant spread operator" in when statement and generic vararg argument
  - KT-41374 JVM / IR: NoSuchMethodError in Android project compiler caused by combination of inline classes and coroutines
  - KT-41388 NI: Backend Internal error: Exception during IR lowering
  - KT-41429 Inline class returned from suspend function should be boxed on resume path
  - KT-41465 JVM / IR: "AssertionError: inconsistent parent function for CLASS LAMBDA_IMPL CLASS name" caused by inline method call into multiple constructors
  - KT-41668 JVM IR: incorrect enclosing constructor for lambdas in initializers of inner classes
  - KT-41669 JVM IR: incorrect hashCode intrinsic is used in JVM target 1.8 for generic type substituted with primitive
  - KT-41693 NI: Type inference in nested expression incorrectly assumes non-nullable return type of Java function, causing NullPointerException
  - KT-41729 NI: UnsupportedOperationException with invalid callable reference
  - KT-41761 JVM IR: CCE from backend on generating typeOf for non-reified type parameter with star projection in upper bound
  - KT-41789 Missing DebugMetadata in inlined suspend lambda
  - KT-41913 NI: Kotlin 1.4 type inference breaks valid code
  - KT-41934 NI: a type variable for lambda parameter has been inferred to nullable type instead of not null one
  New Features
  - KT-20775 More kotlin kinds in new kotlin file/class menu
  - KT-31331 Improve: Optimize Import should remove unused unresolved imports
  - KT-31500 Smart enter: support get() clause
  - KT-39231 Injection: Add receiver of kotlin.text.toPattern to standard Kotlin injections
  - KT-39844 Add specific highlight for Enum class
  Performance Improvements
  - KT-39353 Implement EnterBetweenBracesNoCommitDelegate
  - KT-39720 A lot of freezes in Kotlin project
  - KT-41634 Deadlock in org.jetbrains.kotlin.idea.framework.
    LibraryEffectiveKindProviderImpl.getEffectiveKind
  - KT-41936 Impossible to work with Kotlin 1.4 in 202 idea, idea eats all cpu
  Fixes
  - KT-10790 "Move statement up" for @file-targeted annotation moves package declaration to bottom of file
  - KT-15262 "Generate toString()" is ignoring property if it has a getter
  - KT-24352 Method separators: displayed between properties, not displayed between companion object and function
  - KT-29364 "Extend selection" can't select lambda body with parameters
  - KT-32403 Clickable links in annotation parameters (like in TODOs)
  - KT-32409 Organizing imports should not remove imports while there are unresolved symbols
  - KT-33131 No indent before get/set method while editing extension var declaration
  - KT-34566 Too small indent after line break for multi line strings
  - KT-34587 "Move statement down" doesn't work for statement in constructor with end-of-line comment
  - KT-34705 "Move statement down" for penultimate statement with end-of-line comment in constructor leads to moving comma to the end of comment
  - KT-34707 "Move statement up" for last statement with end-of-line comment in constructor leads to moving comma to the end of comment
  - KT-35424 FIR IDE: Kotlin project does not see stdlib
  - KT-35732 URLs in String literals are not clickable
  - KT-35859 Language injection doesn't work with named arguments in different position
  - KT-37210 UAST: KtLightClassForSourceDeclaration.isInheritor sometimes returns the wrong result
  - KT-37219 File level OptIn annotation is not recognized by the IDE
  - KT-39398 Wrong import of unrelated object member is suggested for receiver
  - KT-39457 Separate decompiled declarations Light implementation from LightClasses infrastructure
  - KT-39899 KotlinOptimizeImportsRefactoringHelper: ISE: Attempt to modify PSI for non-committed Document
  - KT-40578 UAST: write accesses to Kotlin properties should resolve to setter
  - KT-41290 KotlinClassViaConstructorUSimpleReferenceExpression resolves to PsiMethod instead of PsiClass
  - KT-42029 HMPP, IDE: NPE from FacetSerializationKt.getFacetPlatformByConfigurationElement on project opening
  IDE. Completion
  - KT-26235 Kotlin methods/fields don't have icons in Java completion
  IDE. Debugger
  - KT-39309 Debugger: Prolonged "Collecting data" for variables when breakpoint is inside respondHtml
  - KT-39435 "Collecting data..." in debugger variables view never finishes
  - KT-39717 Debugger shows "Collecting data..." forever for instances of some class
  - KT-40386 Memory leak detected: 'org.jetbrains.kotlin.idea.debugger.coroutine.view.
    XCoroutineView'
  - KT-41505 Coroutines Debugger: “Access is allowed from event dispatch thread with IW lock only.”
  IDE. Gradle Integration
  - KT-34271 Support pureKotlinSourceFolders for MPP projects
  - KT-37106 Gradle + IDE integration: on creating source roots from Project tree IDEA creates incorrect settings
  IDE. Gradle. Script
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.4.20-M1
ManifestType: defaultLocale
ManifestVersion: 1.4.0
