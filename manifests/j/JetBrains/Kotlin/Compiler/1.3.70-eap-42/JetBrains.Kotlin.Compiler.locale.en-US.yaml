# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.3.70-eap-42
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  New Features
  - KT-7745 Support named arguments in their own position even if the result appears as mixed
  - KT-34847 Lift restrictions from kotlin.
    Result
  Performance Improvements
  - KT-14513 Suboptimal compilation of lazy delegated properties with inline getValue
  Fixes
  - KT-19234 Improve "Supertypes of the following classes cannot be resolved" diagnostic
  - KT-21178 Prohibit access of protected members inside public inline members
  - KT-24461 Expect interface with suspend function with default arguments causes runtime error
  - KT-25514 Support usage of function reference with vararg where function of array is expected in new inference
  - KT-26435 Bad frame merge after inline
  - KT-27825 Gradually prohibit non-abstract classes containing abstract members invisible from that classes (internal/package-private)
  - KT-27999 Generic type is fixed too early for lambda arguments
  - KT-28940 Concurrency issue for lazy values with the post-computation phase
  - KT-29242 Conditional with generic type Nothing inside inline function throws java.lang.
    VerifyError: Bad return type
  - KT-30244 Unable to infer common return type for two postponed arguments
  - KT-30245 Wrong type is inferred for lambda if it has expected type with an extension receiver
  - KT-30277 Relax the "no reflection found in class path" warning for KType and related API
  - KT-30744 Invoking Interface Static Method from Extension method generates incorrect jvm bytecode
  - KT-30953 Missing unresolved if callable reference is used in the place in which common super type is computing
  - KT-31227 Prohibit using array based on non-reified type parameters as reified type arguments on JVM
  - KT-31653 Incorrect transformation of the try-catch cover when inlining
  - KT-31975 No diagnostic on error type
  - KT-32106 New type inference algorithm: IDE shows error but the code compiles succesfully
  - KT-32138 New type inference:  invoking type-aliased extension function red in IDE, but compiles
  - KT-32168 Problem in IDE with new type inference and delegate provider
  - KT-32243 New type inference fails
  - KT-32345 New type inference error when using helper method to create delegate provider
  - KT-32415 Type mismatch on argument of super constructor of inner class call
  - KT-32423 NI: IllegalStateException: Error type encountered: org.jetbrains.kotlin.types.
    ErrorUtils$UninferredParameterTypeConstructor@211a538e (ErrorType)
  - KT-32456 NI: "IllegalStateException: Error type encountered" when adding emptyList to mutableList
  - KT-32499 Kotlin/JS - new type inference with toTypedArray() failure
  - KT-32742 Gradle/JS "Unresolved Reference" when accessing setting field of Dynamic object w/ React
  - KT-32818 Type inference failed with elvis operator
  - KT-32862 NI: Compilation error "IllegalArgumentException: ClassicTypeSystemContextForCS couldn't handle" with overloaded generic extension function reference passed as parameter
  - KT-33033 NI: Nothing incorrectly inferred as return type when null passed to generic function with expression if statement body
  - KT-33197 Expression with branch resolving to List<…> ultimately resolves to MutableList<…>
  - KT-33263 "IllegalStateException: Type variable TypeVariable(T) should not be fixed!" with generic extension function and in variance
  - KT-33592 NI: Missed error in IDE — Unsupported [Collection literals outside of annotations]
  - KT-33932 Compiler fails when it encounters inaccessible classes in javac integration mode
  - KT-34029 StackOverflowError for access to nested object inheriting from containing generic class at org.jetbrains.kotlin.descriptors.impl.
    LazySubstitutingClassDescriptor.getTypeConstructor
  - KT-34282 Missing diagnostic of unresolved for callable references with overload resolution ambiguity
  - KT-34391 IDE, NI: False negative EXPERIMENTAL_API_USAGE_ERROR with callable reference
  - KT-34500 CompilationException when loop range is DoubleArray and loop parameter is casted to super-type (e.g.
    Any, Number, etc.)
  - KT-34647 Gradually rename experimentality annotations
  - KT-34649 Deprecate -Xexperimental flag
  - KT-34743 Support trailing comma in the compiler
  - KT-34786 Flaky type inference for lambda expressions
  - KT-34820 NI: Red code when expanding type-aliased extension function in LHS position of elvis
  - KT-35101 "AssertionError: Mapping ranges should be presented in inline lambda" with a callable reference argument to inline lambda
  - KT-35168 NI: "UninitializedPropertyAccessException: lateinit property subResolvedAtoms has not been initialized"
  - KT-35172 NI: False positive type mismatch if nullable type after elvis and safe call inside lambda is returning (expected type is specified explicitly)
  - KT-35224 NI: Java call candidate with varargs as Array<something> isn't present if SAM type was used in this call
  - KT-35426 IncompatibleClassChangeError: Method 'int java.lang.
    Object.hashCode()' must be Methodref constant when invoking on super with explicit  generic type
  Docs & Examples
  - KT-31118 Provide missing documentation for StringBuilder members
  New Features
  - KT-27496 Color Scheme: allow changing style for suspend function calls
  - KT-30806 Add IntelliJ Color Scheme rules for property declarations
  - KT-34303 IDE should suggest to import an extension iterator function when using for loop with a range
  - KT-34567 Feature: Auto add val keyword on typing data/inline class ctor parameters
  - KT-34667 Add auto-import quickfix for overloaded generic function
  Performance Improvements
  - KT-30726 Editor is laggy if the code below a current line has unresolved reference
  - KT-30863 IDE freeze on editing with "Add unambiguous imports on the fly" turned on
  - KT-32868 Provide incremental analysis of file when it is applicable
  - KT-33250 KtLightClassForSourceDeclaration.isFinal() can be very slow (with implications for class inheritor search)
  - KT-33905 Optimize imports under reasonable progress
  - KT-34956 UI Freeze: PlainTextPasteImportResolver
  - KT-35121 Add support for KtSecondaryConstructors into incremental analysis
  - KT-35189 Support incremental analysis of comment and kdoc
  - KT-35590 UI freeze in kotlin.idea.core.script.ScriptConfigurationMemoryCache when editing file
  Fixes
  - KT-10478  Move-statement doesn't work for methods with single-expression body and lambda as returning type
  - KT-13344 Reduce visual distraction of val keyword
  - KT-14758 Move statement up shouldn't move top level declarations above package and import directives
  - KT-23305 We should be able to see platform-specific errors in common module
  - KT-27806 UAST: @Deprecated(level=DeprecationLevel.
    HIDDEN) makes method disappear
  - KT-28708 Java IDE fails to understand @JvmDefault on properties from binaries
  - KT-30489 Kotlin functions are represented in UAST as UAnnotationMethods
  - KT-31037 Lambda expression default parameter 'it' sometimes is not highlighted in a call chain
  - KT-31365 IDE does not resolve references to stdlib symbols in certain packages (kotlin.jvm) when using OSGi bundle
  - KT-32031 UAST: Method body missing for suspend functions
  - KT-32540 UltraLight support for compiler plugins
  - KT-33888 Bad indentation when copy-paste to trimIndent()
  - KT-34081 Kotlin constants used in Java annotation attributes trigger "Attribute value must be constant" error
  - KT-34316 UAST: reified methods no longer visible in UAST
  - KT-34337 Descriptors Leak in UltraLightClasses
  - KT-34379 "Implement members" with unspecified type argument: "AssertionError: 2 declarations in override fun"
  - KT-34785 Enter handler: do not add 'trimIndent()' in const
  - KT-34914 Analysis sometimes isn't rerun until an out of code block change
  - KT-35222 SQL language is not injected to String array attribute of Java annotation
  - KT-35266 Kotlin-specific setting "Optimize imports on the fly" is useless
  - KT-35454 Weird implementation of KtUltraLightFieldImpl.isEquivalentTo
  New Features
  - KT-35088 Insert empty line between a declaration and declaration with comment
  - KT-35106 Insert an empty line between a declaration and declaration with annotation
  Fixes
  - KT-4194 Code formatter should not move the end of line comment after if condition to the next line
  - KT-12490 Formatter inserts empty line between single-line declarations in the presence of a comment
  - KT-22273 Labeled statements are formatted incorrectly
  - KT-22362 Formatter breaks up infix function used in elvis operator
  - KT-23811 Formatter: Constructor parameters are joined with the previous line if prefixed with an annotation
  - KT-23929 Formatter: chained method calls: "Chop down if long" setting is ignored
  - KT-23957 Formatter tears comments away from file annotations
  - KT-30393 Remove unnecessary whitespaces between property accessor and its parameter list in formatter
  - KT-31881 Redundant indent for single-line comments inside lambda
  - KT-32277 Space before by delegate keyword on a property is not formatted
  - KT-32324 Formatter doesn't insert space after safe cast operator as?
  - KT-33553 Formater does not wrap function chained expression body despite "chained function calls" settings
  - KT-34049 Formatter breaks string inside template expression with elvis operator
  - KT-35093 Formatter inserts empty line between single-line declarations in the presence of an annotation
  - KT-35199 Wrong formatting for lambdas in chain calls
  Fixes
  - KT-15286 Support import auto-completion for extension functions declared in objects
  - KT-25732 "null" keyword should have priority in completion sort
  - KT-29926 Suggest lambda parameter names in IDE to improve DSL adoption
  - KT-31762 Completion: Parameter name is suggested instead of enum entry in entry constructor
  - KT-32615 PIEAE for smart completion of anonymous function with importing name inside of function
  - KT-33979 No completion for functions from nested objects
  - KT-34150 No completion for object methods that override something
  - KT-34386 Typo in Kotlin arg postfix completion
  - KT-34414 Completion works differently for suspend and regular lambda functions
  - KT-34644 Code completion list sorting: do not put method before "return" keyword
  - KT-35042 Selecting completion variant works differently for suspend and regular lambda parameter
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.3.70-eap-42
ManifestType: defaultLocale
ManifestVersion: 1.4.0
