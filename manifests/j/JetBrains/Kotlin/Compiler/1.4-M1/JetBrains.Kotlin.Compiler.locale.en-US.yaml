# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.4-M1
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  New Features
  - KT-4240 Type inference possible improvements: analyze lambda with expected type from the outer call
  - KT-7304 Smart-casts and generic calls with multiple bounds on type parameters
  - KT-7745 Support named arguments in their own position even if the result appears as mixed
  - KT-7770 SAM for Kotlin classes
  - KT-8834 Support function references with default values as other function types
  - KT-10930 Expected type isn't taken into account for delegated properties
  - KT-11723 Support coercion to Unit in callable reference resolution
  - KT-14416 Support of @PolymorphicSignature in Kotlin compiler
  - KT-16873 Support COERSION_TO_UNIT for suspend lambdas
  - KT-17643 Inferring type of Pair based on known Map type
  - KT-19869 Support function references to functions with vararg if expected type ends with repeated vararg element type
  - KT-21178 Prohibit access of protected members inside public inline members
  - KT-21368 Improve type inference
  - KT-25866 Iterable.forEach does not accept functions that return non-Unit values
  - KT-26165 Support VarHandle in JVM codegen
  - KT-27582 Allow contracts on final non-override members
  - KT-28298 Allow references to generic (reified) type parameters in contracts
  - KT-31230 Refine rules for allowed Array-based class literals on different platforms: allow Array::class everywhere, disallow Array<...>::class on non-JVM
  - KT-31244 Choose Java field during overload resolution with a pure Kotlin property
  - KT-31734 Empty parameter list required on Annotations of function types
  - KT-33990 Type argument isn't checked during resolution part
  - KT-33413 Allow 'break' and 'continue' in 'when' statement to point to innermost surrounding loop
  - KT-34743 Support trailing comma in the compiler
  - KT-34847 Lift restrictions from kotlin.
    Result
  Fixes
  - KT-2869 Incorrect resolve with 'unsafe call error' and generics
  - KT-3630 Extension property (generic function type) does not work
  - KT-3668 Infer type parameters for extension 'get' in delegated property
  - KT-3850 Receiver check fails when type parameter has another parameter as a bound
  - KT-3884 Generic candidate with contradiction is preferred over matching global function
  - KT-4625 Poor error highlighting when assigning not matched type to index operator
  - KT-5449 Wrong resolve when functions differ only in the nullability of generic type
  - KT-5606 "Type mismatch" in Java constructor call with SAM lambda and vararg parameter
  - KT-6005 Type inference problem in sam constructors
  - KT-6591 Overloaded generic extension function call with null argument resolved incorrectly
  - KT-6812 Type inference fails when passing a null instead of a generic type
  - KT-7298 Bogus type inference error in generic method call translated from Java
  - KT-7301 Type inference error in Kotlin code translated from Java
  - KT-7333 Type inference fails with star-projections in code translated from Java
  - KT-7363 Kotlin code with star-projections translated from Java does not typecheck
  - KT-7378 3-dimension array type inference fail
  - KT-7410 Call resolution error appears only after adding non-applicable overload
  - KT-7420 Type inference sometimes infers less specific type than in Java
  - KT-7758 Type of lambda can't be infered
  - KT-8218 Wrong 'equals' for generic types with platform type and error type
  - KT-8265 Non-typesafe program is compiled without errors
  - KT-8637 Useless diagnostics for type parameters with unsafe nullability
  - KT-8966 Smart casts don't work with implicit receiver and extension on type parameter with bounds
  - KT-10265 Type inference problem when using sealed class and interfaces
  - KT-10364 Call completeCall on variable before invoke resolution
  - KT-10612 java.util.Comparator.comparing type inference
  - KT-10628 Wrong type mismatch with star projection of inner class inside use-site projected type
  - KT-10662 Smartcast with not-null assertion
  - KT-10681 Explicit type arguments not taken into account when determining applicable overloads of a generic function
  - KT-10755 Not "least" common super-type is selected for nested 'if' result in presence of multiple inheritance
  - KT-10929 Type inference based on receiver type doesn't work for delegated properties in some cases
  - KT-10962 Wrong resolution when argument has unstable DataFlowValue
  - KT-11108 RxJava failed platform type inference
  - KT-11137 Java synthetic property does not function for a type with projection
  - KT-11144 UninferredParameterTypeConstructor exception during build
  - KT-11184 Type inference failed for combination of safe-call, elvis, HashSet and emptySet
  - KT-11218 Type inference incorrectly infers nullable type for type parameter
  - KT-11323 Type inference failed in call with lambda returning emptyList
  - KT-11331 Unexpected "Type inference failed" in SAM-conversion to projected type
  - KT-11444 Type inference fails
  - KT-11664 Disfunctional inference with nullable type parameters
  - KT-11894 Type substitution bug related platform types
  - KT-11897 No error REIFIED_TYPE_FORBIDDEN_SUBSTITUTION on captured type
  - KT-11898 Type inference error related to captured types
  - KT-12036 Type inference failed
  - KT-12038 non-null checks and inference
  - KT-12190 Type inference for TreeMap type parameters from expected type doesn't work when passing comparator.
  - KT-12684 A problem with reified type-parameters and smart-casts
  - KT-12833 'it' does not work in typed containers of lambdas
  - KT-13002 "Error type encountered: UninferredParameterTypeConstructor" with elvis and when
  - KT-13028 cast with star on on type with contravariant generic parameter makes the compiler crash
  - KT-13339 Type inference failed for synthetic Java property call on implicit smart cast receiver
  - KT-13398 "Type T is not a subtype of Any"
  - KT-13683 Type inference incorporation error when passed null into not-null parameter
  - KT-13721 Type inference fails when function arguments are involved
  - KT-13725 Type inference fails to infer type with array as a generic argument
  - KT-13800 Type inference fails when null passed as argument (related to common system)
  - KT-13934 Callable reference to companion object member via class name is not resolved
  - KT-13964 Unknown descriptor on compiling invoke operator call with generic parameter
  - KT-13965 Invoke operator called on extension property of generic type has incorrect parameter type
  - KT-13992 Incorrect TYPE_INFERENCE_UPPER_BOUND_VIOLATED
  - KT-14101 Type inference failed on null
  - KT-14174 Compiler can't infer type when it should be able to
  - KT-14351 Internal error with uninferred types for compiling complicated when expression
  - KT-14460 Smartcast isn't considered as necessary in the last expression of lambda
  - KT-14463 Missing MEMBER_PROJECTED_OUT error after smartcast with invoke
  - KT-14499 Type inference fails even if we specify T explicitly
  - KT-14725 kotlin generics makes agera's compiled repositories unusable
  - KT-14803 Weird smart cast absence in lazy delegate
  - KT-14972 Type inference failed: wrong common supertype for types with several subtypes
  - KT-14980 Type inference for nullable type in if statement
  - KT-15155 False "No cast needed" warning for conversion to star-projected type
  - KT-15185 Inference for coroutines not work in case where we have suspend function with new coroutine inside
  - KT-15263 Kotlin can't infer the type of a multiple bounded method
  - KT-15389 Type inference for coroutines in 1.1-M04
  - KT-15394 Support coercion to Unit for last statement for suspend lambda
  - KT-15396 Type inference for last statement in coroutine
  - KT-15488 Type inference not working on generic function returning generic type in lambda result
  - KT-15648 Better use of overladed functions with nullables
  - KT-15922 TYPE_INFERENCE_CONFLICTING_SUBSTITUTION for function reference
  - KT-15923 Internal error: empty intersection for types
  - KT-16247 Overload resolution ambiguity with intersection types and method references
  - KT-16249 Can't call generic method with overloaded method reference when non-generic overload exists
  - KT-16421 Remove @ParameterName annotation from diagnostic messages
  - KT-16480 Wrong "Type mismatch" for variable as function call
  - KT-16591 Type inferencing doesn't consider common base class of T of multiple Foo<T> function parameters
  - KT-16678 Overload resolution ambiguity on println()
  - KT-16844 Recursive dependency] (DeferredType) error on code generation.
  - KT-16869 Cannot infer type parameter S in fun <S, T : S?> f(x: S, g: (S) -> T): T
  - KT-17018 "Rewrite at slice LEXICAL_SCOPE" for 'when' with function reference inside lambda
  - KT-17048 Compilation exception: error type encountered in some combination of when/elvis with multiple inheritance
  - KT-17340 Type inference failed on overloaded method reference with expected KFunction
  - KT-17386 Smart cast on LHS of callable reference doesn't work if expected type is nullable
  - KT-17487 ReenteringLazyValueComputationException for interface with a subclass that has a property of interface type
  - KT-17552 Call completed not running for elvis as last expression in lambda
  - KT-17799 Smart cast doesn't work for callable reference (colon-colon operator)
  - KT-17968 More type inference problems with Streams.collect
  - KT-17995 No type mismatch with empty when expression inside lambda
  - KT-18002 Issue with star projection for generic type with recursive upper bound
  - KT-18014 Cannot use Comparator.comparing
  - KT-18080 Type inference failed for generic method reference argument
  - KT-18192 Type inference fails for some nested generic type structures
  - KT-18207 Unexpected attempt to smart cast causes compile error
  - KT-18379 Type inference failed although explicit specified
  - KT-18401 Type mismatch when inferring out type parameter (related to callable reference)
  - KT-18481 ReenteringLazyValueComputationException for recursive const declaration without explicit type
  - KT-18541 Prohibit "tailrec" modifier on open functions
  - KT-18790 function take the parameterized type with multi-bounds can't working
  - KT-19139 Kotlin build error in Android Studio on << intent.putExtra(“string”, it.getString(“string”) >> inside "else if" block
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.4-M1
ManifestType: defaultLocale
ManifestVersion: 1.4.0
