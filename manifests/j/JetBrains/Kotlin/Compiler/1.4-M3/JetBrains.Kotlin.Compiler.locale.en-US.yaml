# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.4-M3
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  New Features
  - KT-23575 Deprecate with replacement and SinceKotlin
  - KT-38652 Do not generate optional annotations to class files on JVM
  - KT-38777 Hide Throwable.addSuppressed member and prefer extension instead
  Performance Improvements
  - KT-38489 Compilation of kotlin html DSL increasingly slow
  - KT-28650 Type inference for argument type is very slow if several interfaces with a type parameter is used as an upper bound of a type parameter
  Fixes
  - KT-15971 Incorrect bytecode generated when inheriting default arguments not from the first supertype
  - KT-25290 NI: "AssertionError: If original type is SAM type, then candidate should have same type constructor" on out projection of Java class
  - KT-28672 Contracts on calls with implicit receivers
  - KT-30279 Support non-reified type parameters in typeOf
  - KT-31908 NI: CCE on passing lambda to function which accepts vararg SAM interface
  - KT-32156 New inference issue with generics
  - KT-32229 New inference algorithm not taking into account the upper bound class
  - KT-33455 Override equals/hashCode in functional interface wrappers
  - KT-34902 AnalyzerException: Argument 1: expected I, but found R for unsigned types in generic data class
  - KT-35075 AssertionError: "No resolved call for ..." with conditional function references
  - KT-35468 Overcome ambiguity between typealias kotlin.
    Throws and the aliased type kotlin.jvm.
    Throws
  - KT-35494 NI: Multiple duplicate error diagnostics (in IDE popup) with NULL_FOR_NONNULL_TYPE
  - KT-35681 Wrong common supertype between raw and integer literal type leads to unsound code
  - KT-35937 Error "Declaration has several compatible actuals" on incremental build
  - KT-36013 Functional interface conversion not happens on a value of functional type with smart cast to a relevant functional type
  - KT-36045 Do not depend on the order of lambda arguments to coerce result to Unit
  - KT-36448 NI: fix tests after enabling NI in the compiler
  - KT-36706 Prohibit functional interface constructor references
  - KT-36969 Generate @NotNull on instance parameters of Interface$DefaultImpls methods
  - KT-37058 Incorrect overload resolution ambiguity on callable reference in a conditional expression with new inference
  - KT-37120 [FIR] False UNRESOLVED_REFERENCE for public and protected member functions and properties which are declared in object inner class
  - KT-37149 Conversion when generic specified by type argument of SAM type
  - KT-37249 false TYPE_MISMATCH when When-expression branches have try-catch blocks
  - KT-37341 NI: Type mismatch with combination of lambda and function reference
  - KT-37436 AME: "Receiver class does not define or inherit an implementation of the resolved method" in runtime on usage of non-abstract method of fun interface
  - KT-37510 NI infers java.lang.Void from the expression in a lazy property delegate and throws ClassCastException at runtime
  - KT-37541 SAM conversion with fun interface without a function fails on compiling and IDE analysis in SamAdapterFunctionsScope.getSamConstructor()
  - KT-37574 NI: Type mismatch with Kotlin object extending functional type passed as @FunctionalInterface to Java
  - KT-37630 NI: ILT suitability in a call is broken if there are CST calculation and calling function's type parameters
  - KT-37665 NI: applicability error due to implicitly inferred Nothing for returning T with expected type
  - KT-37712 No extension receiver in functional interface created with lambda
  - KT-37715 NI: VerifyError: Bad type on operand stack with varargs generic value when type is inferred
  - KT-37721 NI: Function reference with vararg parameter treated as array and missing default parameter is rejected
  - KT-37887 NI: Smart casting for Map doesn't work if the variable is already  "smart casted"
  - KT-37914 NI: broken inference for a casting to subtype function within the common constraint system with this subtype
  - KT-37952 NI: improve lambdas completion through separation the lambdas analysis into several steps
  - KT-38069 Callable reference adaptation should have dependency on API version 1.4
  - KT-38143 New type inference fails when calling extension function defined on generic type with type arguments nested too deep
  - KT-38156 FIR Metadata generation
  - KT-38197 java.lang.OutOfMemoryError: Java heap space: failed reallocation of scalar replaced objects
  - KT-38259 NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER for provideDelegate
  - KT-38337 Map delegation fails for inline classes
  - KT-38401 FIR: protected effective visibility is handled unprecisely
  - KT-38416 FIR: infinite loop in BB coroutine test 'overrideDefaultArgument.kt'
  - KT-38432 FIR: incorrect effective visibility in anonymous object
  - KT-38434 Implement resolution of suspend-conversion on FE only, but give error if suspend conversion is called
  - KT-38437 [FIR] String(CharArray) is resolved to java.lang.
    String constructor instead of kotlin.text.
    String pseudo-constructor
  - KT-38439 NI: anonymous functions without receiver is allowed if there is an expected type with receiver
  - KT-38473 FIR: ConeIntegerLiteralType in signature
  - KT-38537 IllegalArgumentException: "marginPrefix must be non-blank string" with raw strings and space as margin prefix in trimMargin() call
  - KT-38604 Implicit suspend conversion on call arguments doesn't work on vararg elements
  - KT-38680 NSME when calling generic interface method with default parameters overriden with inline class type argument
  - KT-38681 Wrong bytecode generated when calling generic interface method with default parameters overriden with primitive type argument
  - KT-38691 NI: overload resolution ambiguity if take R and () -> R, and pass literal lambda, which returns R
  - KT-38799 False positive USELESS_CAST for lambda parameter
  - KT-38802 Generated code crashes by ClassCastException when delegating with inline class
  - KT-38853 Backend Internal error: Error type encountered: Unresolved type for nested class used in an annotation argument on an interface method
  - KT-38890 NI: false negative Type mismatch for values with fun keyword
  - KT-39010 NI: Regression with false-positive smartcast on var of generic type
  - KT-39013 202, ASM 8: "AnalyzerException: Execution can fall off the end of the code"
  - KT-39260 "AssertionError: Unsigned type expected: Int" in range
  - KT-39305 NEW_INFERENCE_NO_INFORMATION_FOR_PARAMETER: unable to infer deeply nested type bound when class implements generic interface
  - KT-39408 Using unsigned arrays as generics fails in 1.4-M2 with class cast exception
  - KT-39533 NI: Wrong overload resolution for methods with SAM converted function reference arguments
  - KT-39535 NI: Inference fails for the parameters of SAM converted lambdas with type parameters
  - KT-39603 Require explicit override in JVM default compatibility mode on implicit generic specialization of inherited methods in classes
  - KT-39671 Couldn't inline method call 'expectBody'
  - KT-39816 NI:ClassCastException and no IDE error with provideDelegate when DELEGATE_SPECIAL_FUNCTION_MISSING in OI
  - KT-32779 Rewrite at slice in array access resolution in coroutine inference
  - KT-39387 Can't build Kotlin project due to overload resolution ambiguity on flatMap calls
  - KT-39229 NI: resolution to wrong candidate (SAM-type against similar functional type)
  Docs & Examples
  - KT-36245 Document that @kotlin.native.
    ThreadLocal annotation doesn't work anywhere except in Kotlin/Native
  - KT-37943 Conflicting overloads in the factory functions sample code in Coding Conventions Page
  New Features
  - KT-10974 Add Code Style: Import Layout Configuration Table
  - KT-39065 "Join lines" should remove trailing comma on call site
  Fixes
  - KT-9065 Wrong result when move statement through if block with call with lambda
  - KT-14757 Move statement up breaks code in function parameter list
  - KT-14946 Move statement up/down (with Ctrl+Shift+Up/Down) messes with empty lines
  - KT-15143 Kotlin: Colors&Fonts -> "Enum entry" should use Language Default -> Classes - Static field
  - KT-17887 Moving statement (Ctrl/Cmd+Shift+Down) messes with use block
  - KT-34187 UAST cannot get type of array access
  - KT-34524 "PSI and index do not match" and IDE freeze with library import from square/workflow
  - KT-35574 UAST: UBreakExpression in when expression should be UYieldExpression
  - KT-36801 IDE: Unsupported language version value is represented with "latest stable" in GUI
  - KT-37378 Remove IDE option "Enable new type inference algorithm..." in 1.4
  - KT-38003 "Analyze Data Flow from Here" should work on parameter of abstract method
  - KT-38173 Reified types do no have extends information
  - KT-38217 Make Kotlin plugin settings searchable
  - KT-38247 "IncorrectOperationException: Incorrect expression" through UltraLightUtils.kt: inlined string is not escaped before parsing
  - KT-38293 Throwable: "'codestyle.name.kotlin' is not found in java.util.
    PropertyResourceBundle" at KotlinLanguageCodeStyleSettingsProvider.getConfigurableDisplayName()
  - KT-38407 Drop components from plugin.xml
  - KT-38443 No error on change in property initializer
  - KT-38521 ISE: Loop in parent structure when converting a DOT_QUALIFIED_EXPRESSION with parent ANNOTATED_EXPRESSION
  - KT-38571 Rework deprecated EPs
  - KT-38632 Change the code style to official in tests
  Fixes
  - KT-24750 Formatter: Minimum blank lines after class header does nothing
  - KT-31169 IDEA settings search fails to find "Tabs and Indents" tab in Kotlin code style settings
  - KT-35359 Incorrect indent for multiline expression in string template
  - KT-37420 Add setting to disable inserting empty line between declaration and declaration with comment
  - KT-37891 Formatter inserts empty lines between annotated properties
  - KT-38036 Use trailing comma setting does not apply to code example in Settings dialog
  - KT-38568 False positive: weak warning "Missing line break" on -> in when expression
  - KT-39024 Add option for blank lines before declaration with comment or annotation on separate line
  - KT-39079 Trailing comma: add base support for call site
  - KT-39123 Option Align 'when' branches in columns does nothing
  - KT-39180 Move trailing comma settings in Other tab
  IDE. Completion
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.4-M3
ManifestType: defaultLocale
ManifestVersion: 1.4.0
