# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.0.3
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  Analysis & diagnostics
  - Combination of open and override is no longer a warning
  - KT-4829 Equal conditions in when is now a warning
  - KT-6611 "This cast can never succeed" warning is no longer reported for Foo<T> as Foo<Any>
  - KT-7174 Declaring members with the same signature as non-overridable methods from Java classes (like Object.wait/notify) is now an error (when targeting JVM)
  - KT-12302 abstract modifier for a member of interface is no longer a warning
  - KT-12452 open modifier for a member of interface without implementation is now a warning
  - KT-11111 Overriding by inline function is now a warning, overriding by a function with reified type parameter is an error
  - KT-12337 Reference to a property with invisible setter now has KProperty type (as opposed to KMutableProperty)
  Issues fixed
  - KT-4285 No warning for a non-tail call when the method inherits default arguments from superclass
  - KT-4764 Spurious "Variable must be initialized" in try/catch/finally
  - KT-6665 Unresolved reference leads to marking subsequent code unreachable
  - KT-9597 NullPointerException during resolution of complicated star projections
  - KT-11750 Exceptions when creating various entries with the name "name" in enums
  - KT-11998 Smart cast to not-null is not performed on a boolean property in if condition
  - KT-10648 Exhaustiveness check does not work when sealed class hierarchy contains intermediate sealed classes
  - KT-10717 Type inference for lambda with local return
  - KT-11266 Fixed "Empty intersection of types" internal compiler error for some cases
  - KT-11857 Fix visibility check for dynamic members within protected method (when targeting JS)
  - KT-12589 Improved "infix modifier is inapplicable" diagnostic message
  - KT-11679 Erroneous call with argument causes Throwable at ResolvedCallImpl.getArgumentMapping()
  - KT-12623 Fix ISE on malformed code
  JVM code generation
  - KT-5075 Optimize array/collection indices usage in for loop
  - KT-11116 Optimize coercion to Unit, POP operations are backward-propagated
  Issues fixed
  - KT-11499 Compiler crashes with "Incompatible stack heights"
  - KT-11943 CompilationException with extension property of KClass
  - KT-12125 Wrong increment/decrement on Byte/Char/Short.
    MAX_VALUE/MIN_VALUE
  - KT-12192 Exhaustiveness check isn't generated for when expression returning Unit
  - KT-12200 Erroneously optimized away assignment to a property initialized to zero
  - KT-12582 "VerifyError: Bad local variable type" caused by explicit loop variable type
  - KT-12708 Bridge method not generated when data class implements interface with copy() method
  - KT-12106 import static of reified companion object method throws IllegalAccessError
  Performance
  - Reduced number of IO operation when loading kotlin compiled classes
  Ð¡ompiler options
  - Allow to specify version of Kotlin language for source compatibility with older releases.
  - CLI: -language-version command line option
  - Maven: languageVersion configuration parameter, linked with kotlin.compiler.languageVersion property
  - Gradle: kotlinOptions.languageVersion property in task configuration
  - Allow to specify which java runtime target version to generate bytecode for.
  - CLI: -jvm-target command line option
  - Maven: jvmTarget configuration parameter, linked with kotlin.compiler.jvmTarget property
  - Gradle: kotlinOptions.jvmTarget property in task configuration
  - Allow to specify path to JDK to resolve classes from.
  - CLI: -jdk-home command line option
  - Maven: jdkHome configuration parameter, linked with kotlin.compiler.jdkHome property
  - Gradle: kotlinOptions.jdkHome property in task configuration
  Standard Library
  - Improve documentation (including KT-11632)
  - List iteration used in collection operations is performed with an indexed loop when the list supports RandomAccess and the operation isn't inlined
  New features
  - Smart completion after by and in
  - Improved completion in bodies of overridden members (when no type is specified)
  - Improved presentation of completion items for property accessors
  - Fixed keyword completion after try in assignment expression
  - KT-8527 Include non-imported declarations on the first completion
  - KT-12068 Special completion item for "[]" get-operator access
  - KT-12080 Parameter names are now higher up in completion list
  Issues fixed
  - Fixed enum members being present in completion as static members
  - Fixed QuickDoc not working for properties generated for java classes
  - KT-9166 Code completion does not work for synthetic java properties on typing "g"
  - KT-11609 No named arguments completion should be after dot
  - KT-11633 Wrong indentation after completing a statement in data class
  - KT-11680 Code completion of label for existing return with value inserts redundant whitespace
  - KT-11784 Completion for if statement should add parentheses automatically
  - KT-11890 Completion for callable references does not propose static Java members
  - KT-11912 String interpolation is not converted to ${} form when accessing this.property
  - KT-11957 No catch and finally keywords in completion
  - KT-12103 Smart completion for nested SAM-adapter produces short unresolved name
  - KT-12138 Do not show "::error" in smart completion when any function type accepting one argument is expected
  - KT-12150 Smart completion suggests to compare non-nullable with null
  - KT-12124 No code completion for a java property in a specific position
  - KT-12299 Completion: incorrect priority of property foo over method getFoo in Kotlin-only code
  - KT-12328 Qualified function name inserted when typing before if
  - KT-12427 Completion doesn't work for "@receiver:" annotation target
  - KT-12447 Don't use CompletionProgressIndicator in Kotlin plugin
  - KT-12669 Completion should show variant with () when there is default lambda
  - KT-12369 Pressing dot after class name should not cause insertion of constructor call
  New features
  - KT-11692 Support Spring model diagrams for Kotlin classes
  - KT-12079 Support "Autowired members defined in invalid Spring bean" inspection on Kotlin declarations
  - KT-12092 Implement bean references in @Qualifier annotations
  - KT-12135 Automatically configure components based on basePackageClasses attribute of @ComponentScan
  - KT-12136 Implement package references inside of string literals
  - KT-12139 Support Spring configurations linked via @Import annotation
  - KT-12278 Implement Spring @Autowired inspection
  - KT-12465 Implement Spring @ComponentScan inspection
  Issues fixed
  - KT-12091 Fixed unstable behavior of Spring line markers
  - KT-12096 Fixed rename of custom-named beans specified with Kotlin annotation
  - KT-12117 Group Kotlin classes from the same file in the Choose Bean dialog
  - KT-12120 Show autowiring candidates line markers for @Autowired-annotated constructors and constructor parameters
  - KT-12122 Fixed line marker popup on functions with @Qualifier-annotated parameters
  - KT-12143 Fixed "Spring Facet Code Configuration (Kotlin)" inspection description
  - KT-12147 Fixed exception on analyzing object declaration with @Component annotation
  - KT-12148 Warn about object declarations annotated with Spring @Configuration/@Component/etc.
  - KT-12363 Fixed "Autowired members defined in invalid Spring bean (Kotlin)" inspection description
  - KT-12366 Fixed exception on analyzing class declaration upon annotation typing
  - KT-12384 Fixed bean references in factory method calls
  New features
  - New icon for "New -> Kotlin Activity" action
  - "Change visibility on exposure" and "Make visible" fixes now support all possible visibilities
  - KT-8477 New inspection "Can be primary constructor property" with quick-fix
  - KT-5010 "Redundant semicolon" inspection with quickfix
  - KT-9757 Quickfix for "Unused lambda expression" warning
  - KT-10844 Quick fix to add crossinline modifier
  - KT-11090 "Add variance modifiers to type parameters" inspection
  - KT-11255 Move Element Left/Right actions
  - KT-11450 "Modality is redundant" inspection
  - KT-11523 "Add @JvmOverloads annotation" intention
  - KT-11768 "Introduce local variable" intention
  - KT-11806 Quick-fix to increase visibility for invisible member
  - KT-11807 Use function body template when generating overriding functions with default body
  - KT-11864 Suggest "Create function/secondary constructor" quick fix on argument type mismatch
  - KT-11876 Quickfix for "Extension function type is not allowed as supertype" error
  - KT-11920 "Increase visibility" and "Decrease visibility" quickfixes for exposed visibility errors
  - KT-12089 Quickfix "Make primary constructor parameter a property"
  - KT-12121 "Add toString() call" quickfix
  - KT-11104 New quickfixes for nullability problems: "Surround with null check" and "Wrap with safe let call"
  - KT-12310 New inspection "Member has platform type" with quickfix
  Issues fixed
  - Fixed "Convert property initializer getter" intention being available inside lambda initializer
  - Improved message for "Can be declared as val" inspection
  - KT-3797 Quickfix to make a function abstract should not be offered for object members
  - KT-11866 Suggest "Create secondary constructor" when constructors exist but are not applicable
  - KT-11482 Fixed exception in "Move to companion object" intention
  - KT-11483 Pass implicit receiver as argument when moving member function to companion object
  - KT-11512 Allow choosing any source root in "Move file to directory" intention
  - KT-10950 Keep original file package name when moving top-level declarations to separate file (provided it's not ambiguous)
  - KT-10174 Optimize imports after applying "Move declaration to separate file" intention
  - KT-11764 Intention "Replace with a forEach function call should replace continue with return@forEach
  - KT-11724 False suggestion to replace with compound assignment
  - KT-11805 Invert if-condition intention breaks code in case of end of line comment
  - KT-11811 "Make protected" intention for a val declared in parameters of constructor
  - KT-11710 "Replace if with elvis operator": incorrect code generated for if expression
  - KT-11849 Replace explicit parameter with it changes the meaning of code because of the shadowing
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.0.3
ManifestType: defaultLocale
ManifestVersion: 1.4.0
