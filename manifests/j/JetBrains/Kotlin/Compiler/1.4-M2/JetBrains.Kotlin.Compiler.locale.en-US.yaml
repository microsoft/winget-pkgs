# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.4-M2
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  New Features
  - KT-37432 Do not include annotations fields into 'visibility must be explicitly specified' check in api mode
  Performance Improvements
  - KT-27362 Anonymous classes representing function/property references contain rarely used methods
  - KT-35626 NI: Performance problem with many type parameters
  - KT-36047 Compiler produces if-chain instead of switch when when subject captured as variable
  - KT-36638 Use 'java/lang/StringBuilder.append (C)Ljava/lang/StringBuilder;' when appending single character in JVM_IR
  - KT-37389 Avoid type approximation during generation constraints with EQUALITY kind
  - KT-37392 Avoid substitution and type approximation for simple calls
  - KT-37546 NI: high memory and CPU consumption due to creating useless captured types (storing in approximated types cache, unneeded computations)
  Fixes
  - KT-11265 Factory pattern and overload resolution ambiguity
  - KT-27524 Inline class is boxed when used with suspend modifier
  - KT-27586 ClassCastException occurs if the Result (or any other inline class) is returned from a lambda
  - KT-30419 Use boxed version of an inline class in return type position for covariant and generic-specialized overrides
  - KT-31163 FIR: consider replacing comparisons with compareTo calls and some additional intrinsics
  - KT-31585 ClassCastException with derived class delegated to generic class with inline class type argument
  - KT-31823 NI: Type mismatch with a star projection and UnsafeVariance
  - KT-33119 Pre-increment for inline class wrapping Int compiles to direct increment instead of inc-impl
  - KT-33715 Kotlin/Native: metadata compiler
  - KT-34048 IllegalAccessError when initializing val property in EXACTLY_ONCE lambda
  - KT-34433 NI: Type mismatch with a star projection and UnsafeVariance
  - KT-35133 FIR Java: don't set 'isOperator' for methods with non-operator names
  - KT-35234 ClassCastException with creating an inline class from a function reference of covariant or generic-specialized override
  - KT-35406 Generic type implicitly inferred as Nothing with no warning
  - KT-35587 Plain namespace strings in JvmNameResolver.
    PREDEFINED_STRINGS are prone to namespace changes during jar relocation.
  - KT-36044 NI: premature fixation a type variable if there were nested lambdas (constraint source was the deepest lambda)
  - KT-36057 [FIR] Incorrect smartcast
  - KT-36069 NI: TYPE_MISMATCH caused by incorrect inference to Nothing
  - KT-36125 Callable reference resolution ambiguity error is not displayed properly in the IDE
  - KT-36191 IDE locks loading packages and editing file containing try keyword inside string template
  - KT-36222 NI: Improve error message about nullability mismatch for a generic call
  - KT-36249 NI doesn't use upper bound for T of called function during infer return type and as a result infer it to Any? if the resulting type was intersection type
  - KT-36345 FIR: record argument mapping for use in back-end
  - KT-36446 NI: "UnsupportedOperationException no descriptor for type constructor of IntegerLiteralType[Int,Long,Byte,Short]" with BuilderInference and delegate
  - KT-36758 [FIR] Unresolved callable reference to member of local class
  - KT-36759 [FIR] Unsupported callable reference resolution for methods with default parameters
  - KT-36762 [FIR] Unresolved array.clone()
  - KT-36764 [FIR] Bug in inference with DefinitelyNotNull types
  - KT-36816 NI: definitely not-null (T!!) types in invariant positions don't approximate to T inside inference process
  - KT-36819 NI: premature completion of lambdas, which are passed somewhere
  - KT-36850 Incorrect private visibility of sealed class constructors
  - KT-36856 Throwing exception when there is inheritance in Kotlin from Java class, which contains methods with the same JVM descriptors
  - KT-36879 Introduce FIR_IDENTICAL in diagnostic tests
  - KT-36881 FIR: completion don't runs for return expressions
  - KT-36887 [FIR] Unresolved member in nested lambda in initializer
  - KT-36905 [FIR] Unresolved in lambda in default argument position
  - KT-36953 AssertionError: "Unsigned type expected: null" when there is a range with an unsigned type
  - KT-37009 FIR: Bound smart-cast lost
  - KT-37027 FIR: Wrong projection on spread + varargs on non-final types
  - KT-37038 NI: redundant lambda's arrow breaks CST calculation for extension lambdas
  - KT-37043 NI: inference T to Any? if there was elvis between Java out-type and reified materialize for this type without out projection
  - KT-37066 [FIR] Wrong type inference for lambdas
  - KT-37070 [FIR] Unresolved parameters of outer lambda in scope of inner lambda
  - KT-37087 "IllegalStateException: Can't find method 'invoke()'" for mutable property reference in default value of an inline function parameter
  - KT-37091 [FIR] Wrong inferred type of when-expression if when-argument  is not-null-asserted and type is not specifies explicitly
  - KT-37176 [FIR] Incorrect resolution mode for statements of block
  - KT-37302 Unexpected conversion:Int constant inferred to Long in when expression
  - KT-37327 FIR: Smartcast problem
  - KT-37343 NI: definitely not null types pre-approximation is inconsistent with OI
  - KT-37380 NI: broken some code with def not null types due to skip needed constraints
  - KT-37419 NI: UNRESOLVED_REFERENCE_WRONG_RECEIVER is reported in case lambda with receiver is returned from when expression
  - KT-37434 Kotlin/JS, Kotlin/Native: fun interfaces: SAM conversion to Kotlin interface is not compiled with RESOLUTION_TO_CLASSIFIER
  - KT-37447 Expression from annotation entry in value parameter inside value parameter should be marked as USED_AS_EXPRESSION
  - KT-37453 Type arguments not checked to be empty for candidates with no declared parameters
  - KT-37488 [FIR] Incorrect exhaustiveness checking for branches with equals to object that implements sealed class
  - KT-37497 NI:  'super' is not an expression, it can not be used as a receiver for extension functions
  - KT-37530 NI: instantiation of abstract class via callable reference argument causes run time InstantiationError
  - KT-37531 NI: callable reference argument with left hand side type parameter causes frontend exception
  - KT-37554 NI: Nothing is inferred incorrectly with elvis return
  - KT-37579 NI: inconsistent behaviour with OI around implicit invoke convention after safe call with additional implicit receiver
  - KT-37604 "VerifyError: Call to wrong <init> method" in 'invoke' for adapted callable reference to constructor with coercion to Unit
  - KT-37621 NI: type variable is inferred to Nothing if the second branch was Nothing and there was upper bound for a type parameter
  - KT-37626 NI: builder inference with expected type breaks class references resolution for a class with parameters
  - KT-37627 NI: wrong order of the type variable fixation (Nothing? against a call with lambda)
  - KT-37628 NI: wrong approximation of type argument to star projection during common super type calculation
  - KT-37644 NI: appeared exception during incorporation of a captured type into a type variable for elvis resolve
  - KT-37650 NI: it's impossible to infer a type variable with the participation of a wrapped covariant type
  - KT-37718 False positive unused parameter for @JvmStatic main function in object
  - KT-37779 ClassCastException: Named argument without spread operator for vararg parameter causes code to crash on runtime
  - KT-37832 In MPP, subtypes of types defined in legacy libraries, like stdlib, cannot properly resolve on the consumer side receviing both
  - KT-37861 Capturing an outer class instance in a default parameter of inner class constructor causes VerifyError
  - KT-37986 Return value of function reference returning inline class mapped to 'java.lang.
    Object' is not boxed properly
  - KT-37998 '!!' operator on safe call of function returning inline class value causes CCE at runtime
  - KT-38042 Allow kotlin.
    Result as a return type only if one enabled inline classes explicitly
  - KT-38134 NI: Type mismatch with a star projection and UnsafeVariance
  - KT-38298 Inconsistent choice of candidate when both expect/actual are available (affects only enableGranularSourceSetMetadata)
  - KT-38661 NI: "Cannot infer type variable TypeVariable" with lambda with receiver
  - KT-38668 Project with module dependency in KN, build fails with Kotlin 1.3.71 and associated libs but passes with 1.3.61.
  - KT-38857 Class versions V1_5 or less must use F_NEW frames.
  - KT-39113 "AssertionError: Uninitialized value on stack" with EXACTLY_ONCE contract in non-inline function and lambda destructuring
  - KT-28483 Override of generic-return-typed function with inline class should lead to a boxing
  - KT-37963 ClassCastException: Value of inline class represented as 'java.lang.
    Object' is not boxed properly on return from lambda
  Docs & Examples
  - KT-35231 toMutableList documentation is vague
  Performance Improvements
  - KT-30541 EDT Freeze after new Kotlin Script creation
  - KT-35050 Significant freezes due to findSdkAcrossDependencies()
  - KT-37301 Freeze when "Optimize Imports" in KotlinImportOptimizer
  - KT-37466 Invalidate partialBodyResolveCache on OCB
  - KT-37467 PerFileAnalysisCache.fetchAnalysisResults
  - KT-37993 Do not resolve references if paste code is located in the same origin
  - KT-38318 Freezes in IDEA
  Fixes
  - KT-27935 Functional typealias with typealias in type parameters causes UnsupportedOperationException in TypeSignatureMappingKt (IDEA analysis)
  - KT-31668 Complete statement for class declaration: add '()' to supertype
  - KT-33473 UAST: References to local variable are resolved to UastKotlinPsiVariable
  - KT-34564 Kotlin USimpleNameReferenceExpression for annotation parameter resolves to null for compiled Kotlin classes
  - KT-34973 Light class incorrectly claiming ambiguous method call from Java when one overload is synthetic
  - KT-35801 UAST: UnknownKotlinExpression for valid Kotlin annotated expression
  - KT-35804 UAST: Annotations missing from catch clause parameters
  - KT-35848 UAST:  ClassCastException when trying to invoke UElement for some wrapped PsiElements
  - KT-36156 Kotlin annotation attributes have blue color whereas white in Java
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.4-M2
ManifestType: defaultLocale
ManifestVersion: 1.4.0
