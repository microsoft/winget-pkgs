# Created with Komac v1.9.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: JetBrains.Kotlin.Compiler
PackageVersion: 1.4.30-M1
PackageLocale: en-US
Publisher: JetBrains s.r.o.
PublisherUrl: https://jetbrains.com/opensource
Author: JetBrains s.r.o.
PackageName: Kotlin Compiler
PackageUrl: https://github.com/JetBrains/kotlin
License: Freeware
Copyright: Copyright (C) JetBrains s.r.o.
ShortDescription: The Kotlin Programming Language.
Moniker: kotlin-compiler
ReleaseNotes: |-
  Android
  - KT-42383 HMPP: Bad IDEA dependencies: Missing dependency from p1:jvmAndAndroid to p2:jvmAndAndroid
  Backend. Native
  - KT-38772 Native: support non-reified type parameters in typeOf
  - KT-42234 Move LLVM optimization parameters into konan.properties
  - KT-42649 IndexOutOfBoundsException during InlineClassTransformer lowering
  - KT-42942 Native: optimize peak backend memory by clearing BindingContext after psi2ir
  - KT-43198 init blocks inside inline classes
  - KT-31072 Don't use non-reified arguments to specialize type operations in IR inliner
  Backend. JS
  - KT-41227 KJS IR: don't copy to child's prototype references to the function from parent
  Backend. IR
  - KT-41227 KJS IR: don't copy to child's prototype references to the function from parent
  New Features
  - KT-28055 Consider supporting init blocks inside inline classes
  - KT-28056 Consider supporting non-public primary constructors for inline classes
  - KT-42094 Allow open callable members in expect interfaces
  - KT-43129 FIR: Support OverloadResolutionByLambdaReturnType
  Performance Improvements
  - KT-41352 JVM IR: reduce bytecode size in for loops and range checks with 'until' by not using inclusive end
  - KT-41644 NI: Infinite compilation
  - KT-42791 OutOfMemoryError on compilation using kotlin 1.4 on a class with a lot of type inference
  - KT-42920 NI: Improve performance around adding constraints
  Fixes
  - KT-22465 Excessive synthetic method for private setter from superclass
  - KT-26229 Lambda/anonymous function argument in parentheses is not supported for callsInPlace effect
  - KT-32228 Inconsistent boxing/unboxing for inline classes when interface is specialized by object expression
  - KT-32450 Inline class incorrectly gets re-wrapped when provided to a function
  - KT-35849 Missing nullability assertion on lambda return value if expected type has generic return value type
  - KT-35902 Kotlin generates a private parameterless constructor for constructors taking inline class arguments with default values
  - KT-36769 JVM IR: Missing LVT entries for inline function (default) parameters at call site
  - KT-36982 JVM IR: SAM adapter classes are generated as synthetic
  - KT-37007 JVM IR: extraneous property accessors are generated in multifile facade for InlineOnly property
  - KT-37317 [FIR] Add support of extension functions in postponed lambda completion
  - KT-38400 FIR: interface abstract is preferred to Any method in super resolve
  - KT-38536 JVM IR: bound adapted function references are not inlined
  - KT-38656 FIR: determine overridden member visibility properly
  - KT-38901 FIR: Make behavior of integer literals overflow consistent with FE 1.0
  - KT-39709 [FIR] False positive UNINITIALIZED_VARIABLE in presence of complex graph with jumps
  - KT-39923 Result.
    Failure will get wrapped with Success when using with RxJava
  - KT-40198 '$default' methods in 'kotlin/test/AssertionsKt' generated as non-synthetic by JVM_IR
  - KT-40262 ACC_DEPRECATED flag not generated for property getter delegate in multifile class facade in JVM_IR
  - KT-40282 Inline class wrapping Any gets double boxed
  - KT-40464 JVM_IR does not generate LINENUMBER at closing brace of (suspend) lambda
  - KT-40948 IllegalAccessError while initializing val property in EXACTLY_ONCE lambda that is passed to another function
  - KT-41468 JVM IR: IllegalAccessError on access to abstract base member from another package, from anonymous object inside abstract class
  - KT-41493 JVM IR: names of classes for local delegated variables contain the variable name twice
  - KT-41792 [FIR] Introduce & use ConeAttribute.
    UnsafeVariance
  - KT-41793 [FIR] Make captured types accessible at the end of resolve
  - KT-41809 JVM IR: name for internal $default method doesn't include module name
  - KT-41810 JVM IR: Deprecated(HIDDEN) class is incorrectly generated as synthetic
  - KT-41841 JVM IR: delegates for private functions with default arguments are generated in multifile classes
  - KT-41857 Flaky 'ConcurrentModificationException' through kotlin.serialization.
    DescriptorSerializer
  - KT-41903 JVM IR: do not generate LineNumberTable in auto-generated members of data classes
  - KT-41957 JVM IR: step into suspend function goes to the first line of the file
  - KT-41960 JVM IR: smart step into members implemented with delegation to interface doesn't work
  - KT-41961 JVM IR: line numbers are not generated in JvmMultifileClass facade declarations
  - KT-41962 JVM IR: intermittent -1 line numbers in the state machine cause double stepping in the debugger
  - KT-42002 JVM / IR: IllegalStateException: "No mapping for symbol: VAR IR_TEMPORARY_VARIABLE" caused by named arguments
  - KT-42021 JVM / IR: "IndexOutOfBoundsException: Index 0 out of bounds for length 0" during IR lowering with suspend conversion
  - KT-42033 JVM IR: accidental override in Map subclass with custom implementations of some members
  - KT-42043 JVM IR: Don't generate collection stubs when implementing methods with more specific return types
  - KT-42044 Compiler error when lambda with contract surrounded with parentheses
  - KT-42114 JVM_IR generates stub for 'removeIf' in abstract classes implementing 'List' and 'Set'
  - KT-42115 JVM_IR doesn't generate 'next' and 'hasNext' method in an abstract class implementing 'ListIterator'
  - KT-42116 FIR: Java accessor function should not exist in scope together with relevant property
  - KT-42117 IR-based evaluator cannot handle Java static final fields
  - KT-42118 FIR2IR: field-targeted annotation is placed on a property, not on a field
  - KT-42130 FIR: type variable is observed after when condition analysis
  - KT-42132 FIR2IR: companion function reference has no dispatch receiver
  - KT-42137 JVM IR: AbstractMethodError on complex hierarchy where implementation comes from another supertype and has a more specific type
  - KT-42186 JVM / IR: Infinite cycle in for expression when unsigned bytes are used in decreasing loop range
  - KT-42251 JVM / IR: "IllegalStateException: Descriptor can be left only if it is last" when comparing the i-th element of the container of Int? and i with change
  - KT-42253 JVM IR: NoSuchFieldError on local delegated property in inline function whose call site happens before declaration in the source
  - KT-42281 JVM / IR: AnalyzerException when comparing Int and array that cast to Any in if condition
  - KT-42340 FIR2IR: duplicating fake overrides
  - KT-42344 IR-based evaluator doesn't support "annotation in annotation"
  - KT-42346 FIR: double-vararg in IR while resolving collection literal as Java annotation argument
  - KT-42348 FIR: false UNINITIALIZED_VARIABLE in local class
  - KT-42350 FIR: false UNINITIALIZED_VARIABLE after initialization in try block
  - KT-42351 FIR: false HIDDEN in enum entry member call
  - KT-42354 JVM / IR: "AssertionError: Unexpected IR element found during code generation" with KProperty get invocation
  - KT-42359 FIR2IR: cannot mangle type parameter
  - KT-42373 FIR2IR: local object nested class has no parent if forward-referenced by nested class supertype
  - KT-42384 FIR (BE): top-level field has no parent class in BE
  - KT-42496 FIR resolve: synthetic property is written but has no setter
  - KT-42517 FIR: exception in BE for recursive inline call
  - KT-42601 [FIR] Inherited declaration clash for stdlib inheritors
  - KT-42642 ISE: No getProgressionLastElement for progression type IntProgressionType
  - KT-42650 JVM IR: extraneous nullability annotation on a generic function of a flexible type
  - KT-42656 FIR2IR: unsupported callable reference for Java field
  - KT-42725 Debugger steps into core library inline functions in chained calls
  - KT-42758 JVM / IR: Deserialized object that overrides readResolve() is not reference equal to the singleton instance
  - KT-42770 FIR: duplicating signatures in mangler (typealias for functional type)
  - KT-42771 FIR: duplicating signature in mangler (data class with delegate)
  - KT-42814 FIR: false UNINITIALIZED_VARIABLE in local function after if...else
  - KT-42844 FIR: Property write in init block resolved to parameter write
  - KT-42846 JVM_IR: NPE on function reference to @JvmStatic method in a different file
  - KT-42933 JVM / IR: "AnalyzerException: Expected an object reference, but found I" with local delegate in inline class
  - KT-43006 JVM/JVM_IR: do not generate no-arg constructor for constructor with default arguments if there are inline class types in the signature
  - KT-43017 JVM / IR: AssertionError when callable reference passed into a function requiring a suspendable function
  - KT-43068 JVM IR: no generic signatures for explicitly written methods in a List subclass, whose signature coincides with MutableList methods
  - KT-43132 JVM / IR: Method name '<get-...>' in class '...$screenTexts$1$1' cannot be represented in dex format.
  - KT-43145 JVM IR: $default methods in multi-file facades are generated as non-synthetic final
  - KT-43156 FIR: false UNINITIALIZED_VARIABLE after initialization in synchronized block
  - KT-43196 JVM: extra non-static member is generated for extension property in inline class
  - KT-43199 JVM IR: synthetic flag for deprecated-hidden is not generated for DeprecatedSinceKotlin and deprecation from override
  - KT-43207 JVM IR: no collection stub for iterator is generated on extending AbstractCollection
  - KT-43217 JVM_IR: Multiple FAKE_OVERRIDES for java methods using @NonNull Double and java double
  - KT-43226 "Incompatible stack heights" with non-local return to outer lambda inside suspend lambda
  - KT-43242 JVM / IR: "AnalyzerException: Expected I, but found R" caused by when inside object with @Nullable Integer subject
  - KT-43249 Wrong code generated for suspend lambdas with inline class parameters
  - KT-43286 JVM IR: IAE "Inline class types should have the same representation: Lkotlin/UInt; != I" on smart cast of unsigned type value with JVM target 1.8
  - KT-43326 JVM_IR: No deprecated flag for getter of deprecated interface property copied to DefaultImpls
  - KT-43327 JVM_IR: No deprecated or synthetic flag for accessors of deprecated-hidden property of unsigned type
  - KT-43332 FIR: Smart casts lead to false-positive ambiguity
ReleaseNotesUrl: https://github.com/JetBrains/kotlin/releases/tag/v1.4.30-M1
ManifestType: defaultLocale
ManifestVersion: 1.4.0
