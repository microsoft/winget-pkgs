# Created with komac v2.13.0
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: Microsoft.GameInput
PackageVersion: 2.2.26100.6106
PackageLocale: en-US
Publisher: Microsoft Corporation
PublisherUrl: https://github.com/microsoftconnect
PublisherSupportUrl: https://github.com/microsoftconnect/GameInput/issues
PackageName: Microsoft GameInput
PackageUrl: https://github.com/microsoftconnect/GameInput
License: Proprietary
LicenseUrl: https://github.com/microsoftconnect/GameInput/blob/HEAD/LICENSE
Copyright: © Microsoft Corporation. All rights reserved.
ShortDescription: GameInput is a next-generation input API that exposes input devices of all kinds through a single consistent interface.
Description: |-
  GameInput is a next-generation input API that exposes input devices of all kinds through a single consistent interface. It's designed with a simple programming model that makes it easy to use. GameInput is built from the ground up for the best possible performance. Key features of the GameInput API are as follows.

  GameInput exposes input from keyboards, mice, gamepads, and other game controllers via a single unified input model, synchronized to a common time base. The code for handling input from these devices is nearly identical, using many of the same functions but with different filters applied. This makes it easy to add support for additional input devices, without major changes to input code.

  GameInput is a functional superset of all legacy input APIs—XInput, DirectInput, Raw Input, Human Interface Device (HID), and WinRT APIs—in addition to adding new features of its own. GameInput's functionality ranges from simple fixed-format gamepad state to detailed low-level raw device access. Input can be obtained via polling or callbacks in an event-driven way. Haptics and force feedback are fully supported, and third-party device SDKs can easily be written on top of GameInput to provide access to custom device features.

  GameInput is built around an entirely new direct memory access (DMA) architecture for the lowest possible input latency and resource usage. Nearly all API functions are lock-free with strict performance guarantees, while still being 100 percent thread-safe. This makes them safe to call from time-sensitive contexts such as render threads. Advanced applications can take direct control of scheduling GameInput's internal asynchronous work queues, controlling which thread does the work and how often. 
Moniker: GameInput
ReleaseNotes: |-
  Version 2.2
  - Fixed mice and keyboards not being detected after being unplugged and re-plugged into same port.
  - Fixed issue which caused rumble to become unresponsive on certain devices when under load.
  - Fixed background input not working on gamepads plugged in after the input policy is specified.
  - Fixed haptic devices not getting detected when plugged in after application start.
  - Updated GameInput.lib for improved cross-platform support; source code is now also included.
  - Miscellaneous plug and play reliability improvements for HID and GIP devices.
ReleaseNotesUrl: https://github.com/microsoftconnect/GameInput/releases/tag/v2.2.26100.6106
ManifestType: defaultLocale
ManifestVersion: 1.10.0
