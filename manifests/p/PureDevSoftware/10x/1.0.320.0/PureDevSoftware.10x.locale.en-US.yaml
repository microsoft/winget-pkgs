# Created with YamlCreate.ps1 v2.4.6 $debug=NVS1.CRLF.7-5-1.Win32NT
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: PureDevSoftware.10x
PackageVersion: 1.0.320.0
PackageLocale: en-US
Publisher: PureDev Software
PublisherUrl: https://www.puredevsoftware.com/
PublisherSupportUrl: https://www.10xeditor.com/contact.htm
PrivacyUrl: https://www.10xeditor.com/10x_privacy_terms.htm
Author: PureDev Software Limited
PackageName: 10x
PackageUrl: https://10xeditor.com/
License: Proprietary
LicenseUrl: https://www.puredevsoftware.com/terms.htm
Copyright: Copyright 2025 PureDev Software
CopyrightUrl: https://www.puredevsoftware.com/terms.htm
ShortDescription: A High-Performance C++ Editor
Description: |-
  There are many code editors and IDEs on the market, so why does the world need another editor? 10x is designed to be a fast and responsive editor, that understands C++ out of the box and performs well with the largest of codebases (>5 million loc).
  There are Editors/IDEs that can handle many languages and have plugins for every eventuality, but due to the sheer size and complexity of these IDEs, they can become unresponsive and start failing for very large projects.
  Conversely, there are many fast and lightweight code editors, but they often don't parse C++, or they require complicated setup with 3rd party parsers.
  10x is designed to fill the gap between a lightweight text editor and a full IDE. 10x has many of the features of an IDE but doesn't compromise on speed, even on the largest of projects.
  10x has a custom C++ parser that works out of the box, no setup required. The parser is fast and robust and incrementally parses as you type. It provides syntax highlighting, goto-definition, autocomplete and a lot more.
  There are many editors/IDEs that promise everything, but it often comes at a cost, either in terms of responsiveness, robustness, or complexity of setup. With 10x, there is no need to compromise. You get the features you need with a fast and responsive editing experience.
  10x is aimed predominantly at the professional developer working on large and complex C++ codebases where productivity is vital. 10x makes it easy to quickly navigate around a large project and find what you need. 10x keeps you in the flow.
  Coding at 60fps with instant workspace search is something you just have to experience. You may not think your current editor is slow until you try 10x.
  10x supports opening of Visual Studio projects, opening folders, and the creation of custom 10x workspaces.
  10x is currently Windows only. Support for other platforms is planned for the future.
  As well as a custom built C++ parser, 10x also has syntax highlighting for many other languages.
  10x also has a powerful python API, which allows functionality to be added using python scripts.
# Moniker:
Tags:
- code
- coding
- develop
- development
- programming
ReleaseNotes: |-
  New Features
  - Added support for __has_include in preprocessor conditionals
  - Support for loading VS Filtered Solution Files (.slnf). Can toggle loaded workspaces with the right click context menu.
  General Fixes
  - Fixed gotodef scroll position with word wrap enabled
  - Fixed it not scrolling to the current line for goto-def in word-wrapped files
  - Fixed cursor sometimes getting stuck moving up on word wrapped lines
  - Fixed MoveToLineEnd going to the start of the next line for word-wrapped lines
  - Fixed scroll line not being restored correctly with word-wrap after loading workspace
  - Fixed VS -> OpenIn10x incorrect scroll position with word wrap enabled
  - Fixed MovePanel and MovePanelFocus commands not working with secondary window if both main window and secondary window are maximised
  - Fixed floating windows not closing with escape
  - Move window to main display if it's restored to a display that no longer exists
  - Fixed windows on a secondary display with a different Windows scale being restored to wrong size
  - Fixed focus not returning to the current file when panels are closed with escape
  - Fixed escape key not closing pulled-out floating windows
  - Fixed dragged out windows and secondary windows not being restored to correct position if maximised
  - If floating panels go out of the main window due to a window resize they are now made into windows (stops panels getting lost of screen)
  - Fixed floating panels not restoring
  - Made Command Line Arg Selector default to the active workspace
  - Fixed Command Line Arg Selector not saving the state of the current workspace dropdown
  - Fixed Command Line Arg Selector not saving its state if the node tree is empty
  - Made Microsoft.Build.Locator use most recent Visual Studio install (used for resolving variables in project files)
  - Fixed Perforce checkout not working for servers that are case sensitive
  - Fixed right control key getting stuck on moving focus between windows
  - Fixed MoveToLineEnd going to the last but one char for the last line of word wrapped lines when the next line is also word wrapped
  - Fixed rare crash in directoryWatcher
  - Fixed select prev/next word from skipping brackets
  - Made select prev/next word treat whitespace as a word on first selection
  - Made select next word first move to the next line if the current line is empty
  - Fix to MoveToNextWord when it's called at the end of the line
  - Fixed rem comments in .bat files only syntax highlighting if they are at the start of the line
  - Fixed syntax highlighting of goto labels in .bat files
  - Made changing the debug args update the ExeArgs setting in 10x workspaces
  - Fixed fuzzy matcher missing uppercase word starts on last char
  - Disabled weak fuzzy matches (sub-word contains, any order word matches etc) for external code
  - Fixed crash on startup for some workspaces introduced in previous build
  - Fixed windows in the default layout not restoring
  - Added MoveToNextWordMode setting (defaults to WordStart)
  - Made SelectNextWordMode setting default to WordStart (was auto)
  - Made NextWordMode auto only select spaces at the start of the line
  Parser Fixes
  - Fixed autocomplete not showing symbols in annonymous namespaces
  Misc
  - Added logging for Microsoft.Build.Locator
  - Removed Unreal "missing project file" error log
  - Default HideMainMenu to false
  - Removed "failed to find DefNode" warning
  - Made ShowBuildOutput command focus the build panel
  - Removed "Failed getting compiled script" warning
  - Removed "Force Includes for" logging
  - Updated vim.py
ReleaseNotesUrl: https://10xeditor.com/versions.htm
PurchaseUrl: https://10xeditor.com/pricing.htm
# InstallationNotes:
Documentations:
- DocumentLabel: Documentation
  DocumentUrl: https://10xeditor.com/10xDocumentation/10xDocumentation.htm
- DocumentLabel: FAQ
  DocumentUrl: https://10xeditor.com/faq.htm
ManifestType: defaultLocale
ManifestVersion: 1.10.0
