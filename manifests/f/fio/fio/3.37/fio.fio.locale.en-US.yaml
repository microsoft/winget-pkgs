# Created with YamlCreate.ps1 v2.4.1 $debug=QUSU.CRLF.7-4-2.Win32NT
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json

PackageIdentifier: fio.fio
PackageVersion: "3.37"
PackageLocale: en-US
Publisher: fio
PublisherUrl: https://github.com/axboe
PublisherSupportUrl: https://github.com/axboe/fio/issues
# PrivacyUrl:
Author: Jens Axboe
PackageName: fio
PackageUrl: https://github.com/axboe/fio
License: GPL-2.0
LicenseUrl: https://github.com/axboe/fio/blob/master/COPYING
Copyright: Copyright (C) 2024, Jens Axboe <axboe@kernel.dk>
# CopyrightUrl:
ShortDescription: Flexible I/O Tester
Description: |-
  Fio was originally written to save me the hassle of writing special test case programs when I wanted to test a specific workload, either for performance reasons or to find/reproduce a bug. The process of writing such a test app can be tiresome, especially if you have to do it often. Hence I needed a tool that would be able to simulate a given I/O workload without resorting to writing a tailored test case again and again.
  A test work load is difficult to define, though. There can be any number of processes or threads involved, and they can each be using their own way of generating I/O. You could have someone dirtying large amounts of memory in a memory mapped file, or maybe several threads issuing reads using asynchronous I/O. fio needed to be flexible enough to simulate both of these cases, and many more.
  Fio spawns a number of threads or processes doing a particular type of I/O action as specified by the user. fio takes a number of global parameters, each inherited by the thread unless otherwise parameters given to them overriding that setting is given. The typical use of fio is to write a job file matching the I/O load one wants to simulate.
# Moniker:
# Tags:
# ReleaseNotes:
ReleaseNotesUrl: https://github.com/axboe/fio/releases/tag/fio-3.37
# PurchaseUrl:
# InstallationNotes:
# Documentations:
ManifestType: defaultLocale
ManifestVersion: 1.6.0
