# Created with YamlCreate.ps1 v2.2.0 using InputObject ðŸ¤– $debug=QUSU.CRLF..7-2-7
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.2.0.schema.json

PackageIdentifier: Unity.Unity.2022
PackageVersion: 2022.2.0f1
PackageLocale: en-US
Publisher: Unity Technologies ApS
PublisherUrl: https://unity.com/
PublisherSupportUrl: https://support.unity.com/
PrivacyUrl: https://unity.com/legal/privacy-policy
Author: Unity Technologies ApS
PackageName: Unity 2022
PackageUrl: https://unity.com/download
License: Proprietary
LicenseUrl: https://unity.com/legal/terms-of-service
Copyright: Â© 2022 Unity Technologies ApS. All rights reserved.
CopyrightUrl: https://unity.com/legal/trademarks
ShortDescription: The worldâ€™s leading platform for real-time content creation
Description: Unity is the ultimate game development platform. Use Unity to build high-quality 3D and 2D games, deploy them across mobile, desktop, VR/AR, consoles or the Web, and connect with loyal and enthusiastic players and customers.
# Moniker:
Tags:
- develop
- development
- game
- unity
- unity3d
# Agreements:
ReleaseNotes: |-
  Features

  - 2D: New Light Batching Debugger feature use to debug sorting layers batched with Light2D and ShadowCaster2D.
  - AI: Added an option to create a height mesh when you build the NavMesh at runtime.
  - Android: Added preliminary support for Magic Leap 2.
  - Android: Added support for Armv9 security features (PAC/BTI) for Arm64 builds.
  - Animation: Added support for Animation Clips for multi-editing.
  - Animation: Changed so fields on SerializeReference instances of MonoBehaviours can now be animated like fields directly on MonoBehaviours.
  - Asset Import: Warnings and Errors logged by AssetImporters during the import of an asset are now saved in the import result. Erroneous assets can be found in the project browser using a new filter and logged warnings and errors can be displayed on demand in the console from the asset inspector.
  - Burst: Support for detecting managed breakpoints in code compiled with burst, and automatically switching the affected code to the mono execution path to allow managed debugging. Requires Burst 1.8.
  - Editor: Added a button in Device Simulator device list that installs com.unity.device-simulator.devices package, which contains the latest device definitions from Unity.
  - Editor: Added ability to import export profiles in shortcut manager.
  - Editor: Added context column to ShortcutManager.
  - Editor: Added Edit-mode preview overlay for the Trail Renderer.
  - Editor: Added MinMaxCurveProperty Drawer for UIToolkit Inspector.
  - Editor: Added the ability to block shortcuts from triggering during playmode while the game view window is focused.
  - Editor: Added the ability to resize overlays.
  - Editor: Added the possibility of running tests in a specified order from a test list.
  - Editor: Frame Debugger: Not possible to set the min and max values for the Levels slider.
  - Editor: Frame Debugger: Now possible to add a shortcut to enable/disable a capture.
  - Editor: Frame Debugger: Now possible to copy a foldout or an entire event.
  - Editor: Frame Debugger: Now possible to see the Original and Used shaders in an event. Useful for events that are using USEPASS or falling back to an assigned fallback shader.
  - Editor: Frame Debugger: Now possible to view individual meshes in an SRP Batch inside the Mesh Preview.
  - Editor: Frame Debugger: Stage, Scope and Dynamic info added to keywords.
  - Editor: Frame Debugger: Texture format now split into two fields, Color Format and DepthStencil Format.
  - Graphics: Added a visual debug tool for buffer load/store actions.
  - Graphics: Added access to the bounds of the current renderer in the per object constant buffer for SRPs.
  - Graphics: Added Foveated Rendering support for D3D12/Vulkan.
  - Graphics: Added gaze foveated rendering (GFR) on Vulkan using fragment density map offset.
  - Graphics: Added mipmap limit groups for more fine-grained configurability over the single value that applies to all mipmapped texture2Ds.
  - Graphics: Added Terrain heightmap support in RayTracingAccelerationStructure when using RayTracingAccelerationStructure.CullInstances function.
  - Graphics: Added the ability in the Texture2D importer and constructor to add the texture to a project-defined mipmap limit group for more fine-grained control of how texture quality gets affected per quality level.
  - Graphics: Added the ability in the Texture2D importer and constructor to exclude the texture from mipmap limits, ensuring that all mips can get uploaded regardless of the quality settings.
  - Graphics: Added the runtime-modifiable Texture2D property to toggle excluding the texture from mipmap limits (only for readable Texture2Ds).
  - Graphics: Implemented custom error/loading shader support for the BatchRendererGroup.
  - Graphics: OpenGL ES 3.1 support for BatchRendererGroup.
  - Graphics: Shader Warmup can now compile pipeline state objects asynchronously.
  - HDRP: Added a new Eye Shader type called Eye Cinematic with Caustic.
  - HDRP: Added a property called target in the custom pass drawer to access the current custom pass instance.
  - HDRP: Added Asymmetric projection and Screen Coordinates Override frame settings. Adapted post effects to support Screen Coordinates Override. (Used, for example, to support Cluster Display.).
  - HDRP: Added debug color monitors (Vectorscope, Waveform Markdig.Syntax.Inlines.HtmlEntityInline Parade).
  - HDRP: Added Ray Tracing Terrain support for HDRP.
  - HDRP: Added settings to overwrite diffusion profile IOR on StackLit.
  - HDRP: Volumetric material support for local volumetric fog volumes.
  - Kernel: Added a new Memory Manager Plugin interface to allow Unity's native Memory Manager to do native memory allocations.
  - License: Added editor licensing notification system.
  - Package Manager: Added a dropdown to the tab headers for Package Details when tab headers exceed the width of the Package Details pane.
  - Package Manager: Added the deprecated property to the UnityEditor.PackageManager.VersionsInfo class (usually accessed through the versions property of a UnityEditor.PackageManager.PackageInfo instance), which lists all versions of that package that are labelled as deprecated on the registry.
  - Package Manager: Added the isDeprecated and deprecationMessage properties to the UnityEditor.PackageManager.PackageInfo class, which are set when a given package version is labelled as deprecated on the registry by its author.
  - Package Manager: Added UI support for UPM packages that come from the Asset Store.
  - Package Manager: Moved the package action toolbar in the package details header and implemented new design changes on the details header.
  - Package Manager: Reorganized Package Details into tab-based display. Packages now have individual tabs for Description, Version History, Samples, and Dependencies, while Asset Store Packages have tabs for Overview, Releases, and Images.
  - Physics: Added a new 2D Physics Profiler Area with Custom Profile Counters.
  - Physics: Added a new Editor Preference editor for 2D Physics that allows the configuration of gizmo colours and settings.
  - Physics: Added an option to override Layer collisions for Colliders, Rigidbodies, ArticulationBodies and Character Controllers, which allows to fine tune which bodies should collide with what layers.
  - Physics: Added the ability for 2D Physics Collider Gizmos to optionally draw Outlines and/or Filled Colldiers.  These are new options in the Physics 2D Project Settings Editor.
  - Physics: Added the ability to select per-Collider2D, which layers that contacts are captured for querying and producing physics callbacks.
  - Physics: Added the ability to select, per-Collider2D, which layers that contacts will produce a physics callbacks for.
  - Physics: Allowed a Collider2D to control Send and Receive forces per-layer upon contact with another Collider2D.
  - Physics: Allowed a Joint2D to select one of four modes that control an action to be taken when the joint breaks. These are Ignore, CallbackOnly, Disable, or Destroy. Previously Destroy was the fixed action and is still the default.
  - Physics: Allowed a Rigidbody2D to read or write the total force or torque that has been applied to it directly via add force or add torque calls.
  - Physics: Allowed a Rigidbody2D/Collider2D to explicitly override (include or exclude) contact layers, so it can override the Layer Collision Matrix per-object.
  - Player: Preview support for Magic Leap 2 provider version 7.0.0.
  - Prefabs: Replace Prefab Asset of Prefab intsance. With this feature you can now replace the Prefab Asset for a Prefab instance that exists in a Scene or nested inside other Prefabs. This will keep the Prefab instance position, rotation and scale in the Scene but merge the contents from the new Prefab Asset while by default maintaining as many overrides and references as possible using name based matching.
  - Prefabs: Supported Undo for Prefab stages in the editor.
  - Serialization: Changed so fields on SerializeReference instances of MonoBehaviours can now be animated like fields directly on MonoBehaviours.
  - Serialization: Made EditorSerializationUtility services to access and manipulate SerializeReference instances with IDs available at runtime in Serialization.ManagedReferenceUtility.
  - Shadergraph: Added access to the renderer bounds in shadergraph through the object node.
  - Terrain: Added Quality Settings for controling various Terrain settings at different quality levels.
  - Text: Synchronized the Text Core's text generation with the latest code from TextMeshPro.
  - TextMeshPro: Added support for Color Glyphs and extracting OpenType font features.
  - UI Toolkit: Added a UI Toolkit version of NavigationDrawer.
  - UI Toolkit: Added align-self field in UI Builder style inspector.
  - UI Toolkit: Added call to implement DecoratorDrawers.
  - UI Toolkit: Added library icons in UI Builder.
  - UI Toolkit: Added support for background-position, background-size and background-repeat for background rendering.
  - UI Toolkit: Added UI Toolkit version of ColorBlockDrawer.
  - UI Toolkit: Improved the UI/UX of the inspector displaying appropriate visual cues accordingly to the statuses of properties and provided more details about how properties'  values are bound and resolved.
  - UI Toolkit: Improved UI Builder inspector.
  - Universal RP: Added a feature to create custom post processing effects by adding a renderer feature.
  - Universal RP: Added light cookies stripping.
  - Universal RP: Changed light and decal layers to rendering layers.
  - Universal RP: SSAO: AO Method dropdown added to select between Interleaved Gradient Noise and Blue Noise.
  - Universal RP: SSAO: Blur Quality dropdown added to select between: High (Bilateral), Medium (Gaussian) and Low (Single-Pass Kawase).
  - Universal RP: SSAO: Falloff field added to control the distance from the camera the AO should affect.
  - URP: Added clustered reflection probe support to the URP Forward+ rendering path. This enables the use of more than 2 reflection probes per object, allows Unity to skip per-object culling of lights and reflection probes, and enables Entities Graphics and procedural draws to make use of reflection probes.
  - URP: Added decal layers.
  - URP: Added Forward+ rendering path, allowing for more lights per object and enabling lighting on non-GameObjects.
  - URP: Added Screen Coordinates Override feature. Adapted post effects to support Screen Coordinates Override. (Used, for example, to support Cluster Display.).
  - URP: All built-in URP shaders and URP ShaderGraph shaders support Mesh LOD CrossFade, which you can select in UniversalRenderPipelineAsset.lodCrossFadeDitheringType property.
  - Version Control: Added a checkout option in scene prefab view.
  - Version Control: Added branch name column in changeset view.
  - Version Control: Added option to "Save Revision as" to the context menu in the changesets view.Markdig.Syntax.Inlines.HtmlInline
    - Added incoming changes overview bar for Gluon workspace.
  - VFX Graph: Activation boolean port on blocks
  - VFX Graph: Added a new lighting model for smoke : Six-way lighting.
  - VFX Graph: Added passthrough space (None).
  - VFX Graph: Skinned Mesh Sampling out of experimental (https://jira.unity3d.com/browse/VFXG-194).
  - VFX Graph: VFX Instancing now optimizes both CPU and GPU VFX runtime.
  - VFX Graph: VFX instancing: Allow several VFX of the same type to be updated and rendered at the same time, improving performance.
  - Video: VideoPlayer now has a configurable time update mode, to support game time, unscaled game time and audio dsp time.
  - Video: WebGL VideoPlayer now has a configurable time update mode, to support game time, unscaled game time and audio dsp time.
  - Web: This PR adds Javascript and WASM heap memory diagnostics for WebGL applications, and implements an overlay to display this data to the default template using HTML/CSS and a JS library called diagnostics.js. It also implements a flag in the Player Settings to enable this diagnostics UI.

  Improvements

  - 2D: Added an Alpha Clip option for Sprite Subtargets in Shadergraph.
  - 2D: Added icon to Sprite Editor Window.
  - 2D: Added shader support for URP Sprite Subtargets to be compatible with VFX assets.
  - 2D: Changed theTile Palette Window to use UIToolkit for UI.
  - 2D: Exposed the ITilemap constructor.
  - 2D: Set the minimum size to 64x64 pixels for Sprite previews.
  - 2D: Sprite-Atlas is now usable in Edit mode for 2D and Particle Renderers.
  - 2D: Updated 2D URP Template for 2022.2 to match with latest URP version.
  - Android: Added a way to include custom symbol files in the symbol zip package which can later on be uploaded to Google Play.
  - Android: Added new PlayerSettings Resolution Scaling Mode "Letterboxed".Markdig.Syntax.Inlines.HtmlInline Added black bars when the aspect ratio of the specified resolution does not match the aspect ratio of the native SurfaceView to avoid stretching.
  - Android: Apks are installed with --fastdeploy to improve replace performance for large projects.
  - Android: Fixed Android to use identical code folding with the LLD linker.
  - Android: Improved issues with Android NDK r23b.
  - Android: Improved the input event handling performance in the Input Manager by up to 30%.
  - Animation: Further improvements to animation job performance (esp. some forms of IK)
  - Animation: Improved animation performance across the board.
  - Animation: Optimized AnimationClip size calculation reducing asset load time in the Editor.
  - Asset Bundles: Fixed so that repeated calls to AssetBundle.LoadAsync doesn't lead to stalls on the main thread.
  - Asset Import: Improved behavior of mono script importer when creating/importing a class/struct with an identical name to a Unity component type. This will no longer show a warning when not inheriting from the Monobehaviour base class.
  - Asset Pipeline: Added AssetDatabase.LoadObjectAsync to load Asset asynchronously from the AssetDatabase.
  - Asset Pipeline: The following API functions generates error messages if used during in-process Import and throw an exception if used during out-of-process Import:Markdig.Syntax.Inlines.HtmlInline
    - StartAssetImportingMarkdig.Syntax.Inlines.HtmlInline
    - StopAssetImportingMarkdig.Syntax.Inlines.HtmlInline
    - RefreshMarkdig.Syntax.Inlines.HtmlInline
    - SaveAssets.
  - Audio: The FsbTool is alive for each import process worker to speed up audio importing.
  - Build Pipeline: Added a "Force skip data build" option for incremental player builds so users can skip the data build even if there are changes.
  - Build Pipeline: Added ContentLoadInterface for loading unity serialized files.
  - Build Pipeline: Optimized the Asset Bundle building for large scale objects, such as the preload table generation and computing the dependencies.
  - Build System: Optimized use of a linux clang compiler for speed instead of size.
  - Build System: Used a faster linux clang toolchain built with a newer bootstrap compiler.
  - Burst: Added support for the System.Runtime.CompilerServices.IsExternalInit workaround documented [here](https://docs.unity3d.com/2022.1/Documentation/Manual/CSharpCompiler.html) into Burst when used in 2022.1+.
  - Burst: Improved exception type support when thrown from non-job burst compiled methods. (1369088)
  - Burst: Used explicit namespace for UnityEditor.PackageManager.Events to avoid conflicts.
  - Core: Added Transform.SetLocalPositionAndRotation(). This allows you to set both the localPosition and localRotation of a transform in a single call, which is more efficient than assigning to localPosition and localRotation separately. (Thank you to @DevDunk on the forum for the request!).
  - Core: Applied the safety disabling attributes recursively into marked fields.
  - Core: Changed so that IJob, IJobFor, and IJobParallelFor schedule sites can be burst compiled.
  - Core: Changed UnsafeUtility.Free to no longer throw an exception when given the Allocator.None allocator.
  - Core: Improved Job Debugger performance to avoid redundant work. Most users should feel comfortable to leave the Job Debugger enabled at all times.
  - Core: Improved the Job System to better scale as core counts increase and reduced the cost of scheduling jobs and combining dependencies.
  - Documentation: Added a summary and code example for IJobParallelForTransform.
  - Documentation: Elaborated on how ForceMode affects velocity and angular velocity in AddForce/AddTorque.
  - DX12: Improved CPU performance in DX12 drawcall setup.
  - DX12: Improved Editor performance in cases of heavy renderthread utilization by removing a stalling sync between mainthread and renderthread.
  - DX12: Improved stability of DX12 backend, when running out of memory.
  - DX12: Optimized async readback by using scratch buffer for small buffers.
  - DX12: Reduced calls to CreateConstantBufferView by moving constant buffer views to root signature which is faster (SetRootConstantBufferView).
  - Editor: Added a confirmation dialog if you try to open more than one asset using the inspector. (1304612)
  - Editor: Added a new filter in project browser for VFX Asset files.
  - Editor: Added an info box when emissive lighting is locked to black by material hierarchy. ("1387434")
  - Editor: Added Enable PlayMode Tooltips toggle to preferences.
  - Editor: Added mouse shortcuts to Shortcut Manager.
  - Editor: Added timestamps argument to include timestamps and thread ID prefix to logs.
  - Editor: Changed so that SceneView view tool interactions are customizable through Shortcut Manager.
  - Editor: Changed so the build subtarget is reported in editor analytics.
  - Editor: Fixed the VisualElement and BaseField tooltips positions. (1424198)
  - Editor: Frame Debugger: Arrays are now displayed inside the window instead of using a popup.
  - Editor: Frame Debugger: Holding down Shift or Alt buttons while clicking a foldout triangle will now open/close them all.
  - Editor: Frame Debugger: Scope values changed from v/f/g/h/d to vs/fs/gs/hs/ds.
  - Editor: Frame Debugger: Shader Properties are now sorted by property names.
  - Editor: Frame Debugger: Table headers added to properties.
  - Editor: Improved documentation for HideFlags.DontSave. ("1420510")
  - Editor: Improved Editor performance when selecting a GameObject with Scripts that have a lot of data in the SerializableField field in the Inspector. ("1383826")
  - Editor: Improved performance of AnnotationManager refresh.
  - Editor: Improved performance of the Editor when entering Playmode with a reduction in cost of multi-display support Editor preferences initialization.
  - Editor: Improved performance when you enter and exit playmode in the Editor.
  - Editor: Improved quality of AnimationCurve preview rendering.
  - Editor: Improved the UI for the Frame Debugger. Added a search field to the tree view and added a button to the Game Window to open the Frame Debugger.
  - Editor: Improved the ShortcutManager window modifier key hover styles.
  - Editor: Made new leak checking simpler and faster when callstacks aren't recorded.
  - Editor: Prevented your computer from automatically going to sleep while waiting for a task which shows a progress bar.
  - Editor: Reduced the time taken by AssetDatabase.FindAssets when used with a custom filter, speeding up domain reloads and other editor operations that made the poor choice of calling this function in the first place.
  - Editor: Removed the managed reference to DisposeSentinel from NativeArray.
  - Editor: Updated the Physical Camera Presets list. (1371464)
  - Editor: Updated SearchUtils.GetTypeIcon to not create component. ("1414921")
  - EmbeddedLinux: Exposed a port field for the managed debugger in the Build settings when the Debugging script is checked.
  - GI: Changed to load all sub scenes recursively when you start a GI bake to support GI baking when using the entities package.Markdig.Syntax.Inlines.HtmlInline Disabled auto mode checkbox in the Lighting window when the entities package is present.
  - GI: Cleaned up the Lighting settings in the Editor GUI.
  - GI: Made the information managed through LightProbes consistent. The result of appending and removing LightProbes is exposed after Tetrahedralization.
  - GI: Removed the info box in the lighting window.
  - GI: Updated the Lightmap Parameters Custom UI to make it easier to understand what each parameter should affect.
  - GI: Upgraded the Optix SDK used by the progressive lightmapper denoiser to version 7. Reduces memory usage during denoising. Requires NVIDIA R495.89 driver or newer.
  - Graphics: Added a new "perceptual blend" interpolation mode to gradients that blends between colors more naturally using "Oklab" color space.
  - Graphics: Added a warning for Metal when you to render with blending while dest RT is discarded/not-loaded.
  - Graphics: Added an error message for indirect compute buffers that are incorrectly flagged on DX11. ("1389382")
  - Graphics: Added new contructor on DebugUI.Container to allow having containers with an ID. (1409096)
  - Graphics: Added support for sampling light probe grid from jobs / threads. See LightProbeQuery in the documentation.
  - Graphics: Applied the use of memoryless MSAA to the MSAA attachment when you use depth resolve.
  - Graphics: Avoided any redundant Vulkan pipeline switches when you use shaders with identical passes.
  - Graphics: Changed so you see an error if the configured Render Pipeline Assets on the Quality Levels are different on Type.
  - Graphics: Changed the scope of Frame Timing Manager FrameTime.GPU on DX11 to include VFX.Update for more accurate GPU frame timings.
  - Graphics: Changed URP and HDRP to use the Physical Camera Settings in the UnityEngine.Camera class to allow these settings to be shared and unified.
  - Graphics: Changed Vulkan shaders to use combined image and sampler that don't require separate SamplerState.
  - Graphics: Fixed so that the state of the widgets on the rendering debugger are maintained when when you enter Play Mode. (1401599)
  - Graphics: Improved AlphaIsTransparency API docs and tooltip. ("UUM-2364")
  - Graphics: Improved render thread performance (20% better performance) when using ray tracing effects.
  - Graphics: Migrated Particle System Collision module Scene View tools to the new Overlay system.
  - Graphics: Migrated Particle System Shape module Scene View tools to the new Overlay system.
  - Graphics: Migrated the Line Renderer Scene View tools to the new Overlay system.
  - Graphics: Reduced command buffer CPU overhead.
  - Graphics: Reduced RenderGraph CPU overhead.
  - Graphics: Refactored RayTracingAccelerationStructure.AddInstance(GraphicsBuffer) Scripting API to generate ray tracing instances using AABB GraphicsBuffer (procedural geometry generation using intersection shaders).Markdig.Syntax.Inlines.HtmlInline
    - Added a MaterialPropertyBlock parameter for binding per ray tracing instance.Markdig.Syntax.Inlines.HtmlInline
    - Added new Scripting API functions to RayTracingAccelerationStructure for managing the following types of instances: RemoveInstance, UpdateInstanceTransform and UpdateInstancePropertyBlock.
  - Graphics: Unified the code of shader variant strippers across the SRP's.
  - Graphics: Updated ASTC compressor to astcenc version 3.5 to improve ASTC texture compression speed.
  - Graphics: Updated QualitySettings.maxQueuedFrames to work in Vulkan API.
  - Graphics: Use Vulkan format VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT for GraphicsFormat.B4G4R4A4_UNormPack16 if it is supported.
  - HDRP: Added a new iteration on the water system.
  - HDRP: Added a new sample for fullscreen master node.
  - HDRP: Added a new/clone button to lens flare data picker. (1400415)
  - HDRP: Added clamp to reflection probe normalization factor computed from APV.
  - HDRP: Added Screen space for the Transform node.
  - HDRP: Added Volumetric Material samples.
  - HDRP: Changed ACES luminance fit to allow pure whites.
  - HDRP: Changed default size of the debug APV probes, moved the menu entry for the APV baking window and clarified the tooltip for APV simplification levels.
  - HDRP: Changed the reflection probes cube texture array cache to be a 2D texture atlas in the octahedral projection.Markdig.Syntax.Inlines.HtmlInline
    - Reflection probe resolution resolution can be chosen individually.Markdig.Syntax.Inlines.HtmlInline
    - Reflection probes and planar reflection probes atlas's are combined in a single atlas.
  - HDRP: Changed the way HDRP volumetric clouds presets are handled to allow blending.
  - HDRP: Fixed so the Rendering Debugger isn't recreated on UI changes. (1412467)
  - HDRP: Further improved the consistency of non-physical depth of field at varying native rendering resolutions and resolution scales.
  - HDRP: Improved area light soft shadow - when the new Very High shadow filtering quality level is selected, area lights use improved PCSS filtering for wider penumbras and better contacts.
  - HDRP: Improved Material sample by adding 3 scenes about stacking transparent materials in the 3 different rendering path (Raster, Ray Tracing, Path Tracing).
  - HDRP: Removed diffusion profiles from global settings.
  - HDRP: Updated an out-of-date guide in TextureStack.hlsl. (UUM-2513)
  - HDRP: Used anti leaking in reflection probes and changed the default values for APV.
  - IL2CPP: Built Libil2cpp as a static library to allow caching it in the future.
  - IL2CPP: Corrected performance regression calling a managed method via a function pointer.
  - IL2CPP: Corrected stack trace being overwritten when an exception filter does not match the thrown exception.
  - IL2CPP: Fixed issues with internal IL2CPP type layout calculations on types with explicit layout.
  - IL2CPP: Fixed missing static initialization calls in static constructors on generic instances that reference different instances of the same generic type.
  - IL2CPP: Improved dead branch elimination in generic methods.
  - IL2CPP: Improved memory usage tracking in memory profiler.
  - IL2CPP: Improved the performance of generic virtual and generic interface methods calls when called from multiple threads.
  - IL2CPP: Lowered the cost of each sequence point check to improve the run time performance of managed code when script debugging is enabled.
  - IL2CPP: Made Visual Studio 2022 the recommended C++ compiler tool chain for Windows Desktop builds.
  - IL2CPP: Optimized out boxing on null checks on nullable types in.
  - IL2CPP: Reduced memory usage by removing caching of custom attribute instances.
  - IL2CPP: Reduced the amount of memory allocated for type metadata.
  - IL2CPP: Removed the null check before constructor calls.
  - Input: Made common API with string parameters callable from Burst.
  - iOS: Added the UnityHandleTouches function in trampoline, so you can send fake touches to the Unity application.
  - Kernel: Improved native containers so you can nest them if they aren't used in jobs.
  - Kernel: Optimized the Unity ThreadsafeLinearAllocator performance so it's 2-6 times faster depending on the platform architecture.
  - License: Added a proper license error dialog when the Editor is opened with a build license.
  - Mono: Added support for direct ETW profiler integration on Windows Desktop for managed code, with no plugin required.
  - Multiplayer: Added Netcode for GameObjects 1.0.2.
  - Package Manager: Changed the Advanced gear icon in the Package Manager window.
  - Package Manager: Changed the Package Manager native progress dialog to show progress information for a Resolve operation.
  - Package Manager: Expanded the input field size when you add packages by Git URL to fit the entire URL pasted in.
  - Particles: Changed so align to Direction allows World and Local Render alignment instead of forcing Local alignment.
  - Physics: Added ability to access RaycastHit.textureCoord off the main thread.
  - Physics: Added support to get multiple hits per 1 batch command.
  - Physics: Added the ability to get multiple hits per mesh when you use Raycast batch query.
  - Physics: Changed the GameObject name field to a reference field in the Info tab of the Physics Debug window.
  - Physics: Enabled the option to extend angular limits for Hinge Joint.
  - Physics: Improved the draw performance and features for 2D Physics Collider Gizmos by ensuring the gizmo drawing is batched as efficiently as possible.
  - Physics: Improved the layout of 2D Physics Project Settings Editor so that it is easier to access the Layer Collision Matrix and the other General Settings.
  - Physics: Improved the performance of the cloth system and parallelized system operations. The cloth system update is split into three stages: skinning, simulation and read-back. Each stage is distributed across multiple jobs and properly represented inside the profiler's timeline. ("1173457")
  - Physics: Made the values in the Info tab of the Physics Debugger copyable.
  - Physics: Removed unnecessary data to improve the memory footprint of Cloth components and the cloth system. The NvCloth backend's memory footprint is tracked and reported by the Unity's profiling tools. ("1173457")
  - Player: Added timestamps argument to include timestamps and thread ID prefix to logs.
  - Player: Optimized Resources.LoadAsync main thread use (from 1s to 13ms in a large asset test case).
  - Prefabs: Added a preference called 'Default Prefab Mode" for the behavior when you open Assets for the Prefab instances in the Hierarchy ('In Context' or 'In Isolation').
  - Prefabs: Changed so GameObjects can be removed from Prefab instances as overrides.
  - Prefabs: Fixed so that a invalid fileID can't be written to scene file. (1373325)
  - Profiler: Added GPU allocations information to the Memory Profiler snapshot.
  - Profiler: Added object names markup to operations on the render thread.
  - Profiler: Added Unity version information to the profiler data file and profiler connection. ("1342262")
  - Profiler: Improved performance of rendering the CPU timeline view when viewing large captures.
  - Scene/Game View: Improved performance of the Orientation Gizmo.
  - Scene/Game View: Loaded SceneView Toolbar icons using variables defined in the USS.
  - Scripting: Allowed you to pass additional files to the roslyn analyzer and make them part of the dependency graph.
  - Scripting: Always inline the Mathf Sign() script API function.
  - Scripting: Calls to UnityEngine.Diagnostics.Utils.ForceCrash and UnityEngine.Diagnostics.Native* functions are now allowed from non main thread.
  - Scripting: Changed Unity to cache package assemblies locally on your machine to speed up compilation of packages.
  - Scripting: Does not discard AssemblyUpdater output when no updates have been applied.
  - Scripting: Improved invalid ApiUpdater configs detection.
  - Scripting: Improved performance of AssemblyBuilder API. ("1359764")
  - Scripting: Improved pop-up error messages when attaching scripts to GameObjects. (UUM-2557)
  - Scripting: Improved the performance of the geometry scripting APIs.
  - Scripting: Improved the startup performance of script compilation.
  - Scripting: Performance improvements on startup time and code iterations.
  - Search: Changed the advanced object selector to commit values upon closing and cancel when you press Escape.
  - Search: Restored queries and sorting options when you re-open the advanced object selector window.
  - Serialization: Improved GlobalObjectId object reference documentation.
  - Services: All customers can opt out of analytics in the editor and these settings sync with the Unity backend.
  - Shadergraph: Reduced time taken by code generation when a shader graph asset is imported.
  - Shaders: Added a warning with a workaround suggestion if a shader is targeting GL/Vulkan and uses large immediate constant arrays as it might cause problems for some drivers.
  - Shaders: Added an editor only option to disable shader optimizations for reduced compile times.
  - SRP Core: Improved performance of APV baking.
  - Terrain: Fixed so when you resize detail map resolution, it does not erase previously placed details.
  - Terrain: Improved terrain details scattering algorithm to allow more consistent coverage. Legacy distribution is still available in the quality settings. (1425291)
  - UI: The TextureImporterInspector disables the "sRGB (Color Texture)" toggle for HDR targets (reflected in API docs). (1324432)
  - UI Toolkit: Added a ProfilerMarker in BaseVerticalCollectionView Rebuild and RefreshItems.
  - UI Toolkit: Added the missing Field icons in UI Builder. (1424724)
  - UI Toolkit: Changed so the Editor flags a setting usage hint when USS transitions start and could have a better performance with those settings.
  - UI Toolkit: Improved the performance of TextField.
  - UI Toolkit: Reduced unnecessary Layout and Repaint changes caused by style changes.
  - UI Toolkit: Refactored the UI Builder's asset modification processor's OnWillSaveAssets() callback to save changes automatically on the Save and Save Project global commands.Markdig.Syntax.Inlines.HtmlInline
    - The save operation is properly skipped on the Duplicate command.Markdig.Syntax.Inlines.HtmlInline
    - Removed the Cmd+S handler code and the associated OnSaveDocument callback.
  - UI Toolkit: Renamed the UI toolkit background property test to match the allocated entry.
  - Undo System: The Undo history now records the name of changed properties ("Modified Intensity") instead of just showing "Modified Property".
  - Universal RP: Added tooltips for upscaling filters.
  - Universal RP: SSAO: Depth test improved to avoid incorrectly adding AO in places where two objects are far away from one another.
  - Universal RP: SSAO: Downsampling will now not only affect the AO pass but also the blur passes.
  - Universal Windows Platform: Changed the Executable Only build to honor the selected Visual Studio version.
  - URP: Added Screen space for the Transform node.
  - URP: Changed so Unity exports shader variants information into a file in a temp folder.
  - URP: Improved edge quality for alpha-clipped materials when multisampling is used in URP.
  - URP: Reduced the number of memcpy operations from NativeArray access in URP for performance.
  - Version Control: Added offline mode toggle for smoother offline experience.
  - Version Control: Added support for Multi Factor Authentication to the Perforce plugin. The Plugin uses Perforce API v19.1.
  - Version Control: Added support for TLSv1.2 connections to Perforce servers. The Plugin is now using Perforce API v17.2.
  - VFX Graph: Added a missing range slider for the blend property to the custom attribute blend block.
  - VFX Graph: Fixed so that the context name isn't lost when you convert to a different type.
  - VFX Graph: Fixed so the space property is carried over when copying/pasting a VFX property.
  - VFX Graph: Fixed the OutputParticle context inspector content so it doesn't shift vertically when you resize the inspector panel.
  - VFX Graph: Made the input property label colors consistent.
  - VFX Graph: Reduced the time taken by VFXGraph.CheckCompilationVersion that would previously potentially query all assets on every domain reload.
  - VFX Graph: Reduced time taken by code generation when a VFX asset is imported.
  - VFX Graph: Sticky notes are no longer lost when you convert to block subgraph.
  - Video: Changed VideoPlayer.timeUpdateMode to emit warnings on the platforms where it is not currently supported.
  - Web: Rewrote the WebCamTexture upload implementation to be less CPU-heavy.
  - Windows: Added the -force-d3d11-flip-model command line parameter to force Unity to use DXGI flip model swap chain.
  - Windows: Unity warns you if you run it as an administrator and offers to restart with non-administrator privileges.
  - XR: Added profiler markers for some XR Display subsystem entry points. Markers are named XR.Display.*.
  - XR: Added support for late latch debug mode to help verify late latch functionality.
  - XR: Changed TryGetBoundaryPoints to return proper boolean values.
  - XR: Updated FMOD to use new MLAudio libraries [if available].

  API Changes

  - 2D: Added: Expose TilePaletteFocusDropdown.
  - 2D: Added: New API to create Sprites with Seconday Texture properties.
  - 2D: Added: New API to query Secondary Textures used by a Sprite.
  - 2D: Added: New APIs for configuring Tile Animations:Markdig.Syntax.Inlines.HtmlInline
    - Tilemap.SetTileAnimationFlagsMarkdig.Syntax.Inlines.HtmlInline
    - Tilemap.AddTileAnimationFlagsMarkdig.Syntax.Inlines.HtmlInline
    - Tilemap.RemoveTileAnimationFlagsMarkdig.Syntax.Inlines.HtmlInline
    - Tilemap.GetTileAnimationFlags.
  - 2D: Added: New Tilemap.GetTilesBlockNonAlloc API.
  - 2D: Added: TileAnimationsFlags for configuring Tile AnimationsMarkdig.Syntax.Inlines.HtmlInline
    - TileAnimationFlags.LoopOnce (Tile Animations that play and run once)Markdig.Syntax.Inlines.HtmlInline
    - TileAnimationFlags.PauseAnimation (Pause Tile Animation)Markdig.Syntax.Inlines.HtmlInline
    - TileAnimationFlags.UpdatePhysics (Update the physics shape for the Tile as the Tile Animation plays).
  - 2D: Obsoleted: Support for accessing sprite meta data through TextureImporter.spritesheet has been removed. Please use the UnityEditor.U2D.Sprites.ISpriteEditorDataProvider interface instead.
  - AI: Added: NavMeshBuildSettings.buildHeightMesh flag.
  - AI: Added: New parameter in the CollectSources() methods can limit the search to only the game objects that have markups.
  - AI: Added: New parameter generateLinksByDefault in the CollectSources() methods can set if the NavMesh sources are allowed to produce Off-mesh links in the case when no markups are associated with them.
  - AI: Added: New properties ledgeDropHeight and maxJumpAcrossDistance in NavMeshBuildSettings allow for Off-mesh links to be automatically generated when building the NavMesh at runtime.
  - AI: Added: New property applyToChildren in NavMeshBuildMarkup allows the markup to be assigned to all the children of the root object.
  - AI: Added: New property generateLinks in NavMeshBuildMarkup allows for Off-mesh links to be automatically created from the marked object when the NavMesh is built.
  - AI: Added: New property overrideIgnore in NavMeshBuildMarkup allows for ignoreFromBuild to have a value opposite to what is defined by the parent markup.
  - Android: Added: Classes AndroidJNI, AndroidJNIHelper, AndroidJavaObject, AndroidJavaClass, AndroidJavaProxy have new methods for more efficient low-level interop with Java. See API docs for full list.
  - Android: Added: Hindi support to SystemLanguage. ("1380309")
  - Android: Added: Introduced UnityEditor.Android.ADB.KillServerOnExit which controls a behavior where Unity would call adb kill-server on exit, effectively killing adb process, the default value for this property is true, meaning Unity will always kill adb upon exit. This can be changed either through this newly added API or from Preferences-Markdig.Syntax.Inlines.HtmlEntityInlineExternal Tools in Unity. ("1376211")
  - Android: Added: SetAndroidCPU and SetAndroidSharedLibraryType extension methods for PluginImporter (from UnityEditor.Android.Plugins namespace).
  - Android: Changed: The Android Java interop APIs now do nothing when used from unattached thread. Previously they would temporary attach a thread and return invalid local references. No change for properly written code that attaches a thread prior to calling JNI.
  - Android: Changed: Updated SupportsAccelerometer() API to return whether a device has an accelerometer sensor or not.
  - Android: Obsoleted: PlayerSettings.Android.minifyWithR8 is now obsolete: setting it now has no effect will always return true.
  - Animation: Added: TransformSceneHandle.GetLocalToParentMatrix and TransformSceneHandle.GetLocalToWorldMatrix.
  - Animation: Added: TransformStreamHandle.GetLocalToParentMatrix and TransformStreamHandle.GetLocalToWorldMatrix.
  - Asset Pipeline: Added: AssetDatabase.InstanceIDsToGUIDs() to fill a NativeArray of GUIDs for a NativeArray of instance IDs.
  - Build Pipeline: Added: New API for assemblyCompilationNotRequired, which we'll use in Burst to earlier inform Burst when an assembly hasn't been modified during compilation.
  - Build Pipeline: Obsoleted: BuildPipelineExperimental is now deprecated.
  - Core: Added: A new event Application.memoryUsageChanged, that is fired when applications memory usage changes significantly (for example goes critically low).
  - Core: Added: API for Handles that did not expose their IDs.
  - Core: Added: Direct faster support for 1D PerlinNoise.
  - Core: Added: Resources.InstanceIDsToValidArray() which allows you to batch check the validity of Objects by instance ID.
  - Core: Added: ScheduleByRef and RunByRef variants added to built-in managed job types.
  - Editor: Added: Editor.hasUnsavedChanges API so each single Editor in the Inspector can prevent entering playmode, closing the Inspector and changing selection while pending changes requires specific apply.
  - Editor: Added: EditorUtility.IsValidUnityYAML, which determines whether or not a string contains YAML that can be parsed by Unity.
  - Editor: Added: Exposed Handles.DrawAAPolyLine(Color[] colors, Vector3[] points) and Handles.DrawAAPolyLine(float width, Color[] colors, Vector3[] points).
  - Editor: Added: IDataModeController is added to handle data mode related functionalities. (DOTSE-1855)
  - Editor: Added: Implement API to access PlayMode Views (GameView and Simulator).
  - Editor: Added: Introduce 2 new editor mode capabilities allowing user to hide the Add Component button, or to filter which component are shown in the AddComponent dialog.
  - Editor: Added: New APIs to support editor windows that can be in different modes when operating over runtime data vs authoring data.
  - Editor: Added: New Settings API to verify the existence of a particular settings path.
  - Editor: Added: RespectSceneVisibilityWhenBakingGI property to LightSettings for offline baking configuration.
  - Editor: Added: Support for callbacks and filters on the execution of cut/copy/paste/duplicate of GameObjects.
  - Editor: Added: Support to hide any method from the detail area of the console window.
  - Editor: Added: Handles.elementSelectionColor and Handles.elementPreselectionColor to the public API, allowing user defined EditorToolContext to have consistent coloring of selectable elements.
  - Editor: Added: HandleUtility.FindNearestVertex now returns the GameObject in addition to the vertex.
  - Editor: Changed: Lightmapping.SetAdditionalBakedProbes now accepts a boolean value to indicate if probes should be deringed.
  - Editor: Obsoleted: IDataModeHandler and IDataModeHandlerAndDispatcher are obsoleted.
  - Editor: Removed: Made Il2CppEagerStaticClassConstructionAttribute internal to avoid conflicts with other definitions outside of the package.
  - GI: Added: Rendering.GraphicsSettings.lightProbeOutsideHullStrategyMarkdig.Syntax.Inlines.HtmlInline
    - Rendering.LightProbeOutsideHullStrategy.kLightProbeSearchTetrahedralHullMarkdig.Syntax.Inlines.HtmlInline
    - Rendering.LightProbeOutsideHullStrategy.kLightProbeUseAmbientProbe. ("1340282")
  - GI: Deprecated: Enlighten Baked GI is deprecated and will be removed with release 2023.1. It recommended to use the CPU or GPU Progressive Lightmapper instead. Enlighten can be reactivated from the Project Settings up until release 2023.1.
  - GI: Deprecated: Various API endpoints related to Enlighten baking backend.
  - Graphics: Added: API to blend between baking states for Probe Volumes.
  - Graphics: Added: BeginRenderPass function overloading to support XR.
  - Graphics: Added: Blending for curves in post processing volumes.
  - Graphics: Added: Callback to obtain changes in the current Render Pipeline Asset.
  - Graphics: Added: CommandBuffer API to pass flags to our native plugin callback managing code to perform device state invalidation if needed.
  - Graphics: Added: Common support code for FSR.
  - Graphics: Added: Context menu on Volume Parameters to restore them to their default values.
  - Graphics: Added: Enum BatchCullingContext.projectionType.
  - Graphics: Added: Error on ResourceReloader when attempting to use [ReloadGroup] on ScriptableObject.
  - Graphics: Added: Explicit control over scenario blending factor and a debug mode for visualization.
  - Graphics: Added: Hidding Volume Components not available for the current pipeline on the Volume Profile Inspector.
  - Graphics: Added: Introduced QualitySettings.enableLODCrossFade.
  - Graphics: Added: IsHDR(GraphicsFormat/TextureFormat) to GraphicsFormatUtility.
  - Graphics: Added: Linear version of function that sets FSR RCAS shader constants.
  - Graphics: Added: Mesh.GetBindposes that returns a NativeArray, and Mesh.bindposeCount. (1384368)
  - Graphics: Added: New API for accessing Bone Weight and Blend Shape Graphics Buffers.
  - Graphics: Added: New denoising API to access hardware specific denoising backends.
  - Graphics: Added: New extension TryRemoveElementsInRange to remove a range of elements from a IList.
  - Graphics: Added: New Foveated Rendering API on the command buffer interface.
  - Graphics: Added: New functions for setting materials on renderer using a list of materials.
  - Graphics: Added: New QualitySettings API to work with excluded platforms.
  - Graphics: Added: New Screen Coordinates Override shader utilities.
  - Graphics: Added: New RenderPipelineGlobalSettingsProvider to help adding a settings panel for editing global settings.
  - Graphics: Added: Overload for CommandBuffer.SetComputeBufferParam, which allows binding a resource with GraphicsBufferHandle.
  - Graphics: Added: Overloads using TextureFormat to various GraphicsFormatUtility functions.
  - Graphics: Added: Probe volume influence weight parameter.
  - Graphics: Added: RenderPipeline.SupportsRenderRequest. Checks the active pipeline whether the given RequestData type is supported.Markdig.Syntax.Inlines.HtmlInline
    - RenderPipeline.SubmitRenderRequest. Triggers a render with the active render pipeline according to the passed in RequestData.Markdig.Syntax.Inlines.HtmlInline
    - RenderPipeline.ProcessRenderRequest. Protected method, render pipelines can override this to implement the rendering logic for RenderRequests.Markdig.Syntax.Inlines.HtmlInline
    - RenderPipeline.IsRenderRequestSupported. Protected method, render pipelines can override this to specify their support for RequestData types.Markdig.Syntax.Inlines.HtmlInline
    - RenderPipeline.StandardRequest. Use this as the RequestData parameter in SubmitRenderRequest to trigger a default srp render on the specified camera.
  - Graphics: Added: Resolution.refreshRateRatio, which returns a non-rounded refresh rate value.
  - Graphics: Added: Screen.SetResolution(int, int, FullScreenMode, RefreshRate) overload which allows setting specific refresh rate without rounding it to an integer.
  - Graphics: Added: Support for multiple Baking States to Prove Volumes.
  - Graphics: Added: Texture.isDataSRGB. This can be used to detect whether a texture's pixel data on disk/CPU memory/GPU memory is sRGB.
  - Graphics: Added: DebugUI.ObjectPopupField to render a list of UnityEngine.Objects as a popup on the Rendering Debugger.
  - Graphics: Added: Material.GetBufferHandle to get the GraphicsBufferHandle in a material property sheet.
  - Graphics: Added: Material.GetPropertyNames(<PropertyType>) to query the property sheet names in a material based on a given property type.
  - Graphics: Changed: DrawingSettings now has a overrideShader parameter. Allowing ScriptableRenderers to render with override shaders without overriding material properties.
  - Graphics: Changed: Moved RendererList and RendererListStatus in the UnityEngine.Rendering namespace.
  - Graphics: Changed: New cullingNearPlane field to the BatchCullingContext class. This field lets you specify the near plane distance that Unity uses to cull objects. It's available to the OnPerformCulling() callback.
  - Graphics: Deprecated: Display.Activate(int, int, int) has been deprecated. Use Display.Activate(int, int, RefreshRate) instead.
  - Graphics: Deprecated: Resolution.refreshRate has been deprecated. Use Resolution.refreshRateRatio instead.
  - Graphics: Deprecated: Screen.SetResolution(int, int, bool, int) and Screen.SetResolution(int, int, FullScreenMode, int) have been deprecated. Use Screen.SetResolution(int, int, FullScreenMode, RefreshRate) instead.
  - HDRP: Added: #pragma editor_sync_compilation directive to MaterialError.shader.
  - HDRP: Added: A button in the Probe Volume Baking window to open the Probe Volume debug panel.
  - HDRP: Added: A callback to override the View matrix of Spot Lights.
  - HDRP: Added: A new option to animate APV sample noise to smooth it out when TAA is enabled.
  - HDRP: Added: An initial version of under water rendering for the water system.
  - HDRP: Added: An option for culling objects out of the ray tracing acceleration structure.
  - HDRP: Added: An option on the lit shader to perform Planar and Triplanar mapping in Object Space.
  - HDRP: Added: An optional CPU simulation for the water system.
  - HDRP: Added: An overlay render queue to custom passes.
  - HDRP: Added: Default DOTS compatible loading shader (MaterialLoading.shader).
  - HDRP: Added: Denoising for the path tracer.
  - HDRP: Added: Implemented an initial version of the HDRP water system.
  - HDRP: Added: Importance sampling of the sky in path tracing (aka environment sampling).
  - HDRP: Added: Layer Mask in the Probe Volume Settings window to filter which renderers to consider when placing the probes.
  - HDRP: Added: More explicit error messages when trying to use HDSceneColor, NormalFromHeight, DDX, DDY or DDXY shader graph nodes in ray tracing.
  - HDRP: Added: New Expose SSR parameters to control speed rejection from Motion Vector including computing Motion Vector in World Space.
  - HDRP: Added: New Unity material ball matching the new Unity logo.
  - HDRP: Added: Public API for Diffusion Profile Override volume Component.
  - HDRP: Added: Refract Node, Fresnel Equation Node and Scene-Difference-Node (https://jira.unity3d.com/browse/HDRP-1599).
  - HDRP: Added: Remap alpha channel of baseColorMap for Lit and LayeredLit.
  - HDRP: Added: The culling matrix and near plane for lights, so that they can be custom-culled with the BatchRenderGroup API.
  - HDRP: Added: Time slicing support for realtime reflection probes.
  - Input: Added: Moved Input System gamepad from XInput to Windows.Gaming.Input on Windows.
  - iOS: Added: Identifiers for iPhone 14 models.
  - iOS: Added: IPad Air 5 and iPhone SE 3 to devices.
  - License: Removed: Legacy licensing module.
  - Mono: Added: New Diagnostic Utility API ValidateHeap for use when attempting to debug suspected memory corruption issues.
  - Networking: Deprecated: UnityWebRequest.Post() taking string payload has been deprecated. A direct replacement is UnityWebRequest.PostWwwForm(), also introduced UnityWebRequest.Post() taking string payload and Content-Type, the later being intended for sending string data other than HTML form.
  - Package Manager: Added: VersionsInfo.recommended property which defines the recommended package version to be used in the project.
  - Package Manager: Deprecated: VersionsInfo.verified property in favour of the VersionsInfo.recommended property. The verified property is now an alias for the recommended property.
  - Physics: Added: "Collider2D.callbackLayers" which allows the control of which layers that physics callbacks will be produced for.
  - Physics: Added: "Collider2D.contactCaptureLayers" which allows the control of which layers that contacts will be captured.
  - Physics: Added: Ability to run OverlapBox, OverlapCapsule and OverlapSphere queries asynchronously in a job.
  - Physics: Added: ArticulationBody.GetJointExternalForces method which allows to get the forces in reduced space needed to counteract forces applied in the general space for your Articulation chain.
  - Physics: Added: Drive type enumerator for Articulation Body drives.
  - Physics: Added: Expose a way to set wheel rotation speed.
  - Physics: Added: Expose additional ArticulationDrive setters that allow direct access to the properties.
  - Physics: Added: Expose setting inertia tensor and center of mass for Rigidbody and ArticulationBody components from the Inspector.
  - Physics: Added: Methods for getting accumulated force and torque for Rigidbodies and Articulation Bodies.
  - Physics: Added: Option to use accelerations instead of forces for Configurable and Hinge joints.
  - Physics: Added: Physics.ContactEvent event that allows jobified contact reading.
  - Physics: Added: Two new methods (PhysicsScene.InterpolateBodies() and PhysicsScene. ResetInterpolationPoses()) for interpolating non-default Physics Scenes.
  - Physics: Changed: Exposed a new method of controlling how the Physics simulation is run. Physics.autoSimulation is now obsolete, use Physics.simulationMode instead.
  - Physics: Deprecated: Physics2D.alwaysShowColliders" is now deprecated. It is now only available in the Physics 2D Project Settings.Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.showColliderAABB" is now deprecated. It is now only available in the Physics 2D Project Settings.Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.showColliderContacts" is now deprecated. It is now only available in the Physics 2D Project Settings.Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.showCollidersFilled" is now deprecated. It is now only available in the Physics 2D Project Settings.Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.showColliderSleep" is now deprecated. It is now only available in the Physics 2D Project Settings.Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.colliderAABBColor" is now deprecated. All Physics 2D gizmo options have been moved to Preferences (See "2D | Physics" preference) and is now displayed as "Bounds Color".Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.colliderAsleepColor" is now deprecated. All Physics 2D gizmo options have been moved to Preferences (See "2D | Physics" preference) and is now displayed as "Asleep Color (Outline)".Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.colliderAwakeColor" is now deprecated. All Physics 2D gizmo options have been moved to Preferences (See "2D | Physics" preference) and is now displayed as "Awake Color (Outline)".Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.colliderContactColor" is now deprecated. All Physics 2D gizmo options have been moved to Preferences (See "2D | Physics" preference) and is now displayed as "Contact Color".Markdig.Syntax.Inlines.HtmlInline
    - Physics: "Physics2D.contactArrowScale" is now deprecated. All Physics 2D gizmo options have been moved to Preferences under (See "2D | Physics" preference) and is now displayed as "Contact Arrow Scale.
  - Profiler: Added: ProfilerMarker BeginSample/EndSample API to CommandBuffer.
  - Profiler: Changed: Deprecated UnityEditor.MemoryProfiler.MemorySnapshot.RequestNewSnapshot() and the event MemorySnapshot.RequestNewSnapshot(). Consider using Unity.Profiling.Memory.MemoryProfiler.TakeCapture() which takes a callback as a parameter instead of using an event. It also allows for more specific capture options and if you pass a path to a ".snap"-file, you can use that API to capture memory snapshots from code to later inspect them in the Memory Profiler Package.
  - Profiler: Changed: Deprecated UnityEditor.MemoryProfiler.PackedMemorySnapshot and all related API it will be removed in a future Unity Version. The related API includes MemoryProfiler.Connection, MemoryProfiler.FieldDescription, MemoryProfiler.MemorySection, MemoryProfiler.PackedGCHandle, MemoryProfiler.PackedNativeType, MemoryProfiler.PackedNativeUnityEngineObject, PackedNativeUnityEngineObject.ObjectFlags, MemoryProfiler.TypeDescription, TypeDescription.TypeFlags and MemoryProfiler.VirtualMachineInformation.
  - Profiler: Changed: Deprecated UnityEditor.Profiling.Memory.Experimental.PackedMemorySnapshot and all related API it will be removed in a future Unity Version. The related API includes ArrayEntries<T>, ByteArrayEntries, ConnectionEntries, FieldDescriptionEntries, ManagedMemorySectionEntries, GCHandleEntries, NativeTypeEntries, NativeObjectEntries, NativeMemoryLabelEntries, NativeRootReferenceEntries, NativeAllocationEntries, NativeMemoryRegionEntries, NativeAllocationSiteEntries, NativeCallstackSymbolEntries, ObjectFlags, ObjectFlagsExtensions, TypeFlags , TypeFlagsExtensions and VirtualMachineInformation.
  - Profiler: Changed: Moved UnityEngine.Profiling.Experimental.DebugScreenCapture API to Unity.Profiling.Memory.DebugScreenCapture. The casing of the member names was adjusted to CamelCase. The Scripting API Udater can migrate existing usage of this API automatically.
  - Profiler: Changed: Moved UnityEngine.Profiling.Memory.Experimental.CaptureFlags API to Unity.Profiling.Memory.CaptureFlags. The Scripting API Updater can migrate existing usage of this API automatically.
  - Profiler: Changed: Moved UnityEngine.Profiling.Memory.Experimental.MemoryProfiler API to Unity.Profiling.Memory.MemoryProfiler including TakeCapture(). Consider using this API over using UnityEditor.MemoryProfiler.MemorySnapshot.RequestNewSnapshot() if you want to capture memory snapshots from code to later inspect them in the Memory Profiler Package. The casing of the member names was adjusted to CamelCase. The Scripting API Updater can migrate existing usage of this API automatically.
  - Profiler: Changed: Moved UnityEngine.Profiling.Memory.Experimental.MetaData API to Unity.Profiling.Memory.MemorySnapshotMetadata. The .content field was renamed to .Description, which will be adjusted automatically by the Script API Updater. The .plaform field was removed and all references to it will need to be manually removed.
  - Project Browser: Changed: StartNameEditingIfProjectWindowExists' now takes an extra argument indicating if the asset being created needs to be selected during name editing.
  - Scene/Game View: Added: Exposed collapsedIcon property for overlays.
  - Scene/Game View: Added: Exposed grid snapping API.
  - Scene/Game View: Added: Support for DOTS Entity picking.
  - Scene/Game View: Added: SceneView.cameraViewport property to get the scene camera content rect.
  - Scene/Game View: Added: ToolManager.RefreshAvailableTools() to rebuild the Scene View Tools Overlay.
  - Scripting: Added: CancellationToken property to UnityEngine.Application (raised on exiting playmode), Added CancellationToken property to UnityEngine.MonoBehaviour (raised on Destroy).
  - Scripting: Added: New IsUnityExtensionsInitialized method in EditorUtility. (1403928)
  - Scripting: Changed: Renamed CancellationToken properties on Application and MonoBehaviour classes to OnDestroyCancellationToken and OnExitCancellationToken.
  - Search: Added: API to register custom advanced object selectors.
  - Search: Added: New Query Builder Search API.
  - Search: Added: New Search API for search expression.
  - Search: Added: New Search API for search property database.
  - Search: Added: New Search API for search string views.
  - Search: Added: New Search API to embedded search property tables.
  - Search: Added: Various search utilities API.
  - Search: Changed: UnityEditor.Search.Query class name to prevent name collision.
  - Search: Changed: Updated PropertyDatabase to prevent opening multiple instances on the same file.
  - Serialization: Added: New API for enumerating Archive contents and organizing Archives.
  - Shadergraph: Added: New mip sampling modes for 2d textures, 2d texture arrays and 3d textures.
  - Shaders: Added: API ShaderVariantCollection.WarmUpProgressively that allows users to timeslice shader warmup across multiple frames.
  - Shaders: Added: API to control shader memory usage at runtime. ("UUM-5583")
  - SRP Core: Added: New XRSystem API to allow SRPs override the XR built-in stereo matrices.
  - Terrain: Changed: All built-in Terrain Tools can now be overridden and Detail API is publicized.
  - UI Toolkit: Added: A two-value constructor for TransformOrigin. (1392862)
  - UI Toolkit: Added: Allow the creation of a Painter2D object to use the vector graphics APIs.
  - UI Toolkit: Added: DrawText API in MeshGenerationContext class.
  - UI Toolkit: Added: DrawVectorImage API in MeshGenerationContext class.
  - UI Toolkit: Added: gradientStroke property on Painter2D class.
  - UI Toolkit: Added: NestedInteractionKind enum to ScrollView to give control over event propagation while scrolling.
  - UI Toolkit: Removed: Non-generic overload for retrieving a custom style property of type UnityEngine.Object.
  - Undo System: Added: UndoRedoEvent callback containing undo information added.
  - Undo System: Deprecated: Undo callback UndoRedoPerformed to be updated using new UndoRedoEvent callback.
  - Universal RP: Added: UniversalRenderPipeline.SingleCameraRequest. Use this as the RequestData parameter in SubmitRenderRequest to render a single camera.
  - Universal RP: Obsoleted: RenderSingleCamera is now obsolete. Please use RenderPipeline.SubmitRenderRequest with RequestData of the SingleCameraRequest type.Markdig.Syntax.Inlines.HtmlInline
    - Graphics: Camera.SubmitRenderRequests is now obsolete. Please use RenderPipeline.SubmitRenderRequest with RequestData of a supported type such as RenderPipeline.StandardRequest.
  - URP: Added: #pragma editor_sync_compilation directive to FallbackError.shader.
  - URP: Added: Batch mode support for the converters.
  - URP: Added: Changed "_USE_DRAW_PROCEDURAL" to be used only in vertex shader in Post Processing related shaders as they are not needed for fragment shaders. In result we now generate less shader variants.
  - URP: Added: CommandBuffer variable to RenderingData struct and switched all of the renderer to use that buffer instead of creating local command buffers.
  - URP: Added: Default DOTS compatible loading shader (FallbackLoading.shader).
  - URP: Added: Inspector documentation URLs to the SSAO, Decal, and Render Objects renderer features.
  - URP: Added: New Downscale and Max Iterations options for Bloom.
  - URP: Added: Renderer Features can now use the HelpURLAttribute to specify a documentation URL to be used in the inspector.
  - URP: Added: Soft Shadows filtering quality as per light option. Low, PCF 3x3 pixel area with fixed offsets which is recommended for mobile. Medium, Tent 5x5 pixel area as the default. High, Tent 7x7 pixel area.
  - URP: Added: Support for FidelityFX Super Resolution 1.0 upscaling filter.
  - URP: Added: Support for user-selected upscaling filters. Current options are automatic, bilinear, and nearest-neighbor.
  - VFX Graph: Added: New Timeline Integration which supports scrubbing.
  - VFX Graph: Added: Samples project github link button in package manager.

  Changes

  - 2D: Added support for Mipmap Streaming for Textures from the TextureImporter.
  - 2D: Removed support for Legacy Sprite-Packing based on Packing Tags.
  - 2D: Sprite.OverrideGeometry is called when a Sprite is created with SpriteMeshType.FullRect. The mesh type of the Sprite is changed to SpriteMeshType.Tight if the API is called.
  - AI: Changed so navigation components can't be added to a game object and the Navigation window is not available without the navigation package installed.
  - AI: The Navigation components and UI become available only through the AI Navigation package.
  - Android: Android SDK must have cmdline-tools component installed now. Unity will ignore tools component.
  - Android: Default gradle templates have changed significantly with new Gradle and AGP versions. Gradle templates in existing projects will have to be recreated based on new default templates when upgrading projects created with previous Unity versions.
  - Android: Implemented a new system to generate Android manifests internally.
  - Android: JDK 11 is now required to build Android apps.
  - Android: Removed Editor UI option that previously allowed you to choose between R8 and Proguard tools to minify code. The new AGP version doesn't have an option to minify using proguard, so R8 is always used instead.
  - Android: Unity uses Android Gradle Plugin 7.1.2 by default.
  - Android: Unity uses Gradle 7.2 by default.
  - Android: Upgraded to using Android NDK r23b. Default linker is now lld which fixes issues with large projects and IL2CPP.
  - Asset Import: Changed some functionalities around the Apply/Revert/Cancel button of AssetImporterEditor:Markdig.Syntax.Inlines.HtmlInline
    - The user cannot enter playmode while an asset has pending changes that would trigger a re-import.Markdig.Syntax.Inlines.HtmlInline
    - If an assembly reload occurs with pending changes on an asset, the changes are applied and the asset re-imported.Markdig.Syntax.Inlines.HtmlInline
    - Switching between importer override while an asset has pending changes doesn't ask for Apply/Revert/Cancel.Markdig.Syntax.Inlines.HtmlInline
    - Undo/Redo with modified and re-imported assets will ask for Apply/Revert/Cancel if an undo/redo would have to re-import the affected asset.
  - Asset Pipeline: Added a warning to AssetDatabase.CreateAsset() if you use it during an already-running import.
  - Build Pipeline: Added a visible warning if there are pending uncompiled script changes when you do a player build.
  - Build Pipeline: Changed so log messages from the player build system are printed to Editor.log immediately instead of at the end of the build.
  - Build Pipeline: Changed so Unity doesn't recompile editor scripts during a player build.
  - Burst: Changed the process for static readonly fields in static constructors to allow more computational budget per static field. so it doesn't fail to compile.
  - Core: Stopped the reset ofNativeArray and NativeSlice length when an instance is disposed, to ensure entry into iterators that would likely yield a disposed object exception.
  - Documentation: Added more details to documentation for material and texture export.
  - Documentation: Added pages to HDRP, URP, and Shader Graph Docs to support the new Material Variant feature.
  - Documentation: Added troubleshooting documentation for exporting camera animation only from Maya plugin.
  - Editor: Deprecated navigation-related static flags that can be set on a GameObject.
  - Editor: Disabled the CS0282 compiler warning when PlayerSettings.SuppressCommonWarnings is enabled.
  - Editor: Improved internal debuggability of corrupted pointers in GameObjects.
  - Editor: Removed Project Settings Service default entries so it is empty if no Services package are installed.
  - Editor: Replaced the prefab overlay icons with colored ones.
  - Editor: Updated the MacOS x64 Editor to require macOS 10.14.
  - GI: Removed the minimum bounces from the lighting settings GUI. The API for this property field will remain intact.
  - Graphics: Migrated the physical properties of the HDRP camera down into the core Unity camera.
  - Graphics: Removed "Supported Aspect Ratios" setting from player settings.
  - Graphics: Removed the legacy deferred lighting rendering path "light pre-pass".
  - Graphics: Specified the Volume Component editor with CustomEditorAttribute instead of VolumeComponentEditorAttribute.
  - Graphics: Updated Splash Screen logo to new Unity Logo. It is now also possible to remove the Unity Logo from a build when not using the splash screen by disabling the Show Unity Logo option in the project settings.
  - Graphics Tests: Updated the TextCore reference images to match the latest changes from TextMeshPro.
  - HDRP: Added shadow transparency (raster, ray-traced, path-traced) to the sample scene for HDRP material samples.
  - HDRP: Added support for encoded HDR cubemaps, configurable via the HDR Cubemap Encoding project setting.
  - HDRP: Added that you can edit Post Process in the default frame settings.
  - HDRP: Changed how the ambient probe is sent to the volumetric clouds trace pass.
  - HDRP: Changed the behavior the max ray length for recursive rendering to match RTR and rasterization.
  - HDRP: Changed Volumetric Lighting to use an ambient probe computed directly on the GPU to avoid latency.
  - HDRP: Changed DiffusionProfileOverride to accumulate profiles instead of replacing when interpolating at runtime.
  - HDRP: Cleared Render Graph object pools with render graph cleanup.
  - HDRP: Converted most TGA texture files to TIF to reduce the size of HDRP material samples.
  - HDRP: Disabled the "Reflect Sky" feature in the case of transparent screen space reflections for the water system.
  - HDRP: Disabled the volumetric clouds for the indoor template scenes (normal and DXR).
  - HDRP: Disabled volumetric clouds in the lens flares sample indoor scene.
  - HDRP: Disallowed "Gradient Diffusion" parameter to be negative for the "Gradient Sky".
  - HDRP: Enabled Force Alpha To Coverage when MSAA is enabled and removed the Alpha to Mask UI control.
  - HDRP: Improved the probe placement of APV when dealing with scenes that contains objects smaller than a brick.
  - HDRP: Improved the water system (Deferred, Decals, SSR, Foam, Caustics, etc.).
  - HDRP: Made improvements to the UX for the Unlit Distortion field.
  - HDRP: Made Vertical gate fit the default for physical camera.
  - HDRP: Moved internals of the sky manager to the proper Render Graph passes.
  - HDRP: Moved some custom path tracing code to the SensorSDK package.
  - HDRP: Renamed the Ambient Occlusion Volume Component to Screen Space Ambient Occlusion. (1335387)
  - HDRP: Replaced the geometry distance offset in the Probe Volume component by a minimum renderer volume threshold to ignore small objects when you place probes.
  - HDRP: Reversed the rendering order of decals that have a similar draw order value.
  - HDRP: Stopped unnecessary copy per fave to optimize real-time probe rendering.
  - HDRP: Updated Physically Based Sky documentation with more warnings about warmup cost.
  - IL2CPP: Corrected performance regression from Unity 2021.2 when script debugging is enabled.
  - IL2CPP: Removed unneeded generic method context initialization calls.
  - iOS: Changed how selection is handled if it's set before the on screen keyboard has showed up.
  - iOS: Changed IOS Xcode projects to use the il2cpp executable to compile il2cpp sources, so the Xcode doesn't compile the sources directly. This makes iOS consistent with other platforms.
  - iOS: IOS player build requires Xcode13.
  - Networking: Removed UNET LLAPI.
  - Package: Updated the Python for .NET DLL to a custom patch, based on the official version 3.0.0-rc4.
  - Package Manager: Removed the tools tab in the package manager.
  - Scene/Game View: Changed the overlay default shortcuts to avoid conflicts with Spacebar and changed the overlay activation through the burger menu to favor discovery of the Overlay menu.
  - Scripting: Added that Unity suggests that you install Visual Studio 2022 update 1 instead of Visual Studio 2019 when you install on Windows.
  - Scripting: Fixed so Unity doesn't synchronously recompile scripts in batchmode when you change settings that affect script compilation.
  - Search: Hid the Default group in the search view (default items only show up in the All group).
  - Serialization: Changed alignment in Resource Image transfer function from 4 to 16 bytes to improve patching results on some platforms.
  - Services: Renamed Unity Analytics to Legacy Analytics to aid deprecation of the Analytics package.
  - Services: Updated the discoverability of services packages in the Package Manager, all the Unity Gaming Services.
  - Shadergraph: Renamed the Shader Graph Texel Size node to Texture Size and added two additional output ports that output the texel and texture size.
  - SRP Core: Allow VolumeComponent BoolParameter UI to display enabled/disabled dropdown instead of checkboxes.
  - Text: Renamed the runtime default resource Arial.ttf to LegacyRuntime.tff.
  - UI Toolkit: Changed default Inspectors to use the UI Toolkit by default.
  - Universal RP: Messages regarding reducing resolution for additional punctual lights are now only displayed in debug builds. ("UUM-10166")
  - Universal RP: SSAO: The final After Opaque passes have now been merged with the last blur pass.
  - Universal RP: SSAO: The samples field has been changed to a dropdown: High (12 samples), Medium (8 samples) and Low (4 samples).
  - Universal Windows Platform: Moved the backup folder so it's next to the build output folder instead of nested inside.
  - Universal Windows Platform: The following defines are no longer defined when compiling Cpp plugins through Visual Studio (none of them were defined in Executable Only build mode): WINDOWS_UWP, UNITY_UWP, UNITY_WSA_10_0, UNITY_WSA, UNITY_WINRT, PLATFORM_WINRT.
  - Universal Windows Platform: AppxContentGroupMap.xml is now it is part of the "Unity Data" project if generated.
  - URP: Adapted URP to use Blitter interface for full screen draws.Markdig.Syntax.Inlines.HtmlInline
    - Removed DRAW_PRCEDURAL variant for shaders.Markdig.Syntax.Inlines.HtmlInline
    - Factored out full screen blits to utility function.Markdig.Syntax.Inlines.HtmlInline
    - Updated terrain SSAO tests for DX11 and DX12 by using the reference images from Vulkan.
  - URP: Added new UI/UX for the converter framework.
  - URP: Avoid using Depth32Stencil8 format on Android.
  - URP: Changed PostProcessPass to internal visibility since it's in internal namespace.
  - URP: Integrated Foveated Rendering into URP for supported platforms.
  - URP: Merged the MaterialError.shader and FallbackError.shader.
  - URP: Moved the Shader Variant Log Level from the URP Asset to URP Global Settings.
  - URP: Re-added the menu button so you can convert selected materials.
  - URP: Removed low quality light fade for lighting consistency on both desktop and mobile.
  - URP: Removed SHADER_QUALITY_LOW, SHADER_QUALITY_MEDIUM, SHADER_QUALITY_HIGH from shaders so everything is SHADER_QUALITY_HIGH.
  - URP: Removed skipIterations from Bloom settings. It has now been replaced with maxIterations.
  - URP: Removed the name input for the SSAO and Screen Space Shadows renderer features.
  - URP: Removed SHADER_API_MOBILE from shaders in cases where it affected quality.
  - URP: Removed SHADER_HINT_NICE_QUALITY from shaders.
  - URP: Reverted behavior of intermediate texture .
  - URP: Updated the "Add Renderer Feature" menu to support filtering.
  - UTR: Changed to run playmode tests on ios on macOS 10.14.
  - Version Control: Moved Plastic Package settings to the Unity Project Settings window.Markdig.Syntax.Inlines.HtmlInline
    - Refined styling for the Updating Workplace success state.Markdig.Syntax.Inlines.HtmlInline
    - Updated the text for the empty state and the overview bar.Markdig.Syntax.Inlines.HtmlInline
    - Removed thr Incoming Changes notification from empty state.Markdig.Syntax.Inlines.HtmlInline
    - Updated the text for Forced Checkout option.Markdig.Syntax.Inlines.HtmlInline
    - Refined the status overlay icons.Markdig.Syntax.Inlines.HtmlInline
    - Updated the refresh icon on the toolbar.Markdig.Syntax.Inlines.HtmlInline
    - Updated the texts for empty checkin message dialog.
  - Version Control: Updated file overlay icon size to adapt to project window zoom level and updated the styling of number of items in a category in Gluon incoming changes view.
  - Version Control: Updated the checkin comment box to keep the last comment after a checkin error.
  - XR: Added warning if stereo projection matrices are accessed before they have been set.
  - XR: Removed deprecated package com.unity.xr.arkit-face-tracking from AR Feature Set. The APIs from ARKit Face Tracking package has been moved to ARKit package.
  - XR: The Oculus XR Plugin package has been updated to 3.2.1 with support for Quest Pro.

  Fixes

  - 2D: Added 2D Triangle default asset to replace missing place holder. (DANB-125)
  - 2D: Allowed user MaterialPropertyBlock values for secondary textures to override values declared in the Texture asset. ("1398241")
  - 2D: Fixed an issue where the Sprite field in the SpriteRenderer would not be assigned after creating Sprite keys in an Animation Clip. (1396423)
  - 2D: Fixed an issue with sprites where negative x or y scaling would cause normal maps to be flipped when using the 2D renderer. ("1339571")
  - 2D: Fixed asset previews for Tilemap Prefabs by not stripping away the Grid Component when generating the asset preview. ("UUM-2503")
  - 2D: Fixed case of duplicate instantiated GameObjects from Tiles on Tilemap Prefabs when instantiating the Tilemap Prefabs. ("UUM-1671")
  - 2D: Fixed case where Importer generated inconsistent result warning is displayed when importing Texture2D with AlphaSource == None && GeneratePhysicsShape == true. ("1382730")
  - 2D: Fixed case where Inconsistent result warning when reimporting Sprite by calling Sprite.overrideGeometry(). ("1389297")
  - 2D: Fixed case where SpriteAtlasImporterInspector and SpriteAtlasInspector causes errors when entering play mode. (1381553)
  - 2D: Fixed case where StackOverflowException is thrown when packing Sprite Atlas. ("1360667")
  - 2D: Fixed error for ITilemap.Finalize.
  - 2D: Fixed memory leak with the TilemapCollider2D when used with a CompositeCollider2D. (UUM-15822)
  - 2D: Fixed regression where GameObjects are not instantiated by Tiles when the Tilemap is not active. ("UUM-14293")
  - 2D: Fixed SortingGroup status when a Renderer is disabled, reparented while disabled and enabled. ("1390888")
  - 2D: Fixed undesired behaviour when chaging SpriteRenderer's drawmode property via SerializedProperty. (1376189)
  - 2D: Prevented the use of GameObjects with HideFlags.NotEditable as the Active Tilemap for GridBrush. ("1416421")
  - 2D: Removed the border value in Square default asset. ("1397357")
  - 2D: When a recursive depth from instantiating GameObjects using a Tilemap Tile reaches a threshold, an error message is now logged and the recursive loop is stopped in the Editor or in Development Players. ("UUM-8380")
  - AI: Colliders set as trigger are excluded from NavMesh generation. ("UUM-10109")
  - AI: Patches of the generated NavMesh were sometimes getting the area type from distant objects below due to their connection through a sloped wall. ("UUM-3457")
  - Android: Added proper support for Stylus in the new input system. Previously Pen was reported as mouse, now it should be reported as Pen.
  - Android: Allowed any file to be selected as keystore. ("1398997")
  - Android: Changed boost documentation and timing values in the simulator to reflect the boost mode timing of 10s instead of the previous 15 seconds as it changes on the driver side.
  - Android: Changed bottleneck profiler colors to reflect warning states correctly.
  - Android: Fixed a potential app store validation issue related to a QueryIntentActivities() call when initializing the engine.
  - Android: Fixed an intermittent issue with manual lifetime tests failing.
  - Android: Fixed an issue with scaler not being initialized with settings from the Editor UI properly when using profiles.
  - Android: Fixed an issue with scaler types getting stripped out when building with IL2CPP.
  - Android: Fixed an issue with the test provider and settings showing up in Project Settings.
  - Android: Fixed Android build failure when Windows Display Language is set to Thai. (1413080)
  - Android: Fixed crash if Java proxy is invoked at the same time as Unity is quit. (UUM-15968)
  - Android: Fixed error 'Source directory '....'. is not a directory when Symlink Sources option is on. ("1379917")
  - Android: Fixed frequency change error case (e.g. when boost is activated). Does not retry every frame. Manual retry is required.
  - Android: Fixed issue whereby executing an Android SDK tool command would fail with a missing java error. Additionally added printed environment variables to help identify/debug similar issues. (UUM-2106)
  - Android: Fixed memory leak in WebCamTexture when using OpenGL ES. ("1319089")
  - Android: Fixed opening TouchScreenKeyboard when one already exists with different parameters. Now it reopens the keyboard if parameters are different. ("1381845")
  - Android: Fixed overhead of memory allocations in the Vulkan backend for allocation sizes between 128kB and 1024kB. (UUM-5966)
  - Android: Fixed ReadPixels for RGBA half formats and realtime GI on Mali using ES 2.0. (1396036)
  - Android: Fixed regression where TouchScreenKeyboard.Open() was not opening. ("UUM-2112")
  - Android: Fixed simulator where temperature level and trend would not get updated when thermal action was updated.
  - Android: Fixed so that the AAB size warning in Unity editor displays base module size and total install size separately when those sizes are different. (1361085)
  - Android: Fixed the long compile times in shader warmup issue on Android with OpenGL EX by using fixed instancing batch size on PowerVR GPU. ("UUM-739")
  - Android: Fixed the new Input System's Keyboard class so it treats Button Start button clicks as Key.Enter.
  - Android: Fixed the new Input System's Keyboard class so it treats DPad Center button clicks as Key.Enter. ("1361325")
  - Android: Fixed Screen.safeArea calculations. (UUM-3972)
  - Android: Removed styles*.xml files from launcher module, since styles.xml are only used by unityLibrary AndroidManifest.xml.
  - Android: Updated Gradle build configuration to include hidden files and folders into APK, when Gradle builds. ("1382574")
  - Android: Workaround for crash for many PowerVR based devices. ("UUM-7782")
  - Animation: Added back old method signature for backward compatibility. ("1366425")
  - Animation: Enabled supporting clips with animation bindings on enum inside structs. ("UUM-11386")
  - Animation: Fixed a bug where so when you rename an event function name, it keeps the event's string value. ("1423966")
  - Animation: Fixed an issue when creating events inside events using animation legacy, crashing the application. ("1390997")
  - Animation: Fixed Animation Window workflows not working for nested avatar root transforms. ("1395685")
  - Animation: Fixed bug where clip with only one pose computed a speed value of NaN. ("1410826")
  - Animation: Fixed modifying property value fields in the animation window when recording candidates. ("1382193")
  - Animation: Fixed multiple errors are thrown when resizing the Inspector while the Texture Sheet Animation Module is expanded. ("1409813")
  - Animation: Fixed the ArgumentOutOfRange exception when you select a transition that leads to an exit state in the Animator Controller. (1393085)
  - Animation: Fixed AnimationClip.EnsureQuaternionContinuity on clips with keyframes too close together. ("1365995")
  - Animation: Prevented generating Prefab overrides when you animate a value on a Prefab instance. ("1279845")
  - Animation: Stopped negative discrete integer values being removed from the animation clip. ("1395978")
  - Asset Bundles: Fixed issue where empty folders remain in the cache. ("UUM-15702")
  - Asset Bundles: Fixed performance caused by overreading LZMA AssetBundles when they are embedded in a larger file. ("1332021")
  - Asset Bundles: Refactored out the requiresTextureCompression boolean flag.Markdig.Syntax.Inlines.HtmlInline The texture compression setting is now set internally from either the existing EditorPrefs setting kCompressTexturesOnImport or checking if the BuildPipeline build is in progress. (UUM-3653)
  - Asset Import: Amended documentation of OnPostprocessMaterial, OnPreprocessMaterialDescription and ModelImporter.materialImportMode to make it clear in which case each AssetPostprocessor is used. ("1360614")
  - Asset Import: AssetImportContext.AddObjectToAssets does not work in AssetPostprocessor methods.
  - Asset Import: Changed so FBX files with a broken skeleton do not crash the importer. ("1384314")
  - Asset Import: Fixed ScriptedImporters so it doesn't leak Allocator.Temp allocated memory when you use it on the asset import worker.
  - Asset Import: Fixed an issue where animationClips references can be lost when adding and renaming clips in the ModelImporter inspector. ("1359229")
  - Asset Import: Fixed an issue where the ModelImporter would needlessly re-import when referencing a texture outside of its Textures folder and this texture was modified. ("1381009")
  - Asset Import: Fixed intermittent Accelerator client disconnect on Linux caused by unhandled error codes. ("1385441")
  - Asset Import: Fixed issue at import time where a failing ScriptedImporter could leak GameObjects in the active scene. (1334618)
  - Asset Import: Fixed multiple issues with the Apply/Revert/Cancel popup when you edit importer settings. (1356748)
  - Asset Import: Fixed out of bounds exception on empty array access when importing SpeedTree billboards with no mesh data. (UUM-8950)
  - Asset Import: Fixed rare missing texture dependency on Models when the texture is in an embedded package. (1383474)
  - Asset Import: Fixed so that if you select Apply after you edit the ScriptedImporterEditor settings when you use serialized files in ScriptedImporter triggers reimport. (1422966)
  - Asset Import: Fixed so that newly created GameObject Tags are serialized to TagManager.asset file. ("1396727")
  - Asset Import: Fixed the Inspector Model Preview so that orientation isn't reversed when you enable Bake Axis Conversion. ("1364821")
  - Asset Import: Fixed the missing Update referenced clips button in the Model Importer. (1423207)
  - Asset Import: Fixed OnPostprocessGameObjectWithUserProperties so it's called when you use extraUserProperties. ("1394085")
  - Asset Import: Made the accelerator cache server respect the upload and download settings in Project settings when you use Parallel Import. ("1372865")
  - Asset Import: Textures passed to AssetPostprocessor methods have no name.
  - Asset Pipeline: Asset preview thumbnails in the Editor's project window would sometimes be missing reflection probe lighting, this has been fixed and re-baking reflection probes (after making some change, such as to the material) will update thumbnails. ("UUM-1820")
  - Asset Pipeline: Changed the  ModelImporterPostProcessor to use new API to query importer type efficiently. (1404202)
  - Asset Pipeline: Changed the Default Shader to depend on the GUID and fileID of the Shader rather than on the name of the shader. ("1309217")
  - Asset Pipeline: Fixed learn more online documentation links for asset import workers and Unity Accelerator in the editor UI, so they target the currently loaded version of Unity. ("1395653")
  - Asset Pipeline: Fixed a bug where subsequent builds or manually-selected script only builds could result in incorrect code stripping.
  - Asset Pipeline: Fixed an issue where calling Resources.Load() during [InitializeOnLoad] could affect the result of calling it again in a postprocess callback. ("1362489")
  - Asset Pipeline: Fixed an issue where calling ClearImporterOverride() could cause unexpected value changes in the original importer. (1340382)
  - Asset Pipeline: Fixed an issue where generating previews of some prefabs could raise an 'unknown importer' error in the console. ("1397386")
  - Asset Pipeline: Fixed an issue where renaming a prefab or prefab variant with unsaved changes would discard the changes. (1333623)
  - Asset Pipeline: Fixed an issue where scripts are not recompiled if changes are made while the Build Settings Build folder select window is open. ("1337602")
  - Asset Pipeline: Fixed an issue where the asset database might fail to detect that custom postprocessing of assets had produced an infinite loop during project import. ("1378193")
  - Asset Pipeline: Fixed an issue where the Inspector could incorrectly prompt users to fix the main object name of PlayerSettings. ("1363626")
  - Asset Pipeline: Fixed crash that could happen when mono script is used before mono scripts are registered. (1396595)
  - Asset Pipeline: Fixed crash where "VirtualArtifacts/Primary/ could not be found" message would appear when reimporting all assets in project. (1376593)
  - Asset Pipeline: Fixed deadlock in accelerator client when cancelling request during '-quit'. ("UUM-4004")
  - Asset Pipeline: Fixed issue when either the SourceAssetDB or the ArtifactDB could not be deleted and the project would never open. (1388489)
  - Asset Pipeline: Fixed issue with material preview not updating when a shader is modified. (1371756)
  - Asset Pipeline: Fixed missing OnWillCreateAsset callbacks for scenes and assets generated from templates. ("1163684")
  - Asset Pipeline: Fixed of tests failing due to parallel importer.
  - Asset Pipeline: Fixed regression for enter play mode when testing with the Lost Crypt (Fix 1 out of 3).
  - Asset Pipeline: Fixed so the directory monitor is used on Startup. (1403080)
  - Asset Pipeline: Fixed spritesheet and other previews not being updated in project browser sometimes. (UUM-2811)
  - Asset Pipeline: Improved the speed of PluginManager::RefreshPlugins and MonoManager::InitializeScripts at startup. (1403626)
  - Asset Pipeline: Optimized Project Startup time. (1403075)
  - Asset Pipeline: Re-factored the load asset management sub-system to fix a scalability issue that caused the import time to increase when a large scene with many objects was loaded. ("1371439", 1410544)
  - Asset Pipeline: Reduced time taken to EnterPlayMode by more selectively clearing AssetDatabase's resolver cache. ("1355830")
  - Asset Pipeline: Removed the option to Recompile after finished playing and added a new option to  only auto refresh outside playmode. ("1325047")
  - Audio: Added new functions to prevent cycle of enum value -Markdig.Syntax.Inlines.HtmlEntityInline ToString -Markdig.Syntax.Inlines.HtmlEntityInline enum value in the Audio Importer API. (1379835)
  - Audio: Fixed a crash when passing a null argument to AudioMixer.SetFloat. ("1375980")
  - Audio: Fixed Audio Clip Import Settings not getting saved when the "Override for Dedicated Server" setting is enabled. ("UUM-399")
  - Audio: Fixed audio mixer groups not visible from the packages. ("UUM-369")
  - Audio: Fixed AudioClipPlayable.IsDone is false when AudioClipPlayable.Seek is used to reset the time. ("UUM-398")
  - Audio: Fixed issue with Audio Echo Filter component Delay value not being able to be keyframed when animating it in the Animation Window. ("1364384")
  - Audio: Fixed the inconsistency warning messages when you reimport audio files with AAC and Vorbis compression formats. ("1398220")
  - Audio: Fixed unexpected output from OnAudioFilterRead when the audio source is stopped and the 'spatialize' property is enabled. ("UUM-6318")
  - Audio: Updated the doc for streaming and compressed audio clips within DownloadHandledAudioClip that streaming supersedes audioclip compression. ("1278567")
  - Bug Reporter: Fixed the crash reporter text button when the screen is scaled. ("1415600")
  - Build Pipeline: Fixed a regression introduced that prevented referencing built-in data. (1393827)
  - Build Pipeline: Fixed an Editor crash when you open it with -standaloneBuildSubtarget Server CLI.
  - Build Pipeline: Fixed an issue causing erroneous warnings during the build pipeline. ("1358453")
  - Build Pipeline: Fixed edge case passing in missing or deleted objects could crash the Editor during the build.
  - Build Pipeline: Fixed edge case where built scenes could pull in unused data when components are hide flagged DontSaveInBuild. ("1287614")
  - Build Pipeline: Fixed edge case where isDebugBuild would not revert to true after the build.
  - Build Pipeline: Fixed errors about Microphone or Camera usage failing mac player builds not showing in the editor console correctly. ("1422084")
  - Build Pipeline: Fixed stack overflow crash when Builds with Resource folders contains very large prefabs or models.
  - Build Pipeline: Fixed static batching sorting to ensure deterministic build results. (UUM-11427)
  - Build Pipeline: Fixed PlayerBuildInterface.ExtraTypesProvider API not working.
  - Build System: Added a back deadlock workaround for bee_backend/unix.
  - Build System: Fixed ProjectFile dependency breakage for source code customers.
  - Burst: Added workaround for "cannot dlopen until fork() handlers have completed" issue seen in macOS 12.3.
  - Burst: Burst will now correctly handle projects with paths containing semi-colon (;) characters. (UUM-8322)
  - Burst: Fixed a bug that manifested when using IAP in UWP builds with Burst - we were scanning the assembly hierarchy too deep for Bursted types, which led to an AssemblyResolutionException.
  - Burst: Fixed a bug with Span and ReadOnlySpan types where if the indices used were not already 32-bit signed integers, an internal compiler error would occur if running with safety checks enabled.
  - Burst: Fixed a compiler crash if users used __refvalue or __arglist in Burst. Neither of these are supported, but now we will nicely tell you via a compiler error that they aren't supported.
  - Burst: Fixed a compiler error when trying to acquire the function pointer of a generic function from Bursted code.
  - Burst: Fixed a crash when you used a function only through a C# function pointer.
  - Burst: Fixed a really convoluted bug that could manifest in Burst returning out of date cached libraries, which would manifest as random exceptions in Burst jobs/function-pointers (users deleting the BurstCache would workaround the bug).
  - Burst: Fixed a regression where out parameters of C# 9.0 function pointers weren't working in Burst.
  - Burst: Fixed bug in static constructor ordering in the presence of indirect dependencies between static constructors (i.e. static constructor -Markdig.Syntax.Inlines.HtmlEntityInline static method -Markdig.Syntax.Inlines.HtmlEntityInline static constructor) that could result in a runtime crash.
  - Burst: Fixed bug where disabling native debug mode, after having previously enabled it in the same editor session, didn't in fact disable native debug mode.
  - Burst: Fixed Burst in macOS Standalone Xcode player builds.
  - Burst: Fixed burst inspector sometimes stalling during loading for script reloads.
  - Burst: Fixed compiler crash when the only usage of a static field was in a formatted exception string.
  - Burst: Fixed compiler crash when trying to dynamically call BurstCompiler.CompileFunctionPointer  in Burst-compiled code.
  - Burst: Fixed hashing bug that could occur when a function pointer type is used in a method parameter.
  - Burst: Fixed hashing error that could occur in the presence of multiple synthesized explicit interface implementations with the same name and signature.
  - Burst: Fixed internal compiler error when encountering a calli with closed generics.
  - Burst: Fixed some ARM branch instructions not being processed as such.
  - Burst: Whitespace changes in ILPP'd assemblies would not be detected.
  - Core: Asset import workers will no longer inherit open handles from the main editor causing trouble rebinding network sockets. (UUM-939)
  - Core: Changed player auto connect so it only attempt to connect to the editor once. (1268896)
  - Core: Fixed issue where player did not multicast when BuildOptions.ConnectToHost was used. (1248301)
  - Core: Improved logging when connecting thru USB to device that do not have running player. ("1297201")
  - Core: Removed disposed NativeArray and NativeSlice check when you iterate or access properties like Length due to a performance regression when collections checks are enabled.
  - Documentation: Added documentation for UWP.UserBuildSettings and all its members. (1389305)
  - Documentation: Fixed misleading information for ModifiableContactPair.SetPoint().
  - Documentation: Updated HDRP raytracing docs to clarify that the new RenderMesh API is not compatible with raytracing.
  - DX12: Fixed crash that can occur when you call ComputeBuffer.GetData() with a non zero computeBufferStartIndex parameter. (1424644)
  - DX12: Fixed for crash when an upload subupdates buffer was assigned to a compute shader as a UAV. (1425081)
  - Editor: Added a key shortcut to capture frame in RenderDoc. (1427034)
  - Editor: Added a new Edit button for Light Probe UI. ("UUM-919")
  - Editor: Added missing color formats to the RenderTexture inspector. (1353837)
  - Editor: Added on-hover tooltips to the Project Settings  options. ("1264509")
  - Editor: Added retina support for the Editor Launch Screen.
  - Editor: Added the option to set something as the first child of the root. ("1413568")
  - Editor: Added warning log when the size of a Sprite in a Secondary Texture used in a Sprite Atlas does not match its size in the Main Texture. ("UUM-11164")
  - Editor: Allow parsing of expression with explicit AND operator in the Query Builder. ("1394738")
  - Editor: Allowed you to change the fullscreen/maximization state in the on play behavior menu when PlayMode is paused.
  - Editor: Blocked the instantiation of variants with a broken or missing prefab parent. ("1395769")
  - Editor: Changed a label in the Multi-Display dropdown. (1396139)
  - Editor: Changed so that FBX files that match the legacy  @ naming convention are no longer added as referenced clips when the AnimationType is not 'legacy'. ("1401419")
  - Editor: Changed the constrain proportions scale toggle so you can set it using GetConstrainProportions() and SetConstrainProportions() from TransformUtils.
  - Editor: Changed the light map exposure panel icon from "LS" to the exposure icon.
  - Editor: Changed the World Transform copy and paste context menu name in the Inspector. ("1399817")
  - Editor: Enabled pasting individual Gradients and Colors to a MinMaxGradient field. ("1391971")
  - Editor: Enabling shader keyword pre-filtering so that build process does not have to enumerate through full shader variant space. This fixes the issue of URP builds even with warm shader cache taking really long time. This fix does not reduce the time spent on actually compiling shaders. ("UUM-3711")
  - Editor: Ensure that if a searchquery with a tableConfig and no columns creates a default table view. ("1379874")
  - Editor: Ensured that the ShortcutManager has access to all shortcuts on the first domain reload. This means if you register a callback in an [InitializeOnLoad] function, it doesn't break the shortcut manager display. ("1384276")
  - Editor: Fixed 'Cyclic Prefab nesting not supported' error to only show when relevant. ("1395865")
  - Editor: Fixed a crash that occurs when disconnecting and reconnecting a monitor when the editor is in full screen fullscreen on macOS. ("1356560")
  - Editor: Fixed a crash when importing an invalid FBX file in which the vertex color wedge mapping mode is ill defined. ("1394981")
  - Editor: Fixed a crash when stop a playable director and evaluating at the same time in a notification output. ("UUM-14640")
  - Editor: Fixed a crash when using URP on some Adreno 6xx devices with shaders that use clip(). ("UUM-4367")
  - Editor: Fixed a scaling issue in device simulator when the view is unmaximized. (1330233)
  - Editor: Fixed Add Component not refreshing objects used to render the Selection Outline in the SceneView. (1384736)
  - Editor: Fixed an issue causing C# serializable generic types to incorrectly contain data for editor only fields in serialized data when in a player context.
  - Editor: Fixed an issue in the Editor so newly selected mouse cursors set via script show even when you don't move the mouse. ("1396030")
  - Editor: Fixed an issue where certain properties could not be excluded in the TextureImporterInspector. ("UUM-3787")
  - Editor: Fixed an issue where TextureImporter.GetPlatformTextureSettings would not perform fix-up on the platform string argument correctly. ("UUM-15361")
  - Editor: Fixed bug where selecting the search field would not deselect the GameObject rename overlay. ("1078881")
  - Editor: Fixed case where Editor would crash when a selected renderer was deleted. ("UUM-3249")
  - Editor: Fixed checkbox selection that is moving around if the number of dependencies is more than 4000. This also fixes a double scrollbar. (1383757)
  - Editor: Fixed ColorUtility darkblue to  match the W3 standard, which should be #00008B. ("1408463")
  - Editor: Fixed constrain proportions scale to respect selected keyframe in the animation window.
  - Editor: Fixed crash in standalone profiler during shutdown. ("UUM-13932")
  - Editor: Fixed crash when calling EditorUtility.UnloadUnusedAssetsImmediate(false). ("UUM-11648")
  - Editor: Fixed crash with TilemapCollider2D when used with a CompositeCollider2D and a Tile with no Sprite with Collider Type Sprite is set. (UUM-15912)
  - Editor: Fixed custom MenuItems to update when the priority is changed. ("1182282")
  - Editor: Fixed deadlock scenario in shader compiler. (UUM-14040)
  - Editor: Fixed diagnostic switches can not be set using command line arguments. (UUM-10269)
  - Editor: Fixed dragging with hot key pressed on linux. ("UUM-1601")
  - Editor: Fixed EditorUtility.DisplayDialog layout after showing dialog with a long text. ("UUM-9447")
  - Editor: Fixed error message referring to the wrong name of a function. (1415893)
  - Editor: Fixed exception incorrectly reporting object already in pool when equal instances of classes implementing IEquatableMarkdig.Syntax.Inlines.HtmlEntityInlineTMarkdig.Syntax.Inlines.HtmlEntityInline are released to ObjectPool. (UUM-8083)
  - Editor: Fixed exceptions that arose due to editing multiple reorderable lists in multiple visible IMGUI inspectors. ("1399445")
  - Editor: Fixed exceptions when assigning array size via array size field in ReorderableList inspector control.
  - Editor: Fixed exceptions when deleting array elements via keyboard.
  - Editor: Fixed floating windows becoming inaccessible on Windows when monitor setup changes. ("1364970")
  - Editor: Fixed focus on the search field when opening the settings window. (1407464)
  - Editor: Fixed fullscreen play mode UI scaling incorrectly when changing the size or focusing the editor's suppressed non-fullscreen game view. (1386415)
  - Editor: Fixed GameObjectChangeTracker not being able to detect GameObject sibling order change.
  - Editor: Fixed GetCachedIcon returning the incorrect icon in dark editor style when a custom icon was assigned to an asset that contained a dark version with the d_ prefix.
  - Editor: Fixed gizmo rendering of a selected area in a Hexagonal Grid with a non-zero Z position. (UUM-11308)
  - Editor: Fixed handling of exceptions in CreateGUI that could cause the window to not open correctly. ("1342327")
  - Editor: Fixed HDR color values are rounded when changing intensity. ("1372353")
  - Editor: Fixed incorrect DPI scale on startup causing game view icons to be pixelated at higher scale levels. (1334355)
  - Editor: Fixed inspector and documentation to reflect intended behavior. ("UUM-2392")
  - Editor: Fixed instabilities in Unity.IntegrationTests.Builds.AssetBundleBuildLegactyReportTest tests. (1401332)
  - Editor: Fixed issue where IndexOutOfRangeException was thrown when inspecting an array of ExposedReferences. ("1384423")
  - Editor: Fixed lighting in a Material's asset thumbnail to be consistent before and after saving the scene. ("1368973")
  - Editor: Fixed LODGroup editor not updating immediately when changed. ("UUM-5815")
  - Editor: Fixed lost references to AnimationClips when the ModelImporter clips settings are modified for the first time. ("UUM-2203")
  - Editor: Fixed material duplication when source is a variant. ("1392058")
  - Editor: Fixed mesh Properties... display a blank window for built-in primitive Objects. ("1379780")
  - Editor: Fixed mouse offset for dragging elements to the inspector on Linux. ("UUM-1568")
  - Editor: Fixed null reference exception in the FreeCamera component when there is no keyboard. (UUM-17801)
  - Editor: Fixed NullReferenceException is thrown in Play mode when GO Properties window is open and the GO has certain Canvas components. ("1371833")
  - Editor: Fixed Object Selector not changing position when called from another window. ("1407423")
  - Editor: Fixed occasional crash when loading TIFFs with bad thumbnail tags. ("UUM-3783")
  - Editor: Fixed OnDrawGizmos is not called on child GOs to an empty parent. (1394023)
  - Editor: Fixed performance issue for looping small clip with root motion extraction. ("UUM-6515")
  - Editor: Fixed ReorderableList creating a small Prefab override indicator dot below the header when its 'displayHeader' is false. ("1396770")
  - Editor: Fixed ReorderableList drawing element GUI incorrectly when the list doesn't span across all window width. (1424600)
  - Editor: Fixed ReorderableList errors when drawing recursive editors. ("1374418")
  - Editor: Fixed ReorderableList not executing OnChangedCallback when performing context menu actions. (1381005)
  - Editor: Fixed right click paste not working in package manager. ("UUM-2304")
  - Editor: Fixed save as scene template with proper naming. ("1385544")
  - Editor: Fixed scripted importer registration errors, when changing platform. ("UUM-14062")
  - Editor: Fixed selection outline rendering when using Mask Interaction in Sprites, Lines, Trails or Particle Systems. ("1376886")
  - Editor: Fixed Selection Outline toggle disabling Selection Wire. ("1379390")
  - Editor: Fixed shortcut-manager init if new events are registered in domain reload.
  - Editor: Fixed side panel and graph divider getting stuck when the drag was started to the left of the divider. ("1397509")
  - Editor: Fixed so it's possible to set text-overflow: ellipsis; in the UI Builder. ("1393109")
  - Editor: Fixed so that all GameObjects respect Default Parent. ("1385025")
  - Editor: Fixed so that changes to Transform, Position, and Rotation sets GUI.changed = true;. ("1396280")
  - Editor: Fixed so that penstatus flags (in old input system) are set properly for pen buttons on macOS. (1380493)
  - Editor: Fixed so that when you type transform expressions like /=3 acts on the original values instead of restting the value to 0.Markdig.Syntax.Inlines.HtmlInline
    - Fixed so initial values for a field are stored when starting edit instead of being applied on top of the current value. ("1399184")
  - Editor: Fixed so the Editor's GameView window doesn't flicker when you change OnDemandRendering.renderFrameInterval. ("1274200")
  - Editor: Fixed so when you rename the first animator parameter, it stops renaming when you click on search field above it. ("1406899")
  - Editor: Fixed spurious assembly file locking so it doesn't prevent rebuilds after you use the right click Open source code on a test in the Test Runner window.
  - Editor: Fixed the appearance of the help text when the autocomplete pop-up's width is too small. ("1399720")
  - Editor: Fixed the bake diffuse lighting not affeced by the diffuse color. (1425814)
  - Editor: Fixed the help link for scene assets. ("1408303")
  - Editor: Fixed the loading of 16-bit TIFF that contains more than 4 channels (usually created with Photoshop). ("1404047")
  - Editor: Fixed the package manager Import by git dropdown size to be consistent. ("1394785")
  - Editor: Fixed the validation of the Application Identifier.
  - Editor: Fixed to avoid freeze when Inspector recursively expands a field that references a cyclical graph of SerializeReference objects. ("1180716")
  - Editor: Fixed tooltips to close automatically when the mouse moves out from the rect of the UI part that triggered them.
  - Editor: Fixed UI frame captures not being cleared by the profiler which could create a gradual memory increase in the Editor when using the Profiler. ("1334548")
  - Editor: Fixed Unity crashes in batch mode when using -vcsMode Perforce. ("UUM-17597")
  - Editor: Fixed utility windows opening behind popup windows by moving them to the same window level. (1370754)
  - Editor: Fixed wrong color space conversion with Materials albedo color when the Material Import Mode is 'Import via MaterialDescription'. ("1381764")
  - Editor: Fixed EditorGUILayout.MaskField to return the correct values regardless of if the dropdown list was closed when selecting options. ("1390405")
  - Editor: Frame Debugger: Fixed an issue where depth and shadow maps were not displayed in HDRP projects. (UUM-4101)
  - Editor: Frame Debugger: Fixed an issue where the Depth buffer was incorrectly displayed after selecting DrawOpaqueObjects event. ("UUM-4087")
  - Editor: Frame Debugger: Fixed an issue where the output image would flicker when looking at DrawMesh events in URP Deferred. ("UUM-4102")
  - Editor: Frame Debugger: Fixed an issue where the window would constantly refresh when debugging a remote device. ("UUM-4096")
  - Editor: GetMaterialParentFromFile returns null for material variants stored as sub assets. (1383366)
  - Editor: Hid Copy/Paste for ReorderableList controls that contain SerializedReferences. (1387561)
  - Editor: Hid fhe Open button for Scene Template Asset because that function doesn't exist. ("1400333")
  - Editor: Made the BuilderCanvasStyleControls the same size as the icon they contain. (1425858)
  - Editor: New folders can be created using Ctrl/CMD+Shift+N shortcut when Project window is focused. (1264819)
  - Editor: Prevented a crash when material variants have a circular dependency. ("1387426")
  - Editor: Prevented incorrect undo actions when you select Particle Systems via the Inspector thumbnail.
  - Editor: Reduced the amount of open files when you download from Accelerator. (1389792)
  - Editor: Reenable editor window close test on linux. (UUM-1593)
  - Editor: Reimplemented the RecompileAfterFinishedPlaying option. ("UUM-16168")
  - Editor: Removed TextCore related entries in the UI Builder test project asmdef.
  - Editor: Removed unneeded dialog when renaming open scenes. ("1386815")
  - Editor: Resolvesd instabilities on two tests and managed the initialization process of perforce (p4d) so that tests aren't run until it's completely initialiized. (1411732)
  - Editor: Right clicking on a rotation component will allow the user to copy value and property path of the proper sub property. (1338677)
  - Editor: Stopped Game/Scene view window from flickering on resizing when Graphics API is set to OpenGL. ("1238391")
  - Editor: Updated the drag sensitivity of DelayedIntField method. ("UUM-1347")
  - Editor: Windows: you can now switch to Editor Launch Screen using alt+tab.
  - Editor: [SpeedTree] Fixed an issue where an ExtraTexture texture was marked sRGB (Color Data) when imported with a SpeedTree asset. (UUM-10912)
  - Editor: MenuItems support paths with double separators. ("1393774")
  - EmbeddedLinux: Query EGL to get the correct max supported VSync value.
  - GI: Added proper clamping of Lightmap Streaming Priority in Player Settings window. ("UUM-10016")
  - GI: Fixed a bug causing phantom probe tetrahedra to be displayed after deleting probe groups and selecting a probe group centered at the origin. ("1377421")
  - GI: Fixed a bug in the progressive lightmapper Gaussian filter that caused burn out and haloed when you filtered lightmaps.Markdig.Syntax.Inlines.HtmlInline
    - Fixed incorrect Gaussian weights with analytically derived values so that the filter behaves correctly. ("1286955")
  - GI: Fixed a bug where the environment reflections is not correctly set when exiting the prefab editor mode.
  - GI: Fixed a crash on Radeon::DenoiserContext::DenoiseGPUBuffer when you bake Global Illumination and change the Post Processing settings. ("1384263")
  - GI: Fixed a failing assert by relaxing the precision requirement in the ray's IsNormalized check.
  - GI: Fixed a memory leak which would occur upon closing the Unity Editor. case 1382169. (1382169)
  - GI: Fixed an issue where emission color was erroneously reused for different renderers using the same material when they have similar lightmap UVs. ("UUM-2771")
  - GI: Fixed an issue where Enlighten RTGI schedules material updates indefinitely when animating the emission color of an emissive mesh renderer. ("UUM-10037")
  - GI: Fixed an issue where environment lighting is missing from player builds when the scene hasn't been baked. ("UUM-2743")
  - GI: Fixed an issue where the skybox reflection cubemap would be deleted when baking multiple multi-scene setups with some scenes in common. (1373986)
  - GI: Fixed APV Partial Baking when using GPU Lightmapper. (1365692)
  - GI: Fixed baking stall occuring when baking terrain with holes. ("UUM-950")
  - GI: Fixed incorrect calculation for total bake time when baking lights in a scene. ("1374059")
  - GI: Fixed light probes so they retain lighting data after you enter Play mode with Baked and Realtime GI are enabled. ("1052045")
  - GI: Fixed prefab assets to how in Light Explorer when you select Show Inactive Objects. ("1280008")
  - GI: Fixed so the Editor-only shader variant with EDITOR_VISUALIZATION keyword enabled is stripped when building the player. (1342117)
  - GI: Fixed the initialization order to be deterministic in Wintermute. (1413923)
  - GI: Fixed the pushoff setter on GPU lightprobes baking. (1369757)
  - GI: Fixed the RenderLightProbes job with hash xxx in the Apple silicon editor. (1362600)
  - GI: Low framerate when looking at GameObjects that are far away from Light Probe Group. ("1340282")
  - GI: [GPU PLM] OpenCL shader loading time in new projects has become significantly slower. Fixed regression by speeding up OpenCL shader loading stage by caching binaries in the GICache. ("UUM-1350")
  - Graph Tool Foundation: Fixed an issue where the movedFrom attribute didn't work when moving a class from no namespace to a namespace.
  - Graphics: 2D Textures with multiple faces or images now correctly update their hash values when any face/image is changed and not just the first one. ("UUM-2506")
  - Graphics: Added a missing msaa flag for 32bit integer types on OSX.
  - Graphics: Added a _Float16 variable in the shaders for Metal. ("1403327")
  - Graphics: Added an assert  and warning when we exceed 16 GPU buffer binding limit when using the BatchRendererGroup API. (1393908)
  - Graphics: Added proper support for the "Integer" shader property with SRP Batcher UnityPerMaterial cbuffer use. (1403768)
  - Graphics: Allowed more than 16 UBO in SRP Batcher (and BRG). (1393906)
  - Graphics: BatchRendererGroup: Removed asset subscribers from Mesh Markdig.Syntax.Inlines.HtmlEntityInline Materials upon deletion. (UUM-18159)
  - Graphics: Custom Render Textures that are marked Dirty are now released when switching scenes. (1363263)
  - Graphics: Disabled dynamic lightmapping shaders when DOTS_INSTANCING_ON is enabled.
  - Graphics: Disabled Multi-threaded update when Frame Debugger is enabled. (1385016)
  - Graphics: Don't mark Lines, Trails or ParticleSystems as dirty unless their data actually changes.
  - Graphics: Enabled Ray Tracing Support in Terrain settings by default for new Terrains.
  - Graphics: Ensured -nographics use in Standalone Player yields correct SystemInfo results. ("1354394")
  - Graphics: Ensured LineRenderers and TrailRenderers with only 2 points don't vanish if the points are close together. ("1368988")
  - Graphics: Fixed (Custom) RenderTexture not being recreated when undoing a dimension change through the inspector. ("1372143")
  - Graphics: Fixed a crash in BatchRendererGroup that would sometimes happen when assets are loaded or unloaded.
  - Graphics: Fixed a crash when you use indirect rendering with tessellation on Metal. (1397458)
  - Graphics: Fixed a shadow issue with user-created command buffer that outputs to a render texture. ("1338467")
  - Graphics: Fixed a sporadic freeze in mesh upload. (UUM-4293)
  - Graphics: Fixed an Editor black out when you call Graphics.Blit on the first frame in a non-main thread, so it outputs a correct error message. ("1392298")
  - Graphics: Fixed an issue causing Render Graph execution errors after a random amount of time.
  - Graphics: Fixed an issue in ray tracing when a .shader name could conflict with one of the hit shader names from a shader pass and cause ray tracing dispatches to fail with d3d12 errors. ("1416410")
  - Graphics: Fixed an issue so that entering playmode with disabled compositor no longer breaks all its layers. ("UUM-11633")
  - Graphics: Fixed an issue so that skinned motion vectors are supported with entities graphics and the HDRP. (1296266)
  - Graphics: Fixed an issue to prevent a crash on some platforms when the mesh buffers do not exist on a MeshRenderer. ("UUM-4150")
  - Graphics: Fixed an issue where creating SparseTextures with certain TextureFormats could crash Unity, even though the equivalent GraphicsFormat is marked as unsupported for SparseTextures.Markdig.Syntax.Inlines.HtmlInline
    - Fixed an issue where SystemInfo.IsFormatSupported((My GraphicsFormat), FormatUsage.Sparse) would always return false on Metal, even if the requested GraphicsFormat actually is supported. (1379863)
  - Graphics: Fixed an issue where TextureImporter.GetAutomaticFormat would return the incorrect format for platforms that had their override turned off. ("UUM-11694")
  - Graphics: Fixed an issue where the D3D11 WARP driver would crash when creating a SparseTexture with the BC1/BC4 GraphicsFormats. (1378254)
  - Graphics: Fixed an issue where using TextureFormat.YUY2 or GraphicsFormat.YUV2 with a SparseTexture would crash on Metal (if sparse textures are supported). (1392869)
  - Graphics: Fixed an issue which caused the Game View FPS to drop when you move the Editor to a different display when you use Metal. ("1383448")
  - Graphics: Fixed assert in UWP when you delete external textures. (1378150)
  - Graphics: Fixed bad performance when Game View is displayed in a different window at the same time as the Scene View when you use Metal. ("1408037")
  - Graphics: Fixed batching issues with the renderer bounds when the SRP batcher is disabled. (1400068)
  - Graphics: Fixed BatchRendererGroup sometimes not reloading Mesh data correctly and leading to BatchDrawCommand error logs.
  - Graphics: Fixed BatchRendererGroup TempJob memory leak in special rendering situations like HDRP AOV rendering. ("UUM-16733")
  - Graphics: Fixed Blit(null,rt) failing on Metal for some combinations of "backbuffer" and destination RT formats. (1347118)
  - Graphics: Fixed bug in mip bias setting on DX11. ("1383424")
  - Graphics: Fixed bug where using Graphics.RenderMesh would cause a crash when exiting play mode. ("1404498")
  - Graphics: Fixed bug with CommandBuffer.Blit(BuiltinRenderTextureType.CurrentActive, ...) where _MainTex was not getting set when using a custom material and MSAA is enabled with multiple cameras. ("1382199")
  - Graphics: Fixed calling Texture2D with a negative width or height on Metal to return an error message. ("1365218")
  - Graphics: Fixed closesthit, anyhit or intersection shaders in .raytrace files being silently ignored. Log an error when these shader types are present in a .raytrace file since they are not currently supported. ("1416367")
  - Graphics: Fixed consistent Gfx.WaitForPresentOnGfxThread editor spikes when you use Metal. ("1378985")
  - Graphics: Fixed crash and validation errors when loading Vulkan shaders from asset bundles that were created with an old version of Unity. ("1331073")
  - Graphics: Fixed crash in MeshUtility.SetMeshCompression() when null is used for Mesh. ("1387705")
  - Graphics: Fixed crash in ScriptableBatchRenderer::ApplyShaderPass when switching between URP and HDRP. (UUM-18163)
  - Graphics: Fixed crash on some platforms when calling Graphics.Blit(null, destination) with a destination texture larger than the backbuffer. ("1374709")
  - Graphics: Fixed crash when using bad args in CommandBuffer.DrawRenderer. ("1315821")
  - Graphics: Fixed cubemap array macros for GLCore.
  - Graphics: Fixed depth-only rendering to Texture2DArray not working on Metal. ("UUM-14488")
  - Graphics: Fixed DX11 bug where depth texture would not be bound as a shader resource because it was still bound as a render target. ("1364460")
  - Graphics: Fixed early return calls in patch constant function so that artifacts and/or patches render on Metal. ("1407434")
  - Graphics: Fixed error when creating 2D Array RenderTexture with MSAA using Vulkan on desktop platforms. (1387652)
  - Graphics: Fixed false positives from checking if all buffers are bound correctly on Metal. (1416338)
  - Graphics: Fixed flicker in splash screen rendering on macOS with OpenGL. ("963097")
  - Graphics: Fixed GPU hang when using stencil view with dynamic resolution with Vulkan and rendering errors with Metal. (1400701)
  - Graphics: Fixed Graphic and Compute Buffer allocations to allocate less garbage collected memory. ("1418412")
  - Graphics: Fixed half outputs coalescing so it doesn't result in a broken metal code. (1429019)
  - Graphics: Fixed IES profile importer handling of overflow (outside 0-1 range) of attenutation splines values.
  - Graphics: Fixed incorrect mip levels dropping for PVRTC textures in the case of not full mip chain provided. ("1427604")
  - Graphics: Fixed incorrect sRGB backbuffer with Linear Rendering and some AMD Vulkan drivers on Windows with multiple GPUs. (1387774)
  - Graphics: Fixed incorrect SRP batching for shadow rendering. ("1364035")
  - Graphics: Fixed initialization of particles created with GPU events.
  - Graphics: Fixed issue in which editor would get stuck when importing corrupted FBX models. ("UUM-3981")
  - Graphics: Fixed issue when assigning RenderTexture in onPreRender and it was null before. ("1385163")
  - Graphics: Fixed issue with debug markers in Unity Profiler in deep profiler mode.
  - Graphics: Fixed issue with Probe Volume Baking window incorrectly displaying the icon for probe volumes in scenes that don't contain probe volumes.
  - Graphics: Fixed loading of BMP with BMP header V4/V5. ("1397028")
  - Graphics: Fixed lost graphics device when using Vulkan with some combinations of shaders besing used. (1422403)
  - Graphics: Fixed mapped index debug error when rendering null geometry. (UUM-11997)
  - Graphics: Fixed mesh corruption with Keep Quads -option set, when adding a new vertex channel. ("1390422")
  - Graphics: Fixed Metal crash when reading pixels from depth-only RT. ("1375846")
  - Graphics: Fixed minor performance penalty in OpenGL ReadPixels. (1382949)
  - Graphics: Fixed missing information about RTAS debug mode in documentation. (1411500)
  - Graphics: Fixed motion blur in the URP so it can handle multiple cameras. ("1377839")
  - Graphics: Fixed null reference to lambda when executing context menu of an additional data component. ("1396805")
  - Graphics: Fixed partial upload of a compute buffer using SetData. ("1398510")
  - Graphics: Fixed particleGUI's fix me button ("1389023")
  - Graphics: Fixed race condition when using Lock/UnlockBuffer with Vulkan. (1394185)
  - Graphics: Fixed regression on ResourceReloader due to change for supporting built-in resources.
  - Graphics: Fixed rendering of scene and game views when the "Shadow Debug Mode" is set to "Single Shadow". ("1385412")
  - Graphics: Fixed shadow cascade computation for non implicit projections. ("1366218")
  - Graphics: Fixed so that debug menu updates render when a widget becomes visible or hidden. (1409372)
  - Graphics: Fixed so that there is no mainthread stall on native graphics jobs platforms when you delete textures or rendertargets. (1423274)
  - Graphics: Fixed texture gather macros for GLCore and moved them from target 4.6 to target 4.5.
  - Graphics: Fixed the GameView window so it doesn't clear entirely when nothing is rendered to it. ("1420353")
  - Graphics: Fixed the issue with the special Turkish i, when looking for the m_IsGlobal property in VolumeEditor.
  - Graphics: Fixed the Metal shader code generated when uint and float3 outputs are coalesced into one register. (1419450)
  - Graphics: Fixed the use of GraphicsBuffer.LockBufferForWrite with Vulkan without a manual initialization of the buffer so it doesn't trigger assertion. (1417283)
  - Graphics: Fixed the Volume Panel on the Rendering Debugger to correctly show cameras when they're added or deleted.
  - Graphics: Fixed unnecessary memory allocation inside FSR's RCAS shader constants helper function.
  - Graphics: Fixed uploading of dynamic mode compute buffers. ("1383601")
  - Graphics: Fixed virtual texture updates sometimes being missed by the SRP Batcher, especially when using BatchRendererGroup.
  - Graphics: Fixed Vulkan fence tracking when trying to recover from swapchain error. (1417311)
  - Graphics: Fixed Vulkan validation error when using DrawProcedural with quad primitives. (UUM-18502)
  - Graphics: Fixed when using Vulkan with shaders that use more than 8 constant buffers on AMD GPUs. (1403736)
  - Graphics: Fixed XR support in CoreUtils.DrawFullscreen function.
  - Graphics: Fixed DebugUI.Enum fields collapsing their parent DebugUI.Foldout.
  - Graphics: Fixed RenderTexture stencil view (RenderTexture.stencilFormat, RenderTextureSubElement.Stencil) when using Vulkan with dynamic resolution. (1398961)
  - Graphics: Fixed SceneRenderPipeline for it to not change project when used with AddComponent. ("1414921")
  - Graphics: Fixed: On Metal, objects using the Universal Render Pipeline/Lit shader with a normal map are not rendered when using an albedo override in the Rendering Debugger. (1374226)
  - Graphics: Improved shadow map draw sorting for BatchRendererGroup. (UUM-18165)
  - Graphics: Normal maps are no longer inverted with static batching when the meshes have negative scale transforms on an odd number of axes. ("1369919")
  - Graphics: Removed spam messages from the Log or Console Window when using Renderer.rayTracingMode but Ray Tracing is not supported by the system configuration. (1406885)
  - Graphics: SkinnedMeshRenderer and MeshRenderer are now in the same SRP Batch during shadow pass. ("UUM-4336")
  - Graphics: Support wireframe rendering in GL core players.Markdig.Syntax.Inlines.HtmlInline
    - Fixed OpenGL hull shaders code generation in case immediate constant buffers are used. (1371542)
  - Graphics: Updated libjpeg-turbo to version 2.1.2 to solve security issues with version 1.3.1, used by Texture2D and ImageConversion LoadImage API and ImageConversion EncodeToJPG API. (1351886)
  - HDRP: Added a specular occlusion fallback on normal when bent normal is not available. ("UUM-6662")
  - HDRP: Added async compute support doc. (UUM-6183)
  - HDRP: Added clarification on HDR Output not supporting Scene View. ("UUM-16184")
  - HDRP: Added injection points options for DLSS (After Depth of Field and After Post) which should mitigate some of the performance cost in post process. (1385178)
  - HDRP: Added missing using statements in one of the example scripts in the documentation for the accumulation API. (UUM-3224)
  - HDRP: Added the ability to remap the occlusion to anything via a curve for LensFlareOcclusionSRP (DataDriven). (1416429)
  - HDRP: Added the option to automatically register diffusion profiles on import. (1411786)
  - HDRP: Allowed you to select the multiscattering method from SG advanced settings. (1427317)
  - HDRP: Changed the Box Model name to Planar Model. (1422103)
  - HDRP: Clamp negative absorption distance. (UUM-6746)
  - HDRP: Disabled Volumetric Clouds for Default Sky Volumes. (UUM-6185)
  - HDRP: Fixed a black screen issue with master builds on HDRP. (UUM-17388)
  - HDRP: Fixed a compilation warning when installing the procedural sky HDRP sample.
  - HDRP: Fixed a crash with render graph viewer when render graph is not provided with an execution name.
  - HDRP: Fixed a discrepency between recursive rendering and path tracing for refraction models. ("UUM-6179")
  - HDRP: Fixed a few UX issues in APV.
  - HDRP: Fixed a null ref exception in Volume Explorer.
  - HDRP: Fixed a null ref exception when destroying a used decal material. ("UUM-4353")
  - HDRP: Fixed a nullref exception when creating a new scene while LightExplorer is open.
  - HDRP: Fixed a nullref when enabling raycount without ray tracing.
  - HDRP: Fixed a number of outdated reference to "HDRP Default Settings" in the UI. (UUM-11494)
  - HDRP: Fixed a regression issue which breaks XR font rendering. (GFXRPCXR-17)
  - HDRP: Fixed a render graph error when rendering a scene with no opaque objects in forward. ("UUM-6189")
  - HDRP: Fixed a rounding issue in ray traced reflections at half resolution. (UUM-6177)
  - HDRP: Fixed a shader warning in UnityInstancing.hlsl.
  - HDRP: Fixed a warning because of a null texture in the lens flare pass.
  - HDRP: Fixed a warning on first frame when a realtime probe is set to OnEnable.
  - HDRP: Fixed ambient probe for volumetric clouds.
  - HDRP: Fixed an invalid undo step when you edit some values on the Rendering Debugger. (1412465)
  - HDRP: Fixed an issue by greying out the profile list button instead of throwing an error. (UUM-6174)
  - HDRP: Fixed an issue in the instance ID management for tesselation shaders.
  - HDRP: Fixed an issue that the Shaders now correctly fallback to error shader. (UUM-1417)
  - HDRP: Fixed an issue where APV cells were not populated properly when probe volumes have rotations.
  - HDRP: Fixed an issue where forced sky update (like PBR sky amortized updated) would not update ambient probe.
  - HDRP: Fixed an issue where sometimes full screen debug would cause render graph errors.
  - HDRP: Fixed an issue with accumulation motion blur and depth of field when path tracing is enabled.
  - HDRP: Fixed an issue with Bloom and Depth of Field in game view when filtering in the hierarchy. (UUM-17739)
  - HDRP: Fixed an issue with DOTS and Look Dev tool causing entities in the tool to be drawn in the game view. ("UUM-6188")
  - HDRP: Fixed an issue with dynamic resolution and low res transparency sampling garbage outside of the render target.
  - HDRP: Fixed an issue with raytraced shadows being visible alongside shadowmask.
  - HDRP: Fixed AO dissapearing when DRS would be turned off through a camera, while hardware drs is active in DX12 or Vulkan.
  - HDRP: Fixed APV loading data outside of the relevant area containing probes.
  - HDRP: Fixed artifacts on PBR DOF camera cuts such as the COC sticking around with blurry values. (UUM-6187)
  - HDRP: Fixed artifacts on the volumetric clouds when you enable the fog. (1407759)
  - HDRP: Fixed atmospheric scattering being incorrectly enabled when scene lighting is disabled.
  - HDRP: Fixed auto-exposure mismatch between sky background and scene objects in path tracing.
  - HDRP: Fixed bad undo behaviour with light layers and shadows. ("UUM-5701")
  - HDRP: Fixed black dots when clouds rendered in local mode. ("UUM-11651")
  - HDRP: Fixed broken denoiser for ray traced shadows in HDRP. ("UUM-2140")
  - HDRP: Fixed broken rendering when duplicating a camera while the Rendering Debugger is opened.
  - HDRP: Fixed bug in path tracing dirtiness check. (UUM-13514)
  - HDRP: Fixed cached directional light shadows disappearing without reappearing when the going outside of the range of shadow validity.
  - HDRP: Fixed camera motion vector pass reading last frame depth texture.
  - HDRP: Fixed CoC size computation when dynamic resolution is enabled.
  - HDRP: Fixed color grading issue when multiple cameras have same volume properties but different frame settings. (UUM-3314)
  - HDRP: Fixed color grading so it no longer outputs negative colors. (UUM-11110)
  - HDRP: Fixed compilation issue related to shader stripping in ray tracing.
  - HDRP: Fixed contact shadow disappearing when shadowmask is used and no non-static object is available.
  - HDRP: Fixed Correlated Color Temperature not being applied in Player builds for Enlighten realtime GI lights ;.
  - HDRP: Fixed couple bugs in the volumetric clouds shader code.
  - HDRP: Fixed custom pass name being cut when too long in the inspector.
  - HDRP: Fixed custom pass scaling issues with dynamic resolution. ("UUM-10882")
  - HDRP: Fixed custom pass UI not refreshed when changing the injection point. (UUM-8410)
  - HDRP: Fixed custom pass utils Blur and Copy functions in XR.
  - HDRP: Fixed custom shader GUI for material inspector.
  - HDRP: Fixed debug data for probes to not longer be cleared every time a cell is added/removed. This helps performance with streaming.
  - HDRP: Fixed debug probe visualization affecting screen space effects.
  - HDRP: Fixed debug window reset.
  - HDRP: Fixed Decal Layer Texture lifetime in rendergraph. ("UUM-6664")
  - HDRP: Fixed decal material validation after saving. ("UUM-12750")
  - HDRP: Fixed decal performances when they use different material and the same draw order.
  - HDRP: Fixed default value of "Distortion Blur" from 1 to 0 according to the doc.
  - HDRP: Fixed default value of "Distortion Blur" from 1 to 0 according to the doc.
  - HDRP: Fixed Depth Of Field compute shader warnings on metal. (UUM-7783)
  - HDRP: Fixed discrepency in the fog in RT reflections and RTGI between perf and quality. (UUM-7434)
  - HDRP: Fixed duplicated code sample in the custom pass documentation. ("UUM-6173")
  - HDRP: Fixed editor issue with the LiftGammaGain and ShadowsMidtonesHighlights volume components.
  - HDRP: Fixed embedding the config package when it's not a direct dependency. ("UUM-8012")
  - HDRP: Fixed error thrown when layered lit material has an invalid material type.
  - HDRP: Fixed exposure of recorded frames with path tracing and auto exposure. (UUM-14985)
  - HDRP: Fixed flickering / edge aliasing issue when DoF and TAAU or DLSS are enabled.
  - HDRP: Fixed flipped UV for directional light cookie on PBR Sky. ("1382656")
  - HDRP: Fixed for APV debug mode breaking rendering when switching to an asset with APV disabled.
  - HDRP: Fixed for changes of color curves not being applied immediately.
  - HDRP: Fixed for screen space overlay rendered by camera when HDR is disabled.
  - HDRP: Fixed FOV change when enabling physical camera.
  - HDRP: Fixed Geometric AA tooltip. ("UUM-2294")
  - HDRP: Fixed graphics issues with sky and fog in game view when filtering objects in the hierarchy. ("UUM-11952")
  - HDRP: Fixed HDR Output behaviour when platform doesn't give back properly detected data. (UUM-6400)
  - HDRP: Fixed HDRP build issues with DOTS_INSTANCING_ON shader variant.
  - HDRP: Fixed HDRP camera debug panel rendering foldout.
  - HDRP: Fixed history transform management not being properly handeled for ray traced area shadows. ("UUM-2150")
  - HDRP: Fixed isssue with up direction of the light anchor tool sometime getting wrong. ("UUM-6190")
  - HDRP: Fixed issue at edge of screen on some platforms when SSAO is on.
  - HDRP: Fixed issue during reloading scenes in a set when one of the scenes has been renamed.
  - HDRP: Fixed issue in APV with scenes saved only once when creating them.
  - HDRP: Fixed issue of index for APV running out space way before it should.
  - HDRP: Fixed issue showing controls for Probe Volumes when Enlighten is enabled and therefore Probe Volumes are not supported.
  - HDRP: Fixed issue that caused the uber post process to run even if nothing is to be done, leading to different results when disabling every post process manually vs disabling the whole post-processing pipeline.
  - HDRP: Fixed issue that placed an OnDemand shadow in the atlas before it was ever rendered.
  - HDRP: Fixed issue where changes to APV baking set lists were not saved.
  - HDRP: Fixed issue where scene list was not refreshed upon deleting an APV baking set.
  - HDRP: Fixed issue with automatic RendererList culling option getting ignored.
  - HDRP: Fixed issue with detail normals when scale is null.
  - HDRP: Fixed issue with Final Image Histogram displaying a flat histogram on certain GPUs and APIs.
  - HDRP: Fixed issue with HDRI Sky and shadow filtering quality set to high.
  - HDRP: Fixed issue with Stacklit raytrace reflection.
  - HDRP: Fixed issue with typed loads on RGBA16F in Volumetric Lighting Filtering.
  - HDRP: Fixed Layer List is not duplicated when duplicating a LayeredLit Material. ("UUM-11123")
  - HDRP: Fixed layer lit shader UI.
  - HDRP: Fixed leaks in ray tracing effects due to missing ambient probe for ray tracing effects. (UUM-589)
  - HDRP: Fixed light layers when using motion vectors. ("UUM-15125")
  - HDRP: Fixed Local Volumetric Fog tooltips.
  - HDRP: Fixed MinMax of Transparent Thickness.
  - HDRP: Fixed minor bug in the shadow ray culling for the cone spot light. (UUM-9708)
  - HDRP: Fixed misc shader warnings.
  - HDRP: Fixed missing doc API for RTAS Debug display.
  - HDRP: Fixed missing tag on decal shader properties.
  - HDRP: Fixed Missing tooltip for Screen Weight Distance in Screen Space Refraction Override. (UUM-16930)
  - HDRP: Fixed mouse position in debug menu with scaled screens in editor. (UUM-16880)
  - HDRP: Fixed NeedMotionVectorForTransparent checking the wrong flag.
  - HDRP: Fixed noisy top shadows when using 'High' Filtering Quality with Tesselated Meshes (Lit Tesselation). ("UUM-3341")
  - HDRP: Fixed Normal Map assiignation when importing FBX Materials.
  - HDRP: Fixed null reference error in the rendering debugger when no camera is available. (UUM-18189)
  - HDRP: Fixed nullref from debug menu in release build.
  - HDRP: Fixed objects belonging to preview scenes being marked as dirty during migration.
  - HDRP: Fixed option to force motion blur off when in XR.
  - HDRP: Fixed options to trigger cached shadows updates on light transform changes.
  - HDRP: Fixed path tracer denoising in player builds. (1424658)
  - HDRP: Fixed path tracing to better match transparent object behavior observed in rasterization. (1408034)
  - HDRP: Fixed performance penalty when hardware DRS was used between multiple views like editor or other gameviews.
  - HDRP: Fixed pivot position in the eye material sample scene.
  - HDRP: Fixed Probe Debug view misbehaving with fog.
  - HDRP: Fixed probe volume baking not generating any probes on mac.
  - HDRP: Fixed quad artifacts on TAA and fixed an issue on bicubic filtering. ("UUM-6205")
  - HDRP: Fixed range of spill removal parameter in graphics compositor UI. ("UUM-11634")
  - HDRP: Fixed Ray Tracing Mixed Mode Collisions. (UUM-14613)
  - HDRP: Fixed raytrace shader not working in final player build. ("1410966")
  - HDRP: Fixed realtime reflection probes using a mode of every frame to update at most once per frame. (1427634)
  - HDRP: Fixed reflection issue upon scene filtering. (UUM-6514)
  - HDRP: Fixed reflection probe rendering order when visible in multiple cameras.
  - HDRP: Fixed refraction fallback when object center is out of screen. ("UUM-3324")
  - HDRP: Fixed screen space shadow debug view not showing when no shadows is available.
  - HDRP: Fixed screen space shadow when multiple lights cast shadows.
  - HDRP: Fixed shader graph errors when disabling the bias on texture samplers.
  - HDRP: Fixed shadergraph using derivatives and Raytracing Quality keyword. ("UUM-8358")
  - HDRP: Fixed shadow cascade transition not working properly with bias.
  - HDRP: Fixed shadow dimmer not affecting screen space shadows. (UUM-6512)
  - HDRP: Fixed Show/Hide all Additional Properties.
  - HDRP: Fixed sky jittering when TAA is enabled.
  - HDRP: Fixed sky rendering in the first frame of path tracing. This also fixes issues with auto-exposure. ("UUM-2427")
  - HDRP: Fixed slight change of color in background when changing scene hierarchy. (UUM-14324)
  - HDRP: Fixed so that when you perform a reset on the rendering debugger, it hides elements. (1411399)
  - HDRP: Fixed some artifacts that happened when ray traced shadows are evaluated for a surface that is far from the camera. ("1425941")
  - HDRP: Fixed some fields of the light explorer so they don't allow out of range values. (1401610)
  - HDRP: Fixed some XR devices: Pulling camera world space position from mainViewConstants instead of transform.
  - HDRP: Fixed SpeedTree graph compatibility by removing custom interpolators.
  - HDRP: Fixed SpeedTree importer when shader has no diffusion profile. (UUM-1875)
  - HDRP: Fixed spot light shadows near plane.
  - HDRP: Fixed SSGI using garbage outside the frustum. (UUM-6175)
  - HDRP: Fixed stackLit coat screen space reflection and raytrace reflection light hierarchy and IBL fallback.
  - HDRP: Fixed static lighting sky update when using an HDRI sky with a render texture in parameter.
  - HDRP: Fixed tessellation in XR. ("UUM-3338")
  - HDRP: Fixed Text alignment in Transparency Inputs section. (UUM-17208)
  - HDRP: Fixed texture wrapping of cloud layer. ("UUM-15591")
  - HDRP: Fixed the ambient probe for the volumetric clouds for the sky cubemap so they're ready at the first frame. (1403468)
  - HDRP: Fixed the behavior of the multi-selection on the material field Motion Vector For Vertex Animation. ("1383666")
  - HDRP: Fixed the clamp happening on the sum of ray tracing samples instead of per sample. ("UUM-6513")
  - HDRP: Fixed the default custom pass buffer format from R8G8B8A8_SNorm to R8G8B8A8_UNorm. Additionally, an option in the custom pass buffer format settings is available to use the old format.
  - HDRP: Fixed the default DXR volume not having any DXR effects enabled. (UUM-6182)
  - HDRP: Fixed the fallback section so it now disappears when hiding the additional data. (UUM-16780)
  - HDRP: Fixed the HDRP path tracer denoising temporal mode when rt handle scale is not one. (1421249)
  - HDRP: Fixed the indirect diffuse lighting in ray tracing so it now always works properly. (UUM-14083)
  - HDRP: Fixed the list of included HDRP asset used for stripping in the build process.
  - HDRP: Fixed the material rendering pass not correctly changed with multi-selection. (UUM-2236)
  - HDRP: Fixed the missing debug menus to visualize the ray tracing acceleration structure. (1371410)
  - HDRP: Fixed the ray traced ambient occlusion not rejecting the history when it should leading to severe ghosting. (UUM-3225)
  - HDRP: Fixed the ray tracing fallbacks being broken since an Nvidia Driver Update.
  - HDRP: Fixed the ray tracing shadow denoiser s it no longer produces leaks at the edge of spotlight shadows. (UUM-17794)
  - HDRP: Fixed the roughness value used for screen space reflections and ray traced reflections to match environment lighting.
  - HDRP: Fixed the rt screen space shadows not using the correct asset for allocating the history buffers.
  - HDRP: Fixed the unloading of scenes so it doesn't cause the unload of APV data of other scenes. (1398573)
  - HDRP: Fixed the water system not working on metal.
  - HDRP: Fixed Tile/Cluster Debug in the Rendering Debugger for Decal and Local Volumetric Fog.
  - HDRP: Fixed timeline not updating PBR HDAdditionalLightData parameters properly.
  - HDRP: Fixed tonemapping not being applied when using the Show Cascades debug view. ("UUM-3942")
  - HDRP: Fixed transmission for box lights. (UUM-8765)
  - HDRP: Fixed transmission on directional lights. ("UUM-15003")
  - HDRP: Fixed Transparent Depth Pre/Post pass by default for the built-in HDRP Hair shader graph.
  - HDRP: Fixed unlit pixels contributing to screen space effects. (UUM-7911)
  - HDRP: Fixed unnecessary loss of precision when all post processing are disabled. ("UUM-13277")
  - HDRP: Fixed unsupported material properties show when rendering pass is Low Resolution.
  - HDRP: Fixed using the wrong coordinate to compute the sampling direction for the screen space global illumination.
  - HDRP: Fixed using the wrong directional light data for clouds and the definition of current Sun when the shadow pass is culled.
  - HDRP: Fixed various issues with render graph viewer when entering playmode.
  - HDRP: Fixed various issues with using SSR lighting with IBL fallback for Lit shader with clear coat.
  - HDRP: Fixed vertex color mode Add name whicgh was misleading, renamed to AddSubstract.
  - HDRP: Fixed volumetric cloud incorrectly display in lighting debug mode
  - HDRP: Fixed warning upon deleting APV data assets.
  - HDRP: Fixed warning when an APV baking set is renamed.
  - HDRP: Fixed water simulation so it stops when you enter pause mode in the unity editor. (1400668)
  - HDRP: Fixed write to VT feedback in debug modes.
  - HDRP: Fixed zfighting artifacts for ray tracing. (UUM-7668)
  - HDRP: Improved error reporting from exceptional RenderGraph states.
  - HDRP: Improved the motion and receiver rejection tooltips for RTGI and RTAO. ("UUM-13152")
  - HDRP: Initialize DLSS at loading of HDRP asset. Previously intialization was too late (ad HDRP pipeline constructor). Moved initialization to OnEnable of SRP asset. ("UUM-5928")
  - HDRP: Removed misleading part of a LensFlare tooltip. (UUM-13946)
  - HDRP: Removed unused voluimetric clouds volume component on new scenes templates. ("UUM-11451")
  - HDRP: Removed unwanted RTAO effect on indirect specular lighting. (UUM-8772)
  - HDRP: Renamed IOR output in Eye shadergraph for clarification. ("UUM-15849")
  - HDRP: SRP Lens flares occlusion improvements. (UUM-11771)
  - HDRP: Updated DLSS test images for a driver update. (1416077)
  - HDRP: Updated misleading tooltip in the environment lighting in HDRP. (UUM-6178)
  - HDRP: Worked around exception when enabling raytracing when resources for raytracing have not been built. (UUM-9570)
  - IL2CPP: Allow breakpoints to be set in managed code in private and internal types. ("UUM-9132")
  - IL2CPP: Avoid a possible race condition when the garbage collector is enabled or disabled that could cause it to become permanently disabled. (UUM-16300)
  - IL2CPP: Avoid an exception from Buffer.BlockCopy when the destination array is of type sbyte. ("UUM-12875")
  - IL2CPP: Avoid an intermittent crash in the .NET thread pool implementation when a thread is incorrectly removed from the pool twice. ("UUM-11191")
  - IL2CPP: Changed Socket Handle implementation to use file descriptor. ("1389108")
  - IL2CPP: Corrected the behavior of Ping on Windows platforms. ("UUM-8801")
  - IL2CPP: Corrected the behavior of RuntimeInformation.OSDescription on WebGL. ("UUM-1144")
  - IL2CPP: Corrected the build of a Mac Standalone player with an exported Xcode project when script debugging is enabled. ("UUM-11352")
  - IL2CPP: Do not strip out ETW patterns on non-windows platforms. ("UUM-5771")
  - IL2CPP: Fixed a crash in the IL2CPP runtime when the GUID property of a type is obtained for a type with a StructLayout attribute but without a Guid attribute. ("UUM-10859")
  - IL2CPP: Fixed a crash when using GetFiles multiple times for directories with many files on iOS. ("UUM-8885")
  - IL2CPP: Fixed an exception when calling Enum.CompareTo on enum with a System.Uint16 underling type. ("UUM-11944")
  - IL2CPP: Fixed an intermittent crash on shutdown when many threads are waiting on a Monitor object inside for a C# lock statement. ("UUM-10374")
  - IL2CPP: Fixed an issue so IL2CPP correctly determines a generic instance with all blittable fields was not itself blittable. ("1391730")
  - IL2CPP: Fixed compilation error that occurred when a enum was passed by reference in a marshalling definition. ("UUM-11353")
  - IL2CPP: Fixed crash in IL2CPP metadata code when loading a field RVA value (UUM-17473)
  - IL2CPP: Fixed fatal error in Unity CIL Linker with RecognizedReflectionAccessPattern reporting. ("UUM-13281")
  - IL2CPP: Fixed IL2CPP build failure when using Unbox instruction with generic by reference return type. ("UUM-5942")
  - IL2CPP: Fixed leak of internal thread objects that could manifest in a pause on player exit. ("UUM-607")
  - IL2CPP: Fixed line numbers in exceptions when you use IL2CPP scripting backend and Visual Studio 2017.
  - IL2CPP: Fixed line numbers in exceptions when you use IL2CPP scripting backend and Visual Studio 2022 17.1 or later.
  - IL2CPP: Fixed performance regression in regular expressions. ("UUM-590")
  - IL2CPP: Fixed possible crash/corruption when invoking a virtual generic method on a generic type by reflection or when Faster (smaller) builds is enabled. ("UUM-12498")
  - IL2CPP: Fixed readdir reporting wrong names on QNX. (PIA-557)
  - IL2CPP: Fixed syntax error: ')' " when "Faster (smaller) builds" is selected on function pointer call with a return type but no parameters. ("UUM-14778")
  - IL2CPP: Improved error messages for unsupported Process API methods. ("UUM-11147")
  - IL2CPP: Made sure that the latest build code is used for il2cpp when you export to IDE projects.
  - IL2CPP: Prevent a memory corruption that could happen when the "Faster (smaller) builds" option is used with generic types that have a generic base class with no fields, and a different base class with at least one generic field. (UUM-3066)
  - IL2CPP: Throw an exception from Buffer.BlockCopy when the destination array has a non-primitive element type. ("UUM-3302")
  - IL2CPP: Workaround for a MSVC C++ compiler optimization bug related the Math.Max implementation for System.Decimal. ("UUM-11487")
  - IMGUI: Fixed the incorrect scene icons in the project window upon switching themes. ("1349458")
  - IMGUI: Gives out a warning to the user if a child has the same id as a parent inside a DropdownMenu. ("1380024")
  - iOS: Added "Processing" background mode. ("1333761")
  - iOS: Disabled capitalization, autocorrection and others when soft keyboard is secure and input is hidden. ("UUM-5974")
  - iOS: Disabled depth16 support on pre-iOS14 or pre-A9, since depth-bias does not work correctly. (UUM-9562)
  - iOS: Fixed crash on warming up shader variants with procedural instancing. (UUM-10114)
  - iOS: Fixed embedded frameworks loosing "sign on copy". ("UUM-7653")
  - iOS: Fixed forcing jobified metal rendering. (UUM-7195)
  - iOS: Fixed iphone player dylib missing "sign on copy" in simulator. ("UUM-2829")
  - iOS: Fixed orientation handling on startup (when the phone is rotated between starting up and showing unity itself). ("UUM-7461")
  - iOS: Fixed unity view behavior when in "split view". ("UUM-9081")
  - iOS: When using "Replace" we will now overwrite any custom changes to project files again. ("1374317")
  - Kernel: Fixed a crash introduced in a previous internal iteration with managed exception types in a global namespace thrown from burst compiled code.
  - Kernel: Fixed Application.targetFrameRate to not cause jitter in Time.deltaTime measurements.
  - Kernel: Fixed AssertOnRecursiveCall with tests. ("UUM-13234")
  - Kernel: Fixed race condition in DualThreadAllocator when using BatchDelete. (UUM-5941)
  - License: Allowed ULF activation on machines that have an empty BIOS identifier (empty mb4 - BIOS Id on Windows).
  - License: Extended the maximum possible time to connect to the Licensing Client.
  - License: Fixed Editor console getting spammed with: 'Generic message code 233 has not been handled.'
  - Linux: Fix inspector window black out after addComponent through menu or shortcut (UUM-1565)
  - Linux: Fixed "ExternalProcess::OnExitedMainThread" logged in the Console window when closing Profiler (Standalone Process) window. ("UUM-5888")
  - Linux: Fixed ability to make Apple silicon related builds on Linux. (1388311)
  - Linux: Fixed CinemachineVirtualCamera Component's body's "ScreenY" and "ScreenX" values move towards 1.5 while pressing and moving the mouse ("UUM-14611")
  - Linux: Fixed prefab override button in inspector spams gui error when clicking it multiple times. ("UUM-1566")
  - Linux: Fixed scrolling with the scroll wheel is slower on builds when using the New Input System package on Linux Standalone. ("UUM-12564")
  - Linux: Fixed soft crash/deadlock when dragging editor window tabs around different monitors while using open source drivers. (1370541)
  - Linux: Fixed standalone profiler crashing when launched on Linux. ("1371326")
  - Linux: Prevented a crash after assert during a failed material remapping in the LEGO Learn tutorial. ("1423683")
  - Linux: Prevented Linux from going to sleep when the progress bar is busy. This only supports GNOME desktop environment. (1407354)
  - Linux: Updated Simple DirecMedia Layer to 2.0.22 (UUM-6773)
  - macOS: Added warning to inform that on Apple Silicon builds that OpenGL is not available and Metal will be used instead. ("1388438")
  - macOS: Fixed crash when toggling fullscreen shortcut on/off at a rapid rate. (1400208)
  - macOS: Fixed Display systemWidth and systemHeight being wrong until window was moved to another display. ("UUM-501")
  - macOS: Fixed new InputSystem mouse position not being updated after resolution change. ("UUM-10519")
  - macOS: Fixed undocked editor windows always being displayed on top when the Editor is fullscreened using the OSX's greeen fullscreen button. ("1384620")
  - macOS: Prevented the invalid shortcut sound from playing when you interact with a fullscreen play mode view. (1400206)
  - Mobile: Fixed incorrect external keyboard GUI events on Android and iOS. Now Event.character is set correctly.
  - Mobile: Fixed Patch feature for some devices running Android 12. (1379518)
  - Mobile: Fixed Screen.orientation returning deprecated "Landscape" value instead of "LandscapeLeft". ("1394769")
  - Mobile: Fixed OnMouse events so they trigger for iOS/Android builds. ("1412741")
  - Mono: Avoid an editor crash when the debugger code fails to lookup the signature of a method. ("UUM-9219")
  - Mono: Avoid exception when registering a window class in different domain instances. ("UUM-13189")
  - Mono: Corrected issue where FileSystemEventArgs.FullPath did not return a fully qualified path. ("1376258")
  - Mono: Fixed "The BinaryReader read data to a Span Markdig.Syntax.Inlines.HtmlEntityInlinebyteMarkdig.Syntax.Inlines.HtmlEntityInline is always zero.". ("1377375")
  - Mono: Fixed a crash when mixed callstack debugging was enabled on non-Windows platforms. ("UUM-16791")
  - Mono: Fixed crash that would occur when assigning a large struct to the field of a null object. ("1349195")
  - Mono: Fixed crash when passing a generic class to a function pointer. ("UUM-603")
  - Mono: Fixed Editor liveness crash when processing RealProxy classes. ("UUM-13031")
  - Mono: Fixed incorrect Burst exception control flow in Unity Editor. ("1396617")
  - Mono: Fixed Interlocked.CompareExchange float on M1. (UUM-9159)
  - Mono: Fixed LINQ performance regression on linux by switching to a more efficient stack checking method. ("UUM-11526")
  - Mono: Fixed System.Windows.Forms.SendKeys.Send on Windows.
  - Mono: Updated the machine config file for Android Player builds. ("1405235")
  - Networking: UnityWebRequest will not change HEAD to GET on 302 or 303 response. (UUM-7274)
  - Package Manager: Changed the Editor to show the cancel button text during multi-select. (1408049)
  - Package Manager: Disabled element toggle in import wizard when none of it's child can be toggled. (1385403)
  - Package Manager: Fixed a bug so that the redownload button is disabled when offline. (1425912)
  - Package Manager: Fixed a bug where the "experimental package in use" dropdown would show up when packages not coming from the Unity registry were being used. (1382920)
  - Package Manager: Fixed a crash when the editor window is closed during package export. ("1305962")
  - Package Manager: Fixed a failure in Unity.IntegrationTests.EditorUI.EditorCrashOnBroadcastMessageAny.Crash. (1428882)
  - Package Manager: Fixed a typo in Package Manager preferences.
  - Package Manager: Fixed an issue where .unitypackage dependencies exported from an older editor were not updated when importing in a newer editor. ("UUM-15081")
  - Package Manager: Fixed an issue where having package folders without a package manifest in the project's Library folder would fail resolving local-tarball or git packages.
  - Package Manager: Fixed an issue where JSON files encoded using UTF-8 with BOM could not be parsed.
  - Package Manager: Fixed an issue where package metadata would be fetched even though the locally cached metadata was up-to-date.
  - Package Manager: Fixed an issue where local-tarball dependencies would become unresolved if the source tarball was removed.
  - Package Manager: Fixed custom packages hosted on a scoped registry so they don't appear as being hosted on Unity Registry. (1410947)
  - Package Manager: Fixed GPU usage spikes to 20% when downloading packages from Package Manager. ("1364444")
  - Package Manager: Fixed the inconsistencies around link styles in Package Manager windows and Package Manager window settings. (1405220)
  - Package Manager: Fixed UnityPackageManager process leaving dangling IPC socket file after it exited.
  - Package Manager: Fixed warning when exporting a package containing invalid cross platform character. ("1322064")
  - Package Manager: Improved readability of the Package Details Dependencies list at low width. (1430657)
  - Package Manager: Package Manager: Ensure that only the manifest version and patches of that version are tagged as Release in Package Manager. (UUM-8938)
  - Package Manager: Removed the default package. (1406974)
  - Particles: Ensured that MeshFilter components load before Particle Systems so you can use them during prewarms. ("1410915")
  - Particles: Fixed a crash race condition in geometry jobs that were used by the shuriken particle system when native graphics jobs in use. (UUM-14684)
  - Particles: Fixed an issue to ensure GetTriggerParticles always returns the correct results. ("UUM-14581")
  - Particles: Fixed an issue with the particle bounding box so it correctly contains all particles. ("1377023")
  - Particles: Fixed erroneous error message: "all(sheetIndexNormalized Markdig.Syntax.Inlines.HtmlEntityInline= 0.0f) Markdig.Syntax.Inlines.HtmlEntityInlineMarkdig.Syntax.Inlines.HtmlEntityInline all(sheetIndexNormalized Markdig.Syntax.Inlines.HtmlEntityInline= 1.0f)". ("1364565")
  - Particles: Fixed invert culling api when used with Particle Systems. ("UUM-890")
  - Particles: Improved lifetime precision of the Trail module when Unity runs for many hours. ("1370365")
  - Particles: Orbital velocity curves must all use the same mode. Display an error and don't crash, if this is not the case. ("UUM-8679")
  - Particles: Prevented the Standard Unlit Particle shader from performing unneeded lighting calculations on the CPU when you use the Built-in Rendering Pipeline. ("1402353")
  - Physics: Corrected a typo in the tooltip for "SurfaceEffector2D.useContactForce". ("1396766")
  - Physics: Fixed a case where the Transform scale would not affect Anchor Transform tool gizmo position. ("1381538")
  - Physics: Fixed an error message when trying to set an empty mesh on a MeshCollider component. ("1409430")
  - Physics: Fixed an issue where gfx buffers on dx12 would be corrupted by cloth attempting to still read into them post SkinnedMeshRenderer being cleaned up. (1381647)
  - Physics: Fixed an set of architectural issues with cloth, that improved performance during skinning and simulation. Furthermore enabling and disabling of Cloth components no longer stalls the main thread attempting to recreate the internal physics representation. ("1173457")
  - Physics: Fixed Articulation Bodies teleporting to NaN coordinates when changing joint type at runtime.Markdig.Syntax.Inlines.HtmlInline
    - Fixed Articulation Bodies with spherical joints spinning uncontrollably in some scenarios. ("1418715")
  - Physics: Fixed ArticulationBody Anchor rotation values disappearing when Inspector window width is reduced. ("1393075")
  - Physics: Fixed different Force Modes overwriting previously applied forces for Articulation Bodies. ("1349587")
  - Physics: Fixed non-convex Colliders not being recreated after removing a Rigidbody.Markdig.Syntax.Inlines.HtmlInline
    - Fixed all Colliders not being recreated after removing an Articulation Body. ("1322843")
  - Physics: Fixed Null Reference Exception when entering play mode with the Cloth Constraints window open. ("1371050")
  - Physics: Fixed ArticulationBody indices so they match when using methods like GetJointPositions and GetDriveTargets. ("1386970")
  - Physics: Fixed ArticulationBody indices so they match when using the GetDriveForces method. ("1397106")
  - Physics: Removed SetJointAcceleration methods as they were added by mistake and not serving a purpose. ("1322614")
  - Physics 2D: Fixed an issue now that when a CompositeCollider2D is copied to a new GameObject, any persisted 2D Collider paths are rebuilt if they are no longer appropriate to the new hierarchy. ("UUM-7860")
  - Physics 2D: Fixed an issue where "Rigidbody2D.IsTouching()" resulted in incorrect results even though there were valid contacts. ("UUM-7698")
  - Physics 2D: Fixed and issue where the ContactPoint2D relative velocity reported was incorrect when using Continuous Collision Detection. ("UUM-6574")
  - Physics 2D: Fixed incorrect tooltip information regarding keyboard shortcuts, displayed for the Edit Collider button in the Inspector view for all 2D Colliders. ("1393523")
  - Plugins: Fixed a typo in the Vulkan native plugin documentation.
  - Prefabs: Added a PrefabFamilyPopup for Prefab Assets. This popup gives an overview of the inheritance tree for a selected Prefab Asset along with the number of overrides per variant for consistency with the Material Variant popup. (1393268)
  - Prefabs: Added ability to revert a property override on a single/multiple Prefab instance(s) if an ordinary GameObject is also selected. ("1370630")
  - Prefabs: Added components in prefab variants now has more correct handling of the order. ("1165214")
  - Prefabs: Added components on a prefab instance can now be reordered and have the order persisted. ("1275173", "1276047", "1297737")
  - Prefabs: Added public callbacks before and after unpacking prefab instances. (1393216)
  - Prefabs: Enabled saving Prefab Instances with missing source Markdig.Syntax.Inlines.HtmlEntityInline disabled dragging Prefab Instances merged as missing. ("1362794")
  - Prefabs: Enabled user clean-up of unused removed components from Prefab instances from the Prefab Overrides Window and via Scene Hierarchy context menus. Details of removals are added to the Editor.log. ("1389000")
  - Prefabs: Exposed loadedSceneCount in SceneManager and updated documentation. ("1312900")
  - Prefabs: Fixed crash when opening scenes in builds that had missing Prefab sources. ("UUM-2546")
  - Prefabs: Fixed crashes caused by transform access before Awake. ("1166612")
  - Prefabs: Fixed OnValidate is called twice when duplicating Prefab instances in the scene. ("1373124")
  - Prefabs: Fixed Overrides window height is not adjusted when notifications are also present in this window. ("1393028")
  - Prefabs: Fixed regression of prefab override text not being bold.
  - Prefabs: Fixed so you can only create variants out of models. (1393245)
  - Prefabs: Fixed the Scene icon in the Hierarchy window so it scales correctly with Display Scales above 125%. ("1403415")
  - Prefabs: Fixed two prefab bugs and made sure data loads correctly with the latest version. (1410570, 1410577)
  - Prefabs: Improved the error messages when Prefab Assets are missing when you import and load scenes. (1399734)
  - Profiler: Added MarkerFlags.AvailabilityNonDevelopment to ensure consistency with declarations in IUnityProfiler.h. ("1376843")
  - Profiler: Fixed a crash on profiler data file load that was caused by duplicate markers with different IDs.
  - Profiler: Fixed a GC.Alloc error messages for Fake-Null objects allocated for GetComponent calls in the Editor not getting filtered in the Profiler when the "Collapse EditorOnly Samples" option is on, which is the default. ("1378339")
  - Profiler: Fixed a potential crash when you load AudioClips. (1387299)
  - Profiler: Fixed consistency of profiler stat flags between development and release Players on all platforms but OSX/iOS. ("1376913")
  - Profiler: Fixed failures in opening local documentation files from Editor on macOS. ("UUM-6164")
  - Profiler: Fixed freeze caused when opening profiler data recorded on Editor versions 2019.4.28f1 and prior. ("UUM-2234")
  - Profiler: Fixed issue on Metal where an error message about texture binding may appear in some situations. ("1398282")
  - Profiler: Fixed issue where autoconnecting to/disconnecting from profiling tools could cause a crash. ("1383511")
  - Profiler: Fixed Memory Profiler capture reloading managed objects and altering serializable fields. ("1387503")
  - Profiler: Fixed Memory Profiler incorrectly reported memory regions on some platforms. ("1369231")
  - Profiler: Fixed profiler not opening the correct version of the documentation. ("1402516")
  - Profiler: Fixed ProfilerMarker initialization and usage in Release players. (UUM-9541)
  - Profiler: Fixed SRP profiler marker doesn't work in deep profiler mode. ("1372769")
  - Profiler: Fixed System Used Memory values being lower than expected on GameCore. (UUM-7060)
  - Profiler: Fixed the deadlock in Memory Profiler gfx resources tracking code when you enable the profiler. (1424623)
  - Profiler: Fixed the Module Editor so it doesn't execute a redundant loop when collecting counters for display. ("1377994")
  - Profiler: Fixed the OpenGL setting so it doesn't appear in the UWP project settings.
  - Profiler: Prevented whitespace only display names for Profiler Modules created via the Module Editor or the Profiler Module Extensibility API. ("1405678")
  - Profiler: Removed invalidly reported Camera.Render marker from the list available in release mode. (1381559)
  - Profiler: Removed utility thread profiler markers to ensure consistency between Development and Release Players. ("1339387")
  - Profiler: Taking a memory capture no longer logs a message to the console displaying the temporary file location.
  - Scene Manager: Fixed an issue where opening a broken scene with light mapping enabled could crash the editor. ("UUM-9319")
  - Scene Manager: Fixed EditorApplication.hierarchyWindowItemOnGUI callback isn't called when scrolling with multiple Scenes loaded. ("1403105")
  - Scene Manager: Fixed errors when Lighting Explorer is docked with Scene view and  you double-click on a gameobject in the Hierarchy. ("1401261")
  - Scene Manager: Fixed readability issue in hierarchy with multiple scenes for Dark theme. (1330670)
  - Scene Manager: Fixed that copying GameObjects into another Scene was renaming them with an incremented number when not needed. ("1371127")
  - Scene Manager: Fixed unnecessary save pop-up window is shown when creating a new Scene with 'Load additively' checked from the Scene template dialog. ("1395265")
  - Scene/Game View: Ensured that you have a valid current tool when you use shortcuts in custom contexts. (1384461)
  - Scene/Game View: Fixed "Scale All" tool exit on right click. ("1398848")
  - Scene/Game View: Fixed a case where clicking the title of an Overlay could unnecessarily rebuild the contents. (1419892)
  - Scene/Game View: Fixed a crash caused by changing the base class of a custom editor to MonoBehaviour while the editor is active in the current the selection. ("1379123")
  - Scene/Game View: Fixed a crash when exiting play mode with a GameObject that is not associated with a scene.
  - Scene/Game View: Fixed a possible crash when setting scene visibility properties with corrupted data. ("1372736")
  - Scene/Game View: Fixed additional tool not left after leaving contex. (1395110)
  - Scene/Game View: Fixed button size for ToolContext button. (1379515)
  - Scene/Game View: Fixed case where canceling an overlay drag with context click could result in the overlay container preview persisting. ("1344854")
  - Scene/Game View: Fixed DrawMode and GameObjectContext icons resolution. ("1399284")
  - Scene/Game View: Fixed Editor Tools incorrectly being made available when selecting assets. (1388647)
  - Scene/Game View: Fixed EditorToolManager calling multiple OnWillBeDeactivating when entering playmode. (1398041)
  - Scene/Game View: Fixed instability cause by the test Picking/PhysicsDebugDraw/TestBoxCollider. (1396900)
  - Scene/Game View: Fixed issue where VFX graph overlays would appear as docked toolbars on first show. (1392478)
  - Scene/Game View: Fixed missing selection outline rendering in filtered scene views. ("1392693")
  - Scene/Game View: Fixed Overlay popups incorrectly closing when opening a Color field selector. (1373436)
  - Scene/Game View: Fixed Overlays with a default DockZone.Floating attribute overlapping toolbars. (1408370)
  - Scene/Game View: Fixed Pivot Mode and Pivot Rotation buttons incorrectly wrapping text when using Japanese editor localization. ("1388372")
  - Scene/Game View: Fixed root gizmo ordering when selecting rect transforms. ("1377544")
  - Scene/Game View: Fixed so that the selection order when you click on overlapped UI elements is determined by the order they are rendered in.
  - Scene/Game View: Fixed so the restored overlay preset sends displayChanged events. (1398366)
  - Scene/Game View: Fixed toolbar dropdown toggle buttons not highlighting on hover. ("1379444")
  - Scene/Game View: Fixed vertex/surface snapping behavior. ("1388556")
  - Scene/Game View: Fixed OnDrawSelectedHandles.OnDrawHandles() to be reactive to the gizmo activation state. (1384838)
  - Scene/Game View: Fixed SceneView incorrectly subscribing to EditorApplication.update multiple times when maximizing and un-maximizing window.
  - Scene/Game View: Scene/Game View: Fixed "Scene View Render Mode Textured" shortcut throwing an exception. ("1369377")
  - Scripting: Added a warning when Unity can't deterministically make a reference, the rule is that one needs to have same name.Markdig.Syntax.Inlines.HtmlInline
    - Fixed Roslyn Analyzers to run on startup.Markdig.Syntax.Inlines.HtmlInline
    - Folders with name Foo.cs are not included as script change and included in the compilation.
  - Scripting: Added an automatic redirect to the assembly by name. (1393045)
  - Scripting: ApiUpdater could corrupt sources when updating attributes with parameters.
  - Scripting: Application.logMessageReceived callbacks are restored on re-entering play mode when domain reload is disabled. ("1378388")
  - Scripting: Changed Compilation+Domain reload to happen before Import so we can use the domain to extract the information. This means that that we are not depending on import order anymore. ("1223295")
  - Scripting: Don't cast Mathf.Abs to float when passing a float value (increases performance). ("1372997")
  - Scripting: Fixed a crash of the editor when calling DestroyImmediate(this) within a MonoBehaviour Reset method. ("1391014")
  - Scripting: Fixed a crash of the editor whenever coroutines recursively call themselves.
  - Scripting: Fixed a crash that occured when you performed a memory capture with the profiler while a ScriptedImporter type was still alive. ("1405597")
  - Scripting: Fixed an issue where adding a component declared in a nested class could end up adding the wrong component type. ("UUM-9221")
  - Scripting: Fixed an issue where Application.logMessageReceived can be called from a job, when the job is scheduled on the main thread. ("UUM-3085")
  - Scripting: Fixed an issue where applying player build settings on entering play mode does not work properly. ("1330433")
  - Scripting: Fixed an issue where assigning a Scriptable Object type to a scriptable object asset would fail. ("1375945")
  - Scripting: Fixed an issue where define constraints on unity's pre-defined symbols like "UNITY_INCLUDE_TESTS" were misbehaving for Precompiled assemblies. ("1379943")
  - Scripting: Fixed an issue where missing references in MonoScript default references were displayed as None instead of Missing. ("1345194")
  - Scripting: Fixed an issue where scripts created trough the "Add Component" would not use custom script templates. ("1298935")
  - Scripting: Fixed an issue where yielding WaitForEndOfFrame was called too many times per Editor player loop. ("1391440")
  - Scripting: Fixed an issue while doing domain reloads, we sometimes got the Standard default shader. (UUM-4383)
  - Scripting: Fixed case when double-clicking message wouldn't open the correct file and line. ("1385910")
  - Scripting: Fixed case when trying to serialize generics with generic fields of types from different assemblies. ("UUM-8844")
  - Scripting: Fixed Disabled Plugin Assembly validation not working on startup. (UUM-4560)
  - Scripting: Fixed issues with operation on invalid gc handles. As part of this 2 new asserts are introduced that are triggered when invalid gc handle operations are detected. The operations are skipped when detected to avoid scripting domain / memory corruption. (1394146)
  - Scripting: Fixed memory error caused in ArticulationBody.GetDenseJacobian. ("1420957")
  - Scripting: Fixed possible Editor hang while it waits for AssemblyUpdater when importing assemblies. ("UUM-7944")
  - Scripting: Fixed potential AssemblyUpdater assembly corruption if the assembly referenced specific Texture.Resize() overloads.
  - Scripting: Fixed Scripting Defines Symbols not being shown correctly in the Player Settings for platforms that aren't the default platform (usually the Editor's platform). ("UUM-3083")
  - Scripting: Fixed so that Unity uses the newest version (by assembly name) of an assembly when there are duplicates. ("1291253")
  - Scripting: Fixed so the AssemblyBuilde picks up analyzers configured in the project.
  - Scripting: Improved performance of GetComponents(ListMarkdig.Syntax.Inlines.HtmlEntityInlineTMarkdig.Syntax.Inlines.HtmlEntityInline) by ~30x. ("1376488")
  - Scripting: Removed unnessary compilation during startup when no file on disk has been detected. (1407952)
  - Scripting: When no Asmdef is referenced by an Assembly definition reference, make sure the "UseGuids" option is disabled. ("1182337")
  - Scripting: When no reference is added to an Asmdef, make sure the "UseGuids" option is disabled. ("1310994")
  - Scripting: When using ObjectFactory.CreateInstance with a custom type deriving directly from UnityEngine.Object, a clearer exception message is thrown. ("UUM-7896")
  - Search: Added support for non capturing groups and escaped parentheses in QueryEngine regex filters. (1379908)
  - Search: Disabled drag and drop for the advanced object selector to prevent issues. (1423711)
  - Search: Fixed advanced search picker do not list Transform objects and focus is not on the search field. (1394512)
  - Search: Fixed assets can't be found using the name: filter in Unity Search. ("1416653")
  - Search: Fixed error show in the console when the project is launched with the Asset Store Search window open. ("1367675")
  - Search: Fixed package visibility toggle is ignored when searching in the Project window using the advanced search engine. ("1336739")
  - Search: Fixed search cannot find asset by path after it has been moved without any changes. ("1389394")
  - Search: Fixed sub asset filtering when using the search object picker.
  - Search: Fixed test runner triggers an asset search index update when running play mode tests. ("1394039")
  - Search: Fixed Unity freezes when using foreach in the main UI thread on ISearchList if search sessions are asynchronous. (1381621)
  - Serialization: Avoid a crash and log error message when struct assigned to SerializeReference field. ("UUM-661")
  - Serialization: Fixed a case where enum fields on SerializeReference instance would show up as int if an enum field was present prior to SerializeReference instance on the host object. (1401172)
  - Serialization: Fixed bug in YAML parsing, where spaces in double quoted multi-line strings could be lost when there was an escaped newline directly at the end of a line. ("1345149")
  - Serialization: Fixed bug that was incorrectly printing object's identifier in error message, when there are duplicated objects in an asset file. ("1388565")
  - Serialization: Fixed case where Enums could display as an Integer fields in the Inspector, when working with SerializedReference fields and doing an Undo operation. (UUM-608)
  - Serialization: Fixed crash during domain reload when user changed state during OnBeforeSerialize. ("1360518")
  - Serialization: Fixed EditorUtility.CopySerialized failing in some case where there are [SerializedReference] present. ("1265844")
  - Serialization: Fixed issue where a PropertyModification targetting a serialize reference instance which was no longer being present could cause memory corruption. (1415837)
  - Serialization: Fixed padding due to alignment after a resize array. ("1254132")
  - Serialization: Fixed performance regression reading yaml objects containing large number of SerializeReference instances which were created prior to 2021.2. ("UUM-15130")
  - Serialization: Fixed regression where if a mesh was used in VFX and included in an AssetBundle there could be indeterminism in its streaming info offset field. ("UUM-12721")
  - Serialization: Fixed SerializedProperty::enumDisplayNames to support custom enum member labels specified with InspectorNameAttribute. ("1375077")
  - Serialization: Fixed the format for unity object references used by JsonUtility in the standalone player to match the format used in the editor. In standalone the property name changes from m_FileID to instanceId.
  - Serialization: Fixed to avoid a possible crash in the support for enum fields, when a class in one namespace is included as a field inside a class with the same name from a different namespace. ("1417532")
  - Serialization: Hash128 field will now generate a single PropertyModification when value is different, instead of 1 per byte. ("1379872")
  - Serialization: Prevent "Objects are trying to be loaded during a domain backup. This is not allowed as it will lead to undefined behaviour!" from occuring on DomainReload when SerializeReference instance contained a Unity.Object reference to an already unloaded asset. ("UUM-2116")
  - Serialization: Properly track managed-only classes so they are not stripped by the il2cpp linker. ("1359259")
  - Serialization: When performing an undo on an object that uses SerializeReference, reuse existing C# objects, instead of recreating them. ("UUM-651")
  - Services: Added installation identifiers to default crash report metadata.
  - Services: Fixed issue that would make it so that services could not be used after computer returned from sleep.
  - Services: Link Project ID button in Services tab now activates properly when the organization name and project name selected are the same.
  - Services: Marked UserInfo APIs as obsolete.
  - Services: Selected project in Services tab is now properly reset and Link Project ID button is now properly disabled when changing organization.
  - Shadergraph: Fixed a compilation bug in BiRP Target in some variants with lightmaps. (UUM-7354)
  - Shadergraph: Fixed broken documentation URL for block nodes. ("1381488")
  - Shadergraph: Fixed shader graph incorrectly stripping variants for BiRP shaders that weren't built with shader graph. ("UUM-14800")
  - Shadergraph: Fixed SRP-batching when PVT stacks are bound per material by properly declaring properties for PVT stacks.
  - Shadergraph: Fixed the behavior of checkerboard node with raytracing.
  - Shadergraph: Fixed the sample buffer nodes in ShaderGraph.
  - Shadergraph: Fixed unity_StereoEyeIndex error when building XR project with URP Fullscreen master node containing Shader. ("SGB-278")
  - Shaders: Exposed Player settings to control shader memory usage at runtime. ("UUM-5583")
  - Shaders: Fixed "#pragma require Native16Bit" not setting appropriate DXC flags on DX12. ("1388292")
  - Shaders: Fixed "State comes from an incompatible keyword space" assertion firing sometimes when building asset bundles. (UUM-11958)
  - Shaders: Fixed a bug where integer properties were sometimes being declared as floats instead of integers. (1387228)
  - Shaders: Fixed a case where compiling shaders wasn't showing a modal progress bar. ("1403476")
  - Shaders: Fixed a crash when calling GetShaderKeywords on a user-constructed ShaderKeywordSet. ("UUM-2536")
  - Shaders: Fixed a crash when changing Scene view Draw mode from Shaded to Custom. ("UUM-9452")
  - Shaders: Fixed a GLSL translation issue so the structured buffer reads doesn't miss a cast. ("1417232")
  - Shaders: Fixed a null pointer dereference with ShaderVariantCollection API. ("UUM-16058")
  - Shaders: Fixed a rare crash when opening a project with compute shaders. ("UUM-10259")
  - Shaders: Fixed a warning log error when calling EnableKeyword on RenderingCommandBuffer. (1421883)
  - Shaders: Fixed an error that occurred when drawing an instanced mesh with async shader compilation enabled. ("UUM-13174")
  - Shaders: Fixed an error with the pass code for a grab pass. Also added IsGrabPass to the Pass api so a user can pre-emptively check a pass. ("1383155")
  - Shaders: Fixed an issue where Material.SetOverrideTag would not warn when trying to override LightMode. ("UUM-11988")
  - Shaders: Fixed an issue where shader import didn't register searched include file paths as import dependencies. ("1394035")
  - Shaders: Fixed catching preprocessing time errors for surface shaders, now providing more helpful error messages for users. ("1411454")
  - Shaders: Fixed compute shaders to allow you to cancel after you select show compiled code. ("1367624")
  - Shaders: Fixed HLSLcc half precision on sample and MOVC combo. ("1398163")
  - Shaders: Fixed shader compilation error when using bit-shift operations to create the destination vector from the scalar source. ("UUM-16113")
  - Shaders: Fixed shader translation for firstbithigh, firstbitlow, and reversebits. ("1399910")
  - Shaders: Fixed Shader Variant Collection UI not working correctly with shaders with stage-specific keywords. ("UUM-12220")
  - Shaders: Fixed so that when you add packages to a project, it updates the Shader Compiler include search paths. ("1393842")
  - Shaders: Fixed that progressive shader warmup was not terminating when a single shader required three or more calls to warm up.
  - Shaders: Fixed the GLSL/Vulkan translation of Gather4_PO_C instruction. ("1399475")
  - Shaders: Fixed the typed buffer size query on GLSL/Vulkan shaders. ("1399478")
  - Shaders: Fixed unintentional low precision sampling on mobiles when using a inline sampler states. ("1379057")
  - Shaders: Fixed firstbithigh translation in glsl and vulkan. ("1413173")
  - Shaders: Fixed MaterialPropertyBlock.SetInteger with instanced draws. ("1397113")
  - Shaders: Made the compute shaders respect #pragma enable_cbuffers. ("1416880")
  - Source Code Build: Fixed so PlatformDependent/UnixCommon isn't stripped from source code releases.
  - SRP Core: Added Shader Stripping Watcher so you get notifications when a Shader Variant is stripped.
  - SRP Core: Fixed an issue so that APV dilated data not being written back to disk. ("1403357")
  - SRP Core: Fixed NaN when you bake high intensity lights.
  - SRP Core: Fixed probes so that the max distance between then are respected. ("1415310")
  - SRP Core: Fixed realtime subdivision so it culls empty cells. ("1418164")
  - SRP Core: Fixed shadow cascade editor so the snatches now appear and the gradient appearance is improved. (UUM-12585)
  - SRP Core: Fixed so that data isn't cleared for probes to be dilated into, to avoid bright colored splotches. ("1413078")
  - SRP Core: Fixed the APV touchup volume test so it uses OBB instead of AABB.
  - SRP Core: Fixed the reset of APV volume placement when using multi selection. ("1413009")
  - SRP Core: Fixed uninitialized memory for virtual offset.
  - SRP Core: Hid the warning on the reflection probe if you disable APV. (1408219)
  - Terrain: Fixed an issue where Terrain shadows were not rendered when zooming out in Scene/Game View with Deferred Rendering enabled. ("UUM-1860")
  - Terrain: Fixed bug https://fogbugz.unity3d.com/f/cases/1396818/. When accessing the GUI for Paint Texture Tool, it accesses the editor width through EditorGUIUtility.currentViewWidth. On the first frame however, this value is 0, so we get a DivideByZeroException. This is fixed by accounting for the instance in which the width = 0 and avoiding division by zero. ("1396818")
  - Terrain: Fixed crash when you assign directly to a TerrainData's detailPrototype array from GUI thread. ("1354240")
  - Terrain: Fixed so Billboard grass doesn't wave faster when more than one camera is active in the scene. ("1358679")
  - Terrain: Fixed so that details and trees don't disappear when you paint height on Terrain. (1394295)
  - Terrain: When selecting a .raw file to import as a Heightmap, the following error is no longer thrown: "EndLayoutGroup: BeginLayoutGroup must be called first".
  - Text: Fixed cursor position reset in UI Toolkit text field when you focus on text field while selectAllOnFocus = false. (1424670)
  - Text: Fixed Text component so that it renders elements with floating point coordinates correctly on machines with locale set to one that uses commas as decimal separators. (UUM-868)
  - Timeline: Fixed Animator culling so it can now be used in conjunction with Timeline without stopping the whole Timeline. ("UUM-17672")
  - uGUI: Expose RaycastManager.GetRaycasters public for use by users making their own EventSystem. ("1379489")
  - uGUI: Fixed an issue where a RectTransform that is part of a nested Canvas would get its values overridden when it would become disabled. ("1374782")
  - uGUI: Fixed an issue where a rouge image would increase the AABB of the canvas, causing its center of rendering to potentially be off shifted from the distance it should be rendered. ("1385838")
  - uGUI: Fixed an issue where events would get registered to prefab object and would be called upon entering play mode. ("1384257")
  - uGUI: Fixed an ArgumentOutOfRange exception when you remove an entry from an EventTrigger during execution. ("1401557")
  - uGUI: Fixed calculation of pointer position when running in multiple display mode and the main display was fullscreen with a non-native aspect ratio. ("UUM-7893")
  - uGUI: Fixed the canvas override sorting behavior when entering play mode. ("1331988")
  - uGUI: Fixed the UGUI Slider OnValueChanged event to be called when the value is changed through the inspector. ("1372975")
  - uGUI: Fixed Graphic.Raycast so it ignores CanvasGroups when they're disabled. ("1409210")
  - uGUI: Made sure the position isn't corrupted when you call SetParent during a Copy as a child by marking the position as valid. ("1376184")
  - uGUI: Some Input Tests on the InputSystem package were failing. Initialize the target view correctly so they work again. (1378084)
  - UI: Fixed missing tooltip for "Screen Weight Distance" in Screen Space Refraction override. (UUM-12116)
  - UI: Fixed the reordering of style after a new file duplicates the style. (1413566)
  - UI: Updated COPPA compliance link.
  - UI Elements: Fixed Min Max slider behaving abnormally when using larger thumb styling. ("UUM-5017")
  - UI Toolkit: Added a UITK version of AnimationTriggersDrawer.
  - UI Toolkit: Added a warning for empty UXML instantiation. ("1407618")
  - UI Toolkit: Added fixed sensitivity to the slider label dragging. (1387793)
  - UI Toolkit: Added pseudo states for Foldout. (1427102)
  - UI Toolkit: Added TreeView to the Standard Controls Library. (1402314)
  - UI Toolkit: Changed so the GenericDropDownMenu is now affected by its BasePopupField font-size. ("1387340")
  - UI Toolkit: EnumFlagsField is now available in the UI Builder Library. (1378011)
  - UI Toolkit: Fixed 1404024: Moving a root item lower in the root of a TreeView doesn't resolve in the correct position. (1404024)
  - UI Toolkit: Fixed a bug where a scale of 0 was affecting the layout of the label. ("1404078")
  - UI Toolkit: Fixed a bug where ListView and TreeView using SelectionType.None would still be selectable with double click and navigation keys. (1381727)
  - UI Toolkit: Fixed a bug where the resolved style's padding would be set to 0 on elements having a measure (label or image). ("1351235")
  - UI Toolkit: Fixed a bug where using different types under the same uxml object could cause them to duplicate in the builder. (1383732)
  - UI Toolkit: Fixed alternate row background sometimes disappearing after a refresh.
  - UI Toolkit: Fixed an issue in the UI builder so the Open in IDE menu option doesn't fail in VisualStudio Code. ("1405443")
  - UI Toolkit: Fixed an issue in the UI Builder so the layout of the UI Builder's inspector doesn't break when you unfold the Text Shadow properties. (1423612)
  - UI Toolkit: Fixed an issue so the ObjectField.objectType configures correctly for built-in types. (1423715)
  - UI Toolkit: Fixed an issue where assigning to both text and value in a TextField from uxml would result in the wrong value being displayed. ("1375721")
  - UI Toolkit: Fixed an issue where changes in UI Builder are lost when editing a 2D sprite. ("1357086")
  - UI Toolkit: Fixed an issue where creating a UI Document would re-generate the UXML schema files every time. ("UUM-3985")
  - UI Toolkit: Fixed an issue where the expanded state of the ListView would not be serialized across selections. ("UUM-1461")
  - UI Toolkit: Fixed an issue where the UI Builder breaks the cursor property when saving by appending a comma between the additional parameters. ("1379099")
  - UI Toolkit: Fixed an issue where the UI Builder would export asset references with resource() instead of url() when the asset path contained a folder with Resources in its name. ("UUM-14889")
  - UI Toolkit: Fixed an issue where the UI Builder would strip the @import directives from a StyleSheet when you save it to disk. ("1404986")
  - UI Toolkit: Fixed an issue where the VisualElement and EnumField's uxml attributes would not get properly clearly after calling "Unset" or "Unset All". (1385056)
  - UI Toolkit: Fixed an issue where UI Toolkit controls under a namespace named "Assets" would cause an exception in the Project pane of the UI Builder.. ("UUM-3481")
  - UI Toolkit: Fixed API documentation for VisualElement.generateVisualContent and MeshGenerationContext. (1398636)
  - UI Toolkit: Fixed backspace support on linux. ("UUM-3695")
  - UI Toolkit: Fixed bind/unbind discrepancies with items in ListView/TreeViews controls.
  - UI Toolkit: Fixed bug where prefabs dragged to the Scene window aren't properly canceled if the drag ends on top of an overlay window. ("1373512")
  - UI Toolkit: Fixed builder selection test. (1292403)
  - UI Toolkit: Fixed color space conversion for text. (1410899)
  - UI Toolkit: Fixed default TreeView.bindItem implementation to set the Label text to its data string representation. (1401943)
  - UI Toolkit: Fixed disabled ObjectFields reacting to drag and drop as if they were not disabled. (1410558)
  - UI Toolkit: Fixed disabled UIDocument still being rendered on editor start. ("1388963")
  - UI Toolkit: Fixed dynamic height caching and reordering issues on ListView/TreeView controls.
  - UI Toolkit: Fixed EventSystem error logged in Editor when entering and leaving Play mode if there's a UIDocument in the scene. (UUM-10360)
  - UI Toolkit: Fixed focus grabbing when you refresh BaseVerticalCollectionView. ("1399006")
  - UI Toolkit: Fixed focusController.focusedElement sometimes still returning element after it was removed from panel. ("1379300")
  - UI Toolkit: Fixed incorrect indentation in the UI Builder when a Foldout element is nested in another Foldout. ("1388475")
  - UI Toolkit: Fixed invalid vertex count shown for UIToolkit draw calls in the frame debugger and the game view statistics. ("UUM-2725")
  - UI Toolkit: Fixed issues with zoom Markdig.Syntax.Inlines.HtmlEntityInline pan in the UI Builder to improve user experience on touchpad devices.
  - UI Toolkit: Fixed layout is skipped if an element has auto margin an its flex direction size is auto. (1393151)
  - UI Toolkit: Fixed ListView events to follow Unity's coding conventions. ("1388926")
  - UI Toolkit: Fixed mismatch between event processing and rendering sorting rules for UGUI canvas and UI Toolkit runtime panel when sorting orders are identical. ("1364449")
  - UI Toolkit: Fixed missing NavigationMoveEvent for controls that wish to respond to Tab navigation that's not specifically tied to a keyboard action. Though there is no way to currently remap how that action is generated, it can be prevented altogether by unticking the "Send Navigation Events" box on the EventSystem component, if one is present in the active scene. ("1336833")
  - UI Toolkit: Fixed multi-editing assets with multiple inspectors open. (1400147)
  - UI Toolkit: Fixed nested scroll view behaviour on mobile scrolling stays in the scroll view that initiated the drag.
  - UI Toolkit: Fixed offset issues and layout delays in default PropertyField on array values when adding or removing items. (1388269)
  - UI Toolkit: Fixed Pick Element in the UI Toolkit debugger. (1374392)
  - UI Toolkit: Fixed PlayerSettings window splitter to stop moving after yo release the mouse. ("1398586")
  - UI Toolkit: Fixed PointerDownEvent.clickCount when receiving a double-click event using UGUI's EventSystem. ("1379054")
  - UI Toolkit: Fixed runtime navigation issues in TextField and composite fields, sometimes not entering text editing mode, or inserting undesired characters when doing so, or not allowing navigation to other elements.
  - UI Toolkit: Fixed shader bug observable on macOS Ventura with AMD gpus that was causing Graphview (e.g. Shader Graph, VFX Editor) edges to be missing. ("UUM-19016")
  - UI Toolkit: Fixed shader bug observable on MacOS Ventura with AMD GPUs that was causing UIToolkit elements to be missing, clipped, or to display incorrectly. ("UUM-18978")
  - UI Toolkit: Fixed showMixedValue in Toggles. ("1294945")
  - UI Toolkit: Fixed Slider not changing value when using GamePad input with InputSystem package. ("1396789")
  - UI Toolkit: Fixed slider property being inverted after saving uxml in UI Builder. ("1408250")
  - UI Toolkit: Fixed slider text field size. ("1382815")
  - UI Toolkit: Fixed so that Inspector bindings don't try to access invalid properties. ("1377648")
  - UI Toolkit: Fixed so the IntegerStyleField dragger is reset in UI Builder. (1394592)
  - UI Toolkit: Fixed so when you hide a GenericDropdownMenu, it gives the focus back to its DropdownField. ("1387335")
  - UI Toolkit: Fixed some Layout Update Struggling issues related to ScrollViews.
  - UI Toolkit: Fixed text artifacts when using a Radeon GPU. ("1393056")
  - UI Toolkit: Fixed the copy-paste of labels that contain rich text so it excludes the rich text tags. (1410973)
  - UI Toolkit: Fixed the highlight when when you hover selectors with a Runtime theme which references an invalid path in the UI builder. (1402309)
  - UI Toolkit: Fixed the InspectorElement layout when parent container flex direction is set to row. (1401384)
  - UI Toolkit: Fixed the layout engine to consider the max-width property on an element with an absolute position and a measure method. ("1379062")
  - UI Toolkit: Fixed the position of the drag line anchor of the TwoPanSplitView when the orientation is changed and when there is margin around the child elements. (1359284)
  - UI Toolkit: Fixed the slider property so it's not inverted after you save uxml in UI Builder. ("1391575")
  - UI Toolkit: Fixed the UI Debugger text highlight when using the search field. ("1361087")
  - UI Toolkit: Fixed the UI Toolkit and UI Builder packages so they aren't accidentally inserted into a users project when there's an indirect dependency from a different package.
  - UI Toolkit: Fixed the dragElement of the scroller so it doesn't go out of the limits when ScrollView.touchScrollBehavior is TouchScrollBehavior.Elastic. ("1404321")
  - UI Toolkit: Fixed the NullReferenceException in transition when an object is selected in the UI builder. (1403727)
  - UI Toolkit: Fixed the Vector2Field value so it's displayed when using View Data Key in the UI Builder. ("1341613")
  - UI Toolkit: Fixed UI Builder reparenting. (1400389)
  - UI Toolkit: Fixed Vector image rendering was ignoring the target rect position. ("1371690")
  - UI Toolkit: Fixed vertices allocation when moving a ScrollView dragger element. (1401928)
  - UI Toolkit: Fixed VisualElement alignment issue in non-standard DPIs. ("1385706")
  - UI Toolkit: Fixed VisualElement holding a reference to its Panel after being removed from the hierarchy. (1371139)
  - UI Toolkit: Fixed VisualElement.CaptureMouse not working when GUIUtility.hotcontrol is set. ("1371023")
  - UI Toolkit: Fixed VisualElements change scaling when mouse moves over a different window on a higher DPI display. ("UUM-7260")
  - UI Toolkit: Fixed warning caused by unprocessed focus events sometimes happening when detaching a UIDocument containing a focused element from its parent panel. ("1378840")
  - UI Toolkit: Fixed columnSortingChanged event sent multiple times when sorting by mouse-clicking on column.Markdig.Syntax.Inlines.HtmlInline
    - Multi sorting is performed using Command modifier in MacOSX instead of Control. ("1400346")
  - UI Toolkit: Fixed IMGUIContainerTests.ChangeOnGUIHandler test instability. (1421514)
  - UI Toolkit: Fixed NullReferenceException when you hover with any Object over the Object Field. ("1407422")
  - UI Toolkit: Fixed: Text Shadow and Outline effects do not render correctly. ("1361130")
  - UI Toolkit: Hid the UI Builder selector tooltip preview when the user adds a new selector. (1398722)
  - UI Toolkit: Improved performance of layout update in display:none cases. (UUM-9694)
  - UI Toolkit: Made it so you can add the RadioButtons manually to RadioButtonGroup and it's considered in the choices property. (1405551)
  - UI Toolkit: Make sure buttons are navigatable by default. ("UUM-5077")
  - UI Toolkit: Make sure read-only InputFields aren't affected by escape. (1404283)
  - UI Toolkit: Optimized layout computation with the use of absolute positioned elements. ("1401339")
  - UI Toolkit: Optimized the UI Builder to reduce overhead when dragging/resizing elements in the canvas. (UI Builder). (1313163)
  - UI Toolkit: Prevented the slider dragger from going out of bounds. ("1404066")
  - UI Toolkit: Stopped BaseVerticalCollectionView Rebuild and RefreshItems from being called when setting bindItem and makeItem to the same value in ListView and TreeView. (1402308)
  - UI Toolkit: The ./jam UIElementsGenerator generates a Markdown file that lists all USS properties.
  - UI Toolkit: The hierarchy tree keeps its expanded state and selection when saving in the UI Builder. ("1385133")
  - UI Toolkit: The UXML Inspector preview clears its Panel and elements receive a DetachFromPanelEvent. ("1393360")
  - UI Toolkit: The Visual Element is rendered with 0 percent alpha value and sets its size to 0 height when changing alpha. ("1344003")
  - UI Toolkit: [UI Builder] Fixed an issue where the ProgressBar Component was missing a field for setting the current value. ("UUM-496")
  - Undo System: Fixed for incorrect sibling order after undo. ("1393058")
  - Undo System: Fixed memory leaks in UndoManager on early returns.
  - Undo System: Fixed so that OnDestroy is called during undo and redo. ("1399998")
  - Undo System: Fixed so unnecessary warnings aren't produced when you delete multiple children, then undo and redo. ("1417422")
  - Undo System: Fixed the incomplete undo backup. ("1409543")
  - Undo System: Fixed Undo so it doesn't create a component when it's game object is no longer existing and the undo operation does not intend to create it. ("1419944")
  - Universal RP: Fixed 2D Spot Light artifacts in light. ("UUM-7839")
  - Universal RP: Fixed alpha discard on Unlit Sprite targets for Shadergraph. ("UUM-6998")
  - Universal RP: Fixed an issue in deferred rendering mode where the Material inspector would log errors about color and depth dimensions not matching. ("UUM-15631")
  - Universal RP: Fixed decals to pass correct viewDirectionWS to screen space and gbuffer lighting.
  - Universal RP: Fixed depth pre-pass being always executed on GLES devices. ("UUM-8381")
  - Universal RP: Fixed Gizmos in Game View when using Viewports (UUM-7069).
  - Universal RP: Fixed incorrect light brightness when using SimpleLit shader. ("UUM-7851")
  - Universal RP: Fixed instacing error when decals loaded, but not the decal shaders.
  - Universal RP: Fixed light banding artifacts on normal maps. ("UUM-11325")
  - Universal RP: Fixed soft shadow filtering quality when using large empty shadow atlas. Use allocated atlas size instead of requested size. ("UUM-10520")
  - Universal RP: Fixed specular highlight edges on Android. ("UUM-7654")
  - Universal RP: Set default contribution to 0 for ColorLookup VolumeComponent, which makes the interpolation with the implicit default global volume behave as expected. ("UUM-12321")
  - Universal Windows Platform: Fixed a crash when entering a composition string longer than 64 characters into the IME. ("UUM-928")
  - Universal Windows Platform: Fixed Build Markdig.Syntax.Inlines.HtmlEntityInline Run picking the wrong instance of Visual Studio which potentially doesn't have required components installed to deploy the application. ("UUM-931")
  - Universal Windows Platform: Fixed case of Application.OpenURL asserting due to not freeing temporary memory. ("UUM-2205")
  - Universal Windows Platform: Fixed development builds not starting up on Windows 10 versions prior to build 15063.
  - Universal Windows Platform: Fixed errors when you use the System.Web.HttpUtility class on UWP. ("1417085")
  - Universal Windows Platform: Fixed float values stored in player prefs getting corrupted on startup. ("UUM-14671")
  - Universal Windows Platform: Fixed IL2CPP failing to initialize when called from Windows Runtime component.
  - Universal Windows Platform: Fixed IL2CPP failing to initialize when invoked in background task. ("UUM-9644")
  - Universal Windows Platform: Fixed memory leak when creating new PlayerPrefs with key that is longer than 25 characters. ("1422374")
  - Universal Windows Platform: Fixed so that creating new project sets the package identity name after the project name, rather than the template name.
  - URP: Fixed a capture pass issue so the recorder screenshot doesn't miss the post processing results. (1405209)
  - URP: Fixed a capture pass issue so the recorder screenshot doesn't miss the post processing results. (1405224)
  - URP: Fixed a shader compilation error on certain platforms. ([URP-1415](https://jira.unity3d.com/browse/URP-1415)).
  - URP: Fixed a shader compiler issue with mismatching variable types when calling lerp.
  - URP: Fixed a stencil test issue when a RendererObjects feature is injected after Post Processing. ("1403640")
  - URP: Fixed an issue in where a user could stack cameras with different renderers and not get a warning in the editor (this is not supported).
  - URP: Fixed an issue in where the _ScreenParams is not setup correctly.
  - URP: Fixed an issue that the Shaders now correctly fallback to error shader. (UUM-1417)
  - URP: Fixed an issue where camera UI inspector's clearFlag is not respected. ("UUM-3991")
  - URP: Fixed an issue where specular color was not matching behaviour in Legacy and HDRP. ("1326941")
  - URP: Fixed camera sorting layer render target not being allocated in the 2d renderer.
  - URP: Fixed FXAA quality issues when render scale is not 1.0.
  - URP: Fixed incorrect Decal rendering when rendescale is different than one.
  - URP: Fixed incorrect Depth for Camera Stacks. ("1404157")
  - URP: Fixed inspector documentation URLs for the URP asset and Universal Renderer asset.
  - URP: Fixed Light2D upgrading issue with m_AlphaBlendOnOverlap property. ("UUM-1845")
  - URP: Fixed material converter not being able to be called in batch mode. (1375962)
  - URP: Fixed materials that use Autodesk Interactive shader to convert correctly. ("1391912")
  - URP: Fixed missing depth for Depth of Field in an overlay camera. ("1365623")
  - URP: Fixed property wrappers around material properties.
  - URP: Fixed setters so they don't cause an infinite loop in URP pipeline asset.
  - URP: Fixed so objects don't disappear when using Depth Priming and Rendering Debugger. (1379409)
  - URP: Fixed stale light cookie data when the last cookie is removed inside a prefab.Markdig.Syntax.Inlines.HtmlInline
    - Added a warning when there are more visible lights than maximum light cookies. ("1400696")
  - URP: Fixed the shader graph usage of Unity cross fade. (1423201)
  - URP: Fixed vertex color for sprite shapes in URP 2D. ("UUM-1921")
  - URP: Fixed wireframe view in URP ([UUM-2548](https://jira.unity3d.com/browse/UUM-2548)).
  - URP: Improved fallback to single shadow cascade on GLES2. ("1418462")
  - Version Control: Fixed an editor hang when you enter Play Mode.
  - Version Control: Fixed capitalization of Pending Changes and File History tab namesMarkdig.Syntax.Inlines.HtmlInline
    - Fixed the amount of spacing after the Item column title in the Pending Changes tabMarkdig.Syntax.Inlines.HtmlInline
    - Removed pin striping from line items in File History tabMarkdig.Syntax.Inlines.HtmlInline
    - Fixed project view context menu and icons missing after Collaborate project migrationMarkdig.Syntax.Inlines.HtmlInline
    - Fixed migrated projects not downloading correctly from Unity Hub.
  - Version Control: Fixed editor refresh triggering when a workspace update is in progressMarkdig.Syntax.Inlines.HtmlInline Fixed pending changes show global ignored as privateMarkdig.Syntax.Inlines.HtmlInline Removed encryption checkbox from create organization dialog.
  - Version Control: Fixed editor unhandled errors being hijacked by the plugin Fixed toolbar icon not displaying incoming changes notification when Plastic window is closed.
  - Version Control: Fixed performance issue with FindWorkspaceForPath method called multiple times every frameMarkdig.Syntax.Inlines.HtmlInline Fixed performance issue with UI.CooldownWindowDelayer.OnUpdate running on project without Plastic SCM workspace.
  - Version Control: Fixed performance regression in large projects due to FindObjectsOfTypeAll calls.Markdig.Syntax.Inlines.HtmlInline
    - Fixed a working mode error after migration from Unity Collaborate.
  - Version Control: Fixed Plastic X not opening from plugin menu Fixed error when trying to invite members to project.
  - Version Control: Fixed VCCache::instance != NULL error when opening a project with Plastic window opened.
  - VFX Graph: Added dedicated icons to the VFX Subgraph operator and block windows.
  - VFX Graph: Added missing operators to the node search window.
  - VFX Graph: Allowed attribute-less systems.
  - VFX Graph: Allowed for attribute-less systems.
  - VFX Graph: Changed so when you create a new VFX of the same name as an already opened VFX, it will reuse the existing window.
  - VFX Graph: Creating a new VFX of the same name as an already opened VFX reuses the existing window.
  - VFX Graph: Displayed context labels in the inspector with all outputs.
  - VFX Graph: Enabled specifying the maximum point count in Attribute from Map blocks. ("UUM-542")
  - VFX Graph: Fixed an issue to avoid unnessary allocations in the SDF Baker by using Mesh Buffer API. ("UUM-2285")
  - VFX Graph: Fixed an issue with Motion Vector target offset with Line Output. (UUM-3303)
  - VFX Graph: Fixed crash when loading a subscene with VFX in DOTS (UUM-13772)
  - VFX Graph: Fixed delayed property changes so they apply when you save. (1422686)
  - VFX Graph: Fixed GPU event particle init after restarting VisualEffect. ("1378335")
  - VFX Graph: Fixed Motion vectors in XR.
  - VFX Graph: Fixed null reference exception when opening another VFX and a debug mode is enabled.
  - VFX Graph: Fixed possible NaNs in Vortex Subgraph node.
  - VFX Graph: Fixed resetting of needsComputeBounds. ("1414185")
  - VFX Graph: Fixed single pass stereo rendering issue with SG integration due to uncorrectly setup instanceID. ("UUM-540")
  - VFX Graph: Fixed so that the enabled state of VFX blocks and operators are preserved after copy/paste.
  - VFX Graph: Fixed so that when you duplicate Event Array elements, it creates linked instances of the elements. (1411756)
  - VFX Graph: Fixed so that when you edit the values in the graph after saving, it impacts the system in real-time.
  - VFX Graph: Fixed the Preserve Specular Lighting mode on non-Shader Graph lit outputs. ("UUM-13778")
  - VFX Graph: Fixed the behavior of Tangent Space in ShaderGraph.
  - VFX Graph: Fixed the mixing of Vector4 Markdig.Syntax.Inlines.HtmlEntityInline Color with SampleGraphicsBuffer within the same graph. ("1406873")
  - VFX Graph: Fixed the sticky note title so it keeps the selected font size when you edit it.
  - VFX Graph: Fixed Undo/Redo with Prefabs. ("1395584")
  - VFX Graph: HDRP Decals are not in experimental.
  - VFX Graph: Improved node position when you create a node by dragging an edge.
  - VFX Graph: Made the shader graph exposed properties order consistent with the shader graph blackboard in the Output Particle blocks.
  - VFX Graph: Missing clear of pending events while calling Reinit. (1386548)
  - VFX Graph: Reduced GC.Allocs in the SceneViewGUICallback. ("1305929")
  - VFX Graph: Resized the custom operator to the minimum size when you change input types.
  - VFX Graph: Showed opened VFX asset in inspector when you click in a void area and unselect node when VFX graph lose focus.
  - Video: Added "Can't play movie" error message when setting VideoPlayer.url to an invalid url through a script. ("UUM-11380")
  - Video: Fixed the integer division in MediaRational. (1383367)
  - Video: Fixed the timing of how the first video's frame is drawn when the H.264 B-Frames video is used. ("1341903")
  - Video: Fixed Video's Alpha that was not transparent when built with WebGL.
  - Video: Fixed virtual camera not playing due to DevicePath missing. ("UUM-3367")
  - Video: Reduced the number of warnings when the color standard is unknown. ("1374819")
  - Video: VP8 Video Encoder bitrate was corrected to use bps instead of kbps. (UUM-12918)
  - Virtual Texturing: Added a notice regarding the experimental state of Virtual Texturing to the Player Settings editor.
  - Virtual Texturing: Added a warning for Procedural Virtual Texturing clarifying that the feature is not currently supported.
  - Virtual Texturing: The experimental state of Streaming Virtual Texturing and Procedural Virtual Texturing was not clearly indicated in the API docs and Manual, this has been corrected. For clarity, these features should not be used in production.
  - Web: Blur active element before focusing window to correct behavior on Firefox. ("UUM-1169")
  - WebGL: Added fallback configuration for company name, product name and product version to ensure the web cache is always enabled. (UUM-3944)
  - WebGL: Added streaming download of response body in UnityWebRequest. ("UUM-1149")
  - WebGL: Fixed a bug where losing focus on the player would cause buttons to become stuck. ("UUM-3230")
  - WebGL: Fixed a bug where pressing the CMD key on Safari would cause buttons to become stuck. (UUM-12013)
  - WebGL: Fixed audio keeps playing when scene is unloaded. ("1383561")
  - WebGL: Fixed bug where the rendering canvas wasn't resizing when changing orientation. ("UUM-1135")
  - WebGL: Fixed connection between the WebGL player and the profiler. ("UUM-798")
  - WebGL: Fixed extra space between mobile soft keyboard and input field. ("1409313")
  - WebGL: Fixed playback of audio clips on timeline. ("UUM-6801")
  - WebGL: Fixed stopping of compressed audio clips. ("1384382")
  - WebGL: Improved shader compilation performance problems on MacOS when you use GPU instancing. ("1415766")
  - WebGL: Made RGB9E5 selectable as a target texture format for the WebGL texture importer settings. ("1424639")
  - WebGL: Made RGBAHalf selectable as a target texture format for the WebGL texture importer settings. ("1422823")
  - WebGL: Made WebGL ignore BuildOptions.AllowDebugging so it can build when the option is used.
  - WebGL: Optimized deferred rendering for WebGL. (1400439)
  - Windows: Fixed builds launching on the wrong display after upgrading the project from Unity 2020.3. If the project was previously upgraded to 2021.3, this may cause the builds to start up on a different display first. Use Win + Shift + Left/Right arrow to move the window to the desired display. ("UUM-4178")
  - Windows: Fixed IL2CPP runtime compilation failing when building C++ code using Visual Studio 2022 17.4 or newer. ("UUM-17921")
  - Windows: Fixed lack of profiler output from il2cpp when building player via Visual Studio for UWP Markdig.Syntax.Inlines.HtmlEntityInline Windows. (UUM-4412)
  - Windows: Fixed resolution misdetection on vertical displays, which caused APIs like Screen.currentResolution or Screen.GetDisplayLayout() return wrong data and the player contain letterboxing when it shouldn't. ("UUM-7552")
  - Windows: Fixed the game window to stay on the right display when you switch to exclusive fullscreen mode at a resolution that's significantly lower than the display's native resolution. ("UUM-1513")
  - Windows: Fixed the input System to process gamepad input in the Editor's GameView when you focus a different window. (1421559)
  - Windows: Fixed Screen.currentResolution so it has a correctly rounded refresh rate. ("UUM-1512")
  - Windows: Removed "Unity playback engine" text from the property sheets for Windows player executable. ("UUM-15330")
  - Windows: Restored the display enumeration behaviour of Unity 2021.1 and earlier: the primary display will always be treated as display 1.
  - XR: Fix audio speed up when using MLAudio on Magic Leap.
  - XR: Fixed a crash when using MRTK on MagicLeap2.
  - XR: Fixed an error string that was not actionable by user so it no longer appears in the Unity editor's Console window. (1217949)
  - XR: Fixed texture memory leak on texture uploads.
  - XR: Fixed Unity VR Splash screen so it shows up on UWP.
  - XR: Fixed XR devices not following RunInBackground setting in Player Setting on PC standalone and playmode in Editor.

  Final 2022.2.0f1
ReleaseNotesUrl: https://unity3d.com/unity/whats-new/2022.2.0
PurchaseUrl: https://store.unity.com/
# InstallationNotes:
Documentations:
- DocumentLabel: Manual
  DocumentUrl: https://docs.unity3d.com/2022.1/Documentation/Manual/
ManifestType: defaultLocale
ManifestVersion: 1.2.0
