# Created with YamlCreate.ps1 v2.1.0 $debug=QUSU.7-2-1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.1.0.schema.json

PackageIdentifier: libjpeg-turbo.libjpeg-turbo.VC
PackageVersion: 2.1.3 # null
PackageLocale: en-US
Publisher: libjpeg-turbo # null
PublisherUrl: https://libjpeg-turbo.org/
PublisherSupportUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/issues
# PrivacyUrl: 
Author: Darrell Commander
PackageName: libjpeg-turbo SDK for Visual C++
PackageUrl: https://libjpeg-turbo.org/
License: IJG license, Modified BSD License and zlib License
LicenseUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/blob/main/LICENSE.md
Copyright: Copyright (C)2009-2022 D. R. Commander. All Rights Reserved.
# CopyrightUrl: 
ShortDescription: SIMD-accelerated libjpeg-compatible JPEG codec library
Description: libjpeg-turbo is a JPEG image codec that uses SIMD instructions (MMX, SSE2, NEON, AltiVec) to accelerate baseline JPEG compression and decompression on x86, x86-64, ARM, and PowerPC systems. On such systems, libjpeg-turbo is generally 2-6x as fast as libjpeg, all else being equal. On other types of systems, libjpeg-turbo can still outperform libjpeg by a significant amount, by virtue of its highly-optimized Huffman coding routines. In many cases, the performance of libjpeg-turbo rivals that of proprietary high-speed JPEG codecs.
# Moniker: 
Tags:
- jpeg
- libjpeg
# Agreements: 
ReleaseNotes: |-
  1. Fixed a regression introduced by 2.0 beta1[7] whereby cjpeg compressed PGM input files into full-color JPEG images unless the `-grayscale` option was used.
  2. cjpeg now automatically compresses GIF and 8-bit BMP input files into grayscale JPEG images if the input files contain only shades of gray.
  3. The build system now enables the intrinsics implementation of the AArch64 (Arm 64-bit) Neon SIMD extensions by default when using GCC 12 or later.
  4. Fixed a segfault that occurred while decompressing a 4:2:0 JPEG image using the merged (non-fancy) upsampling algorithms (that is, with `cinfo.do_fancy_upsampling` set to `FALSE`) along with `jpeg_crop_scanline()`. Specifically, the segfault occurred if the number of bytes remaining in the output buffer was less than the number of bytes required to represent one uncropped scanline of the output image. For that reason, the issue could only be reproduced using the libjpeg API, not using djpeg.
ReleaseNotesUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/releases/tag/2.1.3
ManifestType: defaultLocale
ManifestVersion: 1.1.0
