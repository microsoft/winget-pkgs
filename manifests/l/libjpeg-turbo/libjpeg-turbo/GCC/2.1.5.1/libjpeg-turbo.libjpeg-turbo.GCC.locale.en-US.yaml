# Created with YamlCreate.ps1 v2.2.2 $debug=QUSU.CRLF.7-3-2.Win32NT
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.4.0.schema.json

PackageIdentifier: libjpeg-turbo.libjpeg-turbo.GCC
PackageVersion: 2.1.5.1 # null
PackageLocale: en-US
Publisher: libjpeg-turbo
PublisherUrl: https://libjpeg-turbo.org/
PublisherSupportUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/issues
# PrivacyUrl:
Author: Darrell Commander
PackageName: libjpeg-turbo SDK for GCC
PackageUrl: https://libjpeg-turbo.org/
License: IJG license, Modified (3-clause) BSD License and zlib License
LicenseUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/blob/main/LICENSE.md
Copyright: Copyright (C)2009-2023 D. R. Commander. All Rights Reserved.
# CopyrightUrl:
ShortDescription: SIMD-accelerated libjpeg-compatible JPEG codec library
Description: libjpeg-turbo is a JPEG image codec that uses SIMD instructions (MMX, SSE2, NEON, AltiVec) to accelerate baseline JPEG compression and decompression on x86, x86-64, ARM, and PowerPC systems. On such systems, libjpeg-turbo is generally 2-6x as fast as libjpeg, all else being equal. On other types of systems, libjpeg-turbo can still outperform libjpeg by a significant amount, by virtue of its highly-optimized Huffman coding routines. In many cases, the performance of libjpeg-turbo rivals that of proprietary high-speed JPEG codecs.
# Moniker:
Tags:
- jpeg
- libjpeg
# Agreements:
ReleaseNotes: |-
  1. The SIMD dispatchers in libjpeg-turbo 2.1.4 and prior stored the list of supported SIMD instruction sets in a global variable, which caused an innocuous race condition whereby the variable could have been initialized multiple times if jpeg_start_*compress() was called simultaneously in multiple threads. libjpeg-turbo 2.1.5 included an undocumented attempt to fix this race condition by making the SIMD support variable thread-local. However, that caused another issue whereby, if jpeg_start_*compress() was called in one thread and jpeg_read_*() or jpeg_write_*() was called in a second thread, the SIMD support variable was never initialized in the second thread. On x86 systems, this led the second thread to incorrectly assume that AVX2 instructions were always available, and when it attempted to use those instructions on older x86 CPUs that do not support them, an illegal instruction error occurred. The SIMD dispatchers now ensure that the SIMD support variable is initialized before dispatching based on its value.
ReleaseNotesUrl: https://github.com/libjpeg-turbo/libjpeg-turbo/releases/tag/2.1.5.1
# PurchaseUrl:
# InstallationNotes:
Documentations:
- DocumentLabel: Documentation
  DocumentUrl: https://libjpeg-turbo.org/Documentation/Documentation
ManifestType: defaultLocale
ManifestVersion: 1.4.0
