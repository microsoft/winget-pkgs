# Created with YamlCreate.ps1 v2.5.0 $debug=NVS1.CRLF.7-5-2.Win32NT
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: IntegrIT.Hackolade
PackageVersion: 8.3.5
PackageLocale: en-US
Publisher: Hackolade
PublisherUrl: https://hackolade.com/
PublisherSupportUrl: https://hackolade.com/help/index.html
PrivacyUrl: https://hackolade.com/privacy.html
Author: IntegrIT SA/NV
PackageName: Hackolade
PackageUrl: https://hackolade.com/download.html
License: Proprietary
LicenseUrl: https://hackolade.com/eulas.html
Copyright: Copyright Â© 2016-2025 Hackolade. All rights reserved.
CopyrightUrl: https://hackolade.com/eulas.html
ShortDescription: Polyglot Data Modeling for SQL and NoSQL databases, APIs, and storage formats
Description: |-
  Hackolade Studio is an intuitive yet powerful application to perform the visually data modeling and schema design of many SQL and NoSQL databases, APIS, and storage formats.
  Hackolade Studio combines the graphical representation of collections in an Entity Relationship Diagram, with the graphical representation of the JSON Schema definition of each collection in a hierarchical schema view. Together, these graphical representations provide the schema model for data-at-rest and data-in-motion, plus the documentation of that model. The application is specifically designed around the powerful nature of JSON nested sub-objects and denormalization.
  The software facilitates the work of, and the dialog between analysts, architects, designers, developers, testers, DBAs, and operators of systems that are based on such technologies. It also can generate schema scripts and documentation in a variety of machine-readable formats (DDLs, JSON Schema, Avro, Parquet, Protobuf, ...) as well as database instances, or human-readable formats such as HTML, Markdown, and PDF reports.
  Instead of having to find data structures tacitly described in the application code, the creation of a database model helps to evaluate design options beforehand, think through the implications of different alternatives, and recognize potential hurdles before committing sizable amounts of development effort. A database model helps plan ahead, in order to minimize later rework. In the end, the modeling process accelerates development, increases quality of the application, and reduces execution risks.
# Moniker:
Tags:
- database
- db
- modeling
ReleaseNotes: |-
  - Mermaid added reverse-engineering of attributes on both sides of FK relationships through inference, given that they are not specified in Mermaid ER code
  - Mermaid: added Command-Line Interface support with command -revEngDiagram and argument --source=mermaid
  - ERD: adjusted font of entity title bar when zooming out to sketchy level
  - Polyglot: enhanced handling of name coupling during updates of references
  - Polyglot: enhanced model derive process to prevent multiple references to the same Polyglot model, and prompt user for Impact Analysis screen
  - Print Diagram: improved performance of PDF generation for large models by reducing the SVG file size significantly
  - Print Diagram: adjusted positioning of relationship names in SVG exports to ensure that all names are displayed above the relationship lines
  - Print Diagram: added auto-zoom of Graph Diagrams to fit full page
  - Delta Lake/Databricks: added possibility for views to be based on another view (not just on a table)
  - Delta Lake/Databricks: added support for CLUSTER BY keyword in reverse-engineering
  - SQL Server/Azure SQL: added support for v2025, including native JSON data type
  - SQL Server/Azure SQL: added automatic generation of FK constraint name if none is specified by user
ReleaseNotesUrl: https://hackolade.com/versionInfo/ReadMe.txt
PurchaseUrl: https://hackolade.com/pricing.html
# InstallationNotes:
Documentations:
- DocumentLabel: Videos
  DocumentUrl: https://hackolade.com/videos.html
- DocumentLabel: FAQ
  DocumentUrl: https://hackolade.com/help/FAQandtroubleshooting.html
ManifestType: defaultLocale
ManifestVersion: 1.10.0
