# Created with komac v2.0.4
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.5.0.schema.json

PackageIdentifier: DoltHub.Dolt
PackageVersion: 1.34.0
PackageLocale: en-US
Publisher: DoltHub
PublisherUrl: https://github.com/dolthub/dolt
PublisherSupportUrl: https://github.com/dolthub/dolt/issues
Author: DoltHub
PackageName: Dolt
PackageUrl: https://www.dolthub.com/
License: Apache-2.0
LicenseUrl: https://github.com/dolthub/dolt/blob/HEAD/LICENSE
CopyrightUrl: https://raw.githubusercontent.com/dolthub/dolt/master/LICENSE
ShortDescription: Dolt is a SQL database that you can fork, clone, branch, merge, push and pull just like a git repository.
Description: |-
  Dolt is a SQL database that you can fork, clone, branch, merge, push and pull just like a git repository.
  Connect to Dolt just like any MySQL database to run queries or update the data using SQL commands.
  Use the command line interface to import CSV files, commit your changes, push them to a remote, or merge your teammate's changes.
Moniker: dolt
Tags:
- cli
- data
- git-for-data
- versioning
ReleaseNotes: "Merged PRs\ndolt\n- 7468: go/libraries/events: Restructure events collection so that we can send events while the dolt process is running.\nWe make the GlobalCollector mutable.\nWe give the Collector a sendingThread which can have an Emitter. When the Collector collects enough events, it forwards a batch of them to the sendingThread. If the sendingThread has an Emitter, it attempts to send its current batch on that Emitter.\nOn shutdown, contexts get canceled, background threads get waited on, and then an accumulated un-emitted events are returned from the Collector, same as previously.\n- 7463: SELECT ... INTO OUTFILE ... tests\nThis PR adds BATS tests for a SELECT ... INTO OUTFILE ... feature we're adding.\nCompanion pr: dolthub/go-mysql-server#2317\n- 7457: Added storage capabilities for GMS Extended Types\nThis adds the necessary scaffolding to support the new ExtendedType interface within GMS. This interface is primarily used by DoltgreSQL to implement PostgreSQL types.\nRelated PRs:- dolthub/go-mysql-server#2312\n- dolthub/doltgresql#120\n\n- 7424: Stats auto refresh\nThree new system variables to configure stats auto refresh, one for turning on, one for a timer of how often to check whether stats are fresh, and a third for a freshness threshold to trigger writing new stats. The system variables are global, and will apply to all databases in a server context. Adding or dropping databases, tables, and indexes are reflected by the statistics provider.\nStatistic updates now funnel through a process where we preserve buckets for pre-existing chunks and create new buckets specifically for new chunk ordinals. The auto-refresh threshold compares the number of new and deleted buckets compared the the existing bucket count. So inserts, updates, and deletes all create new chunks or delete chunks relative to the previously saved statistics, and the fraction of (new+deleted)/previous count is compared against the threshold.\nTODO:- how much logging is appropriate\n- go server tests\n- is stats dataset replication blocked by default?\nother:\n- ANALYZE table and auto-refresh concurrency, last write wins? as long as auto-refresh thread doesn't die\n- drop database/ANALYZE concurrency, error for writing stats to a deleted folder\n\ngo-mysql-server\n- 2323: SQLEXCEPTION proc handler\nWe originally supported one type of procedure handler, NOT FOUND, which explicitly checked for an error when fetching from a cursor io.EOFs. The implementation for that handler would walk the entire BEGIN/END scope stack inside the Fetch call looking for a handler, execute the handler body, and then embed the scope height into a special return error. The error walked back up the callstack looking for the BEGIN/END block embedded in the error message.\nThis PR:- Refactors handlers to coordinate message passing in a centralized way. No metadata is embedded in FetchEOF, because each scope will explicitly compare its handlers to errors raised during execution within its BEGIN/END bounds. (FetchEOF is important because we differentiate between 3 different types of io.EOF in procedure loops).\n- Add type/object support for representing specific signal handers.\n- Add SQLEXCEPTION signal handling, which will trigger for any error type (other than io.EOF) that bubbles up during a BeginEndIter's execution.\nre: #7454\nAnother thing I noticed is that some of our tests return nil for empty stored procedures when mysql returns ERROR 1329 (02000): No data - zero rows fetched, selected, or processed. \n\n- 2322: Allow InjectedExpr to handle name resolution\nModifies the InjectedExpr handling to support additional expressions, such as those requiring name resolution.\nRelated PRs:- dolthub/vitess#312\n- dolthub/doltgresql#121\n\n- 2317: support SELECT ... INTO OUTFILE/DUMPFILE ...\nThis adds support for MySQL's SELECT ... INTO OUTFILE/DUMPFILE ... feature.\nIt is the complement to LOAD DATA. There is no LOCAL option, so files created using this feature are on the server.\nThis PR adds a custom TestSuite for testing these files, as it needs to write, read, and delete files.\nsyntax: dolthub/vitess#311\nfixes #7453\n- 2316: Allow primary keys with auto_increment columns to be dropped when an appropriate index exists\nMySQL allows a primary key with an auto_increment column to be dropped as long as there is a secondary index that includes the auto_increment column as the first column in the index. (MySQL Reference)\nThis PR also enables dropping a primary key by referencing it by it's ID (PRIMARY), in order to match MySQL's behavior, e.g.\n\nDROP INDEX `PRIMARY` ON t;\n\nRelated to #7456\n- 2312: Added the ExtendedType interface\nThis adds the ExtendedType interface, which is used within DoltgreSQL to implement PostgreSQL types, as well as in Dolt to properly handle the new type and value serialization.\nRelated PRs:- #7457\n- dolthub/doltgresql#120\n\n- 2300: Fix External Index Creation\nFixes regression introduced by 9b9301f8c4709d2d32982068322662643e02f231\nCurrently\n\nCREATE INDEX foo USING driver table (column)\n\ncreates a table scan if driver is not \"\", \"btree\" or \"hash\".\nThe regression is caused by the change:\n\n-\toutScope.node = plan.NewCreateIndex(\n+\tcreateIndex := plan.NewCreateIndex(\nddl.IndexSpec.ToName.String(),\ntable,\ncols,\nddl.IndexSpec.Using.Lowered(),\nconfig,\n)\n+\tcreateIndex.Catalog = b.cat\nreturn\n\n\nvitess\n- 312: Allow InjectedExpr to handle name resolution\nAdds the capability for additional expressions that need to be resolved to InjectedExpr.\nRelated PRs:- dolthub/go-mysql-server#2322\n- dolthub/doltgresql#121\n\n- 311: add syntax support for SELECT ... INTO OUTFILE ... options\nWe had parser support for SELECT ... INTO OUTFILE, but were lacking parser support for the variety of OUTFILE options.\nThis PR adds support for all the options and certain combinations of them.\nHowever, we are missing support for duplicate options and certain orderings of these options; tests for these are added as error tests with a TODO.\nMySQL Docs:\nhttps://dev.mysql.com/doc/refman/8.0/en/select-into.html\nMariaDB Docs (this has the actual grammar):\nhttps://mariadb.com/kb/en/select-into-outfile/\n- 309: Added a way for Doltgres to inject expressions\nThis primarily adds a new AST node that DoltgreSQL takes advantage of. All currently-existing nodes are specifically designed for MySQL transformations. In many cases, Doltgres will have different transformations that need to take place, and this provides a way for Doltgres to implement those transformations without having to modify other packages whenever a new transformation is added or edited.\nRelated PRs:- dolthub/go-mysql-server#2312\n- dolthub/doltgresql#120\n\n- 308: Change Handler.ComResetConnection to return an error\nRelated to #3921\nClosed Issues\n- 7453: Add support for \"SELECT INTO\" for files\n- 7456: Can't drop primary index.\n- 3921: Implement COM_RESET_CONNECTION"
ReleaseNotesUrl: https://github.com/dolthub/dolt/releases/tag/v1.34.0
ManifestType: defaultLocale
ManifestVersion: 1.5.0
