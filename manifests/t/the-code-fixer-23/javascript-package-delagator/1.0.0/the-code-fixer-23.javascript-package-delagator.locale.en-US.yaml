# This file was generated by GoReleaser. DO NOT EDIT.
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json
PackageIdentifier: the-code-fixer-23.javascript-package-delagator
PackageVersion: 1.0.0
PackageLocale: en-US
Publisher: Shelton Louis
PublisherUrl: https://github.com/louiss0
PublisherSupportUrl: https://github.com/user/louiss0/issues/new
PackageName: javascript-package-delegator
PackageUrl: https://github.com/louiss0/javascript-package-delegator/tree/main?tab=readme-ov-file#javascript-package-delegator-a-universal-javascript-package-manager-cli
License: MIT
ShortDescription: A tool to delegate package installation to JavaScript package managers.
Moniker: javascript-package-delegator
Tags:
  - pnpm
  - package-manager
  - yarn
  - npm
  - deno
  - bun
ReleaseNotes: |
  ## Changelog
  * d5b3af4ab75d5ccc324063dbaa6a0b83a97be062 fix: Add description to homebrew and scoop formulae
  * 3b4b4bfc7e66913c676877903f040d149274edaa refactor: remove wrong point  There is no assets file at all it's just build info
  * 389d6f4a9b977396b70be96bbe8f40546e7f5536 style: fix typos
  * 94e3769a98f941245890a821da3336fd3b948291 refactor: alter README examples for better readability
  * 3c2d75697f2ca97edc8b466c436ce2db1360da49 style: Add blank lines to common use cases
  * 3b9f962ffaeeb26f24512ac2af0fb10d2f72ba3b refactor: remove uneeded folders
  * a67af1fc82fefdd82494258e013d1202876ee9d8 Merge branch 'main' of github.com:louiss0/javascript-package-delegator
  * 84b898068fba113dc5ebe064625ff531227fd3c8 fix: Clarify shell completion documentation
  * 150763b4d51e4b3b1aa867e4487f7d81b6957b3c feat: add missing descriptions and homepages
  * a85d2a3cda060d72e1ce9a371b21ca7d6458c371 refactor: remove all the git stuff and skip the uploading to git
  * eb5ada146f94a5bfd664960b7808c4daf717d7f6 Brew cask update for javascript-package-delegator version v1.0.0
  * 2d116d26dedfe6a5c9e18b7281eb6402d5bdfa48 the-code-fixer-23.javascript-package-delagator: v1.0.0
  * f2fd352dde18149c18de56b50aeb0f7bcf41c8e9 javascript-package-delegator: v1.0.0
  * 07b5c49348fb06175a25bafed433f2facd2a3139 Merge branch 'main' of github.com:louiss0/javascript-package-delegator
  * b93751f3facfbc0ff31de239cc7141abd6ba9c3b Brew cask update for javascript-package-delegator version v1.0.0
  * 17528c8b9108e730a2aeb8d452fdeded7d01fccd the-code-fixer-23.javascript-package-delagator: v1.0.0
  * 6d07a3192b85add2e151344be630c1fccaa5de9e javascript-package-delegator: v1.0.0
  * 5eda366f8ce66fafff5843b5515b690eb3a7d41d Merge branch 'main' of github.com:louiss0/javascript-package-delegator I need this to help push with goreleaser!
  * 85cb4b6b1e9074d468fb51c0ba4e2344d1aa233b Brew cask update for javascript-package-delegator version v1.0.0
  * 91c065fc97a022921b330f9f6adc46e63b8e35cc the-code-fixer-23.javascript-package-delagator: v1.0.0
  * 15479e5d3cde770a71b39be2438d2f2d3cd92221 javascript-package-delegator: v1.0.0
  * 48c0e465b2b428408bf1c9af24ba4d65a6591599 Brew cask update for javascript-package-delegator version v1.0.0
  * 02915fa7de7a5d9fa412b1fd1d8eb7e0125628db the-code-fixer-23.javascript-package-delagator: v1.0.0
  * 3c2192a671955a42b8d9bd2ab7161e5104bcfc94 javascript-package-delegator: v1.0.0
  * be9b3a252c58c8071cdbcce7ee5601cbafac1515 fix: use env to reference the private key instead of a file
  * a2a35f6cace17efc15d6bc0b945a9ae9a43cc5bc Brew cask update for javascript-package-delegator version v1.0.0
  * e1578fe31e59d8d70eb4214c7dcaad2db5b5511f the-code-fixer-23.javascript-package-delagator: v1.0.0
  * e01fb2aad8d0ffbcea4d0d0594f7c74971f4d552 javascript-package-delegator: v1.0.0
  * b97da055142088628fd329011eb2315eb3574dc5 chore: ignore localenv file from nu I'm using this file to load the env files that are needed from nu before release
  * c536a259da7dd2063b6430e77123dd6bd553a320 Brew cask update for javascript-package-delegator version v1.0.0
  * 99b16eda9101067f3634adeb90bb9c4c03b424e8 the-code-fixer-23.javascript-package-delagator: v1.0.0
  * 0d2c76700447830c981b2cbdab1e025a6eab152d javascript-package-delegator: v1.0.0
  * 7d330f99fb87888d229c85984e7432a178740bb3 Scoop update for javascript-package-delegator version v1.0.0
  * db31b82a613da054697f1e89e0d21854447bb453 chore: igore all local ssh files
  * cd99a561abf3f971009153d8da236f279e96f64a fix: ignore the local go releaser file
  * dbd3be7adb1d385f797da96b887d38c6ddcd9930 fix: url's for ssh
  * a81953a0626228f76d385809063d8e5127aa7ab0 fix: remove commented out goreleaser stuff
  * d00d0c480c8d2a8b85006b1053567778f6d8e6f7 fix: finish all links in goreleaser
  * 38310a6287dffc12d26f38a2b4c79f301ddee084 Add github_token environment variable
  * 176772055ecdd4f8e5282cbdd3fec2e084da1aa4 chore: move away from using github actions Using github actions has been too difficult so far. Instead of desling with the stress I'm going to release locally instead
  * 2d83946038fa760c9554223e73635c8a48fd3be3 chore: prepare release it to publish for supported package managers!
  * 590ce00a47edc8404912df3f529c4e642170d2c7 refactor: use ssh agent instead of using the private key
  * d9f2894f6aee883410ac56eba4b6161b0bc9eac5 chore: add name to the release
  * 18035d78551deafe9a144aa73f554273951577fe fix: remove file creation script for go
  * 89714493fe7c7a75801b1cf1f8661ad1d5c66d72 fix: ensure env variables are avaliable to all steps
  * b986f9d9bcc3eb74039a7d51319d55201e6138d7 fix: move env to log
  * 4dda113a683c750b03152ff897da709176f051b9 fix: use default shell for gh actions! Nushell doesn't work with env
  * 92981d4edd7c2ebbdc150f42023d71a8a9e26577 Merge
  * e61180c9c529204f69bc30de75cc67b2f413048e fix: change nushell expressions
  * eeca9f64f1853b70caba472fe0df610c35d5aec2 fix: change nushell expressions
  * ae3b1a73fe6a0a10b7553702e78f9cab01124234 fix: move env prop!
  * 4b002f2c5ad8072735407acbf81d3d8549254774 fix: use version v0.105.1
  * a2daa2d3b9c367ac49415a1ba0b991858fae4da3 fix: use version 0.105.1
  * 9933428acfb315bdd95969f51356a75d274ed744 fix: remove version for latest
  * 58649c2ad6b140b2be601aae94ddd831cab31d2c fix: remove version
  * 0684bd85b83d6077429b16f2c8f49bb608d9fa8d feat: create a test env variable log
  * 96482cfaf7a3b41605fb7440f5454c7b1cdbd94d fix: make goreleaser file for gh actions
  * 2130a6197026a0baeb1abcbb1b9e4abe44e2adb8 refactor: Remove release workflow and update goreleaser.yaml
  * ee1c48e00ba2c507936daab6ece2392900ea5978 fix: scoop private key formatting
  * 420df0b80a232bcfb71961a7c0a403b04bb4a4df chore: prepare release it to publish files to the designated places
  * bd24c6de337f407b8a3c758f07c69cb447ca3f0d chore: add names to phases
  * 1749747bbd51941dc97a60a77a089efd604580f2 chore: change 1.2.3 to stable
  * 3b75ee54360bc93be5b7323ac0c198851e9af83d chore: fix random things
  * a41403f23fb3826b36e9ddddd65963b5ec354960 fix: remove typo
  * 1858ed2467129b66a0a0f713ff2b2e74570d1577 chore: create release script
  * cb651c9320ca52c387b4b01933ef5cfbbab8166d fix: commit the go sum file
  * ae8a22c8683e438efeee65fbc0569ca6f0a4a015 go back to old way
  * 35d89dc3ca83308a87c9b4663f12d717e89e63ba fix: adjust code to go releaser's needs The time format couldn't apply due to formatting stuff
  * f51b55a239c3ac83e09418d8f31949e17cddd2e5 feat: add proper gh action
  * 658cd868e9c40752689b7f54ffc18ef3ebd43782 fix: release gh action
  * 220af9ed36c8dc05b66b063d6bc6cd996d015926 fix: release gh action
  * 11638eb3fb0b0239e12eed0ae86fafcc2b229023 chore: Add release script
  * 5217027a4e491c13cb0f3f34bca910a52f5ecd91 fix: Improve semver regex and update release workflow
  * cd4d5264a6b671d9a6070dc2a9bdcedc590b802c chore:Add release workflow
  * dea6e2051dc9d3faae2bce78fefd8d69ce67283b chore: Refactor build info and add GoReleaser configuration
  * 28a501d03d8ac9dcba814578e7e2f2babce9cb09 chore: Remove all nx related files
  * d096ed8e0d3a9ff6b58e721d9feb72dd80529f78 fix: Remove project.json comments
  * 41f6191d0a4bf220a0b05e57a4f8f1601029e5f1 feat: Integrate Nx into the release process!
  * 9a9a0c005c588f5ea4b4a26bcc78a54619f4bf18 feat: Add build information and update dependencies
  * 22c61ef98589e856fad284657292263c6d6b8b62 docs:Update README with new features and improvements
  * cf4b546cb74616f6f8958050d80aaa1ee322dc63 feat: Add completion command
  * a039bdc9181a518ba1d03b972ef9f73597f66fff docs: Enhance Interactive Features and Add Functionality
  * 48f7863166310cc1ffa704a12417a57b92dc13a9 chore: Create cover profile output file
  * ce3402238696ce72187268758cc5c84c87cb2542 feat(test/cmd): Add tests for help and install command prompts
  * 658c3d82e56825565997ed6fd54f9acaf715f073 feat: Detect and install JS package manager
  * e7b992d542b95837e174377cd4396e1d7ed9e0b7 test(detect): add tests DetectJSPackageManager function
  * 2647c12073298717d8f3a1dd0b172b24fc073bb6 feat(detect): bring back DetectJsPsckageManager and use different logic I decided to bring back the old DetectJSPackageManger to cover the fact that a package manager isn't detected based on lockfile. Update the order of supported package managers so that NPM is last, ensuring other managers are detected first.
  * 1c7bd6a77b63b454c2247df519cd3af558aba653 refactor(): command text UI tests
  * be0baf5163ab60ebfeb3a9941c45850f5f73465b refactor(cmd/root): command UI text and package manager detection
  * f5dca5f36b51238ebeacd91b143a52b113de1f7e refactor(cmd/root): Javascript package manager detection
  * bd0121d5b2253f6fff6a8892ee933f778aab2b80 refactor(cmd): JS package manager detection in tests
  * bd7f5fde0580483f9fd57fe2f61335a62d4261af feat: Add tests for package manager detection
  * bd9b77aa45b2f2b43a54938aa7417a810ef03d9d refactor(detect): Improve package manager detection
  * d57c0099ee51c464732159acb77086f36b838ba0 feat(cmd): Add support for setting the working directory
  * 5265ec44f8d0989bf590caa40f1396a078323760 fix(test/cmd): Set working directory with error handling
  * 40b3a15dc697a1b7609f8bd71d183c08ae67a6ee refactor(test/cwd): cwd tests to use DescribeTable This chages also appends `/` to the temp dir for related tests
  * 9792c0e2744ced491e8a96642cef7491798703cb feat(test/cmd): Implement and test --cwd flag
  * 5dfc7b523ce27f156741cb51794ce83bedfb408d fix(cmd): Set context for agent flag The context is supposed to be set even after the agent flag is set or looked up then set.
  * ce23faf47bd5c076afb5c4311f0335df5ab4266e feat(cmd/unistall): Add tests for deno uninstall command
  * b5a5037ff41ab11779f75d674d9845caab4cdced feat(cmd/uninstall): Add Deno support to uninstall command
  * 084f2f205ac542a7e38dbfa2457a5b36acfdbc3b feat(test/cmd): Add test for uninstalling packages with interactive mode with deno
  * ff35a0145c8554904390f87036a52b6ce411defe feat(cmd/uninstall): Implement Interactive flag This feature allows the user to select packages from their dev and prod dependencies to uninstall. It also allows developers.
  * af9814c41bd96b866d42ad30676e2274425bbd44 chore: Update dependencies
  * 53ad08379192270ee7867bf60716dcdd40ccec04 feat(test/cmd): add tests to make sure that the uninstall interactive flag works as intended These tests are written to make sure that interactive flag works as intended. It's supposed to. - Throw an error when there are no tasks - Allow the user to select the packages they want to remove, then removes them!
  * abdb40275be0b086cfbf074cda81e6ffbec6d96a refactor(cmd/run): Rename readPackageJSON to readPackageJSONAndUnmarshalScripts I decided to change the name of readPackageJSON, becuase it wasn't precise enough! I wanted to make sure there was no confusion since packages are just globals!
  * bb5b631c05655176586936ca3a95c6105654b639 refactor(cmd/install): package multi-select UI to use an interface
  * bc7d18c3824c03b0f671a0bb24debac28a64df70 refactor(cmd/run): run command to use a task selector
  * b8b66e283e9a3f82e10cd779996024e6ba8d0ddc fix(test): Use deno.json and Deno tasks for testing The test now uses deno.json and Deno tasks, and updates the assertions and logic to match. Also removes a test that had outdated assumptions.
  * 71916ce9581321df4d8ed379c240c04d81e97e48 feat(test): add test from deno.json if pkg is deno
  * 36bdd0b72f6730b10c324d0d4fbdc49560c1e879 fix(cmd/test): change test that is based using package.json The test that's based on using a package.json to get scripts for tasks had two problems! - It was named wrong. - It used the wrong index to access what was needed in the args for the command runner. The test now uses the proper name and the index is one which is the second element!
  * 641f6bef70347a82c28c29bd654fff4cdd927bc6 refactor(test): move test in deno context into new context I found a bug in a test that was associated with the deno context. I decided to move it to the "How it responds if there are no arguments" context. This makes it so that tests associated with no args on run are together!
  * c12e133b311eea1e3ebbb4b0f30031acc9914bf5 test(run): write tests about user being propmted if there are no task args I wrote tests and created the TaskSelector UI interface and struct!
  * be3abcf13965372249596ce34c6823d4ef9badba feat(test): Add MockPackageMultiSelectUI for install command tests
  * 95d6221d24e9dfafb286841e761e66a175ff59ab chore: Update dependencies
  * fd2b12218b5712e51d2d8a19284580c730d85554 feat(cmd/install): create package multiselect UI!
  * f61d4a6b972c2d3e3814b08e9459f050be779741 fix(test/install): use a proper query for testing zero packages!
  * af57a9b60ac045b8848c206880ad925ea849cb4a fix(test/install): install command test
  * 720ed14fe5bb035236488cc3d21eb86767e6b4fc feat(cmd/install): implement search flag This feature creates a flag that makes sure the user doesn't pass in an empty string as a value! The user isn't allowed to pass an argumnent when the string flag is activated.
  * f531ab6f2fe7086069d3a43b7d4732462f6bba77 fix(cmd/install): install command search flag tests I tried to use `errors.Is` that doesn't work.
  * 02e84f2a3d2791848f12f416658eb3dca3457950 fix(custom_errors): Use InvalidArgument in error message
  * a103a05a1c94d410ccfa625ea300d0918ab5d246 fix(test): install search flag tests
  * c4a4dc4f8090cc38a7d8f0ba96f6ad4c8fcd28f7 test(search): write tests to make sure the search flag works as intended The search flag is supposed to be passed in filled. The user isn't supposed to be allowed to pass in args with the command! An error is supposed to happen if there is no packages!
  * 7e5f74ec23a4a7239ffee235125fb876ea72e312 feat(services): create npm registry service This code was once again generated by Gemini. This service is created to query packages from npm. It grabs packages that are a max or 35 from the npm registry. It uses the net/http package to do this!
  * a2799cfa1fccdbec484f9d4dc6e9cd8f06eb3444 test(services): make sure npm registry service works as intended This code was generated using Gemini the point of this project is to make sure getting packages works?
  * e499064a4805b45e361251d3a68243bfd926ed45 fix(test/cmd): remove bad expectation for install and clean install no-volta flag tests For both clean and install commands the args were supposed to be the package manager name plus the args! Only the args are supposed to be expected
  * 6f627a0d2eeca0792c79578d4749461286bfca7f feat(cmd): add no-volta flag to allow volta rejection The no-volta flag allows the user to reject volta, if it's detected, for both install and clean install.
  * 5f72e956051d7806031aa9ef862071002046ba3b test(cmd): test if install and clean-install reject volta if --no-volta is passsed!
  * 5a4a4b89e86e301b84983f89d5c46fca66a958c2 refactor(test): make tests use a mock detectVolta The tests now use a mock detect volta for tests! For the commands that need it the return value is true reverse otherwise.
  * 5df35ac51c0cc745c80ad5decf81ad5105267669 feat(cmd): Implement volta detection The function Detect volta was created! It detects whether Volta is in the Path! When it's detected the install and clean install commands use it to determine whether node package managers should install using volta!
  * b2082ab944c08d3bc6a1828b60428c034e260ee8 test(cmd): finish volta related tests I finished with writing the expectations for my tests. Volta is the expected command and the args has run in it and is adjusted based on package manager.
  * e686d1c80bb476e2c3ae84e6dd8995be3e0cd5a6 test(install): make sure tests are updated to reflect deno related code
  * b21215d84738ee9d32f4cc4833f841e3ee5cc14f fix(install): write proper deno installation code The code that was written for deno was based on outdated info. The code that exists now is based on how deno install and add work for new deno versions.
  * f5c704e50e30478a3dfed9779d8351623f1e9c79 test(cmd): write tests to make sure the install and clean install commands work with deno! These tests are written but not finished! I needed to change deno related code in the cmd/install.go file first.
  * 581a5ccc8016cd8b8abdee8cc69889637b96cf5e docs(cmd): use ai to document missing docs for commands I tried to make gemini change multiple files at once. It failed these two were the only ones that changed! I decided to add the rest of the missing features before documenting again.
  * cf3472067bc653e2d863818a589a2c16e9ca16cb docs: Enhance README with features, usage, and tools table
  * b59172b37095fff8580b07437270ba3638c98bc7 This folder is no longer needed I know what features are needed for this CLI
  * 89f813344bf61d4604a54a40239bb47a059a687b feat(cmd): implement agent flag I decided to swap out the dependency injection of the package manager for the use of the agent flag. The user will have to use the agent flag to pick an js package manager anyway. Using the flag this way allows strings to be transferred in a more ergnomic way I think.
  * b16a540a4e5b954659551418f2f79561ea3eec2d refactor(cmd/test): adjust tests to changes in DetectJSPacakgeManager I decided to simply adjust the tests for the fact that `detect.ErrNoPackageManager` is returned instead of a random error.
  * 9bfa800ca3ed93f66e697ef8cdeba0f2c434b5f1 refactor(root): only prompt user for package installation only if the lock file isn't detected The DetectJSPacakgeManager returns an error that is about the lock file not being found. If that error is the one the root command will output a prompt telling the user to install the needed package manager.
  * 68660839afbaf1774d3331d1f4308399fc960c5a refactor(detect): make js package manager's error handling be more precise for my use case I decided that the DetectJSPacakgeManager function needed to take into account errors that weren't the ones created by me. I decided it was best to only prompt the user to install a package manager only if the error from the function was related to now finding a lock file. The rest of the are simply returned.
  * e956643e9f4e6e35c27af98c7d18d58af176282c refactor(test): adjust tests to logic implemented in DetectJSPackageManager I decided to change the DetectJSPackageManager so that the it now returns an error when there is no package manager. I also decided never to default to npm but just use an error.
  * e707e82e2580748b967e676b2784e1c1164d3dfb test(root): adjust tests to make sure that commands still pass I the `CommandRunner` interface needs a `IsDebug()` to use the the command runner it ensures that the `MockCommandRunner` uses the debug prop. I decided to make it so that debug flag is used to determine if the command runner will log out it's args when a command is being executed!
  * 669c63d481fb814b45d3220cd55866267a326b79 feat(root): add debug flag for commands A debug flag was added to make sure that a log is used when a command is being debugged!
  * 787087e31078f87512ce4b35d5c9240dcd031ee1 fix: make DetectJSPacakgeManager return an error if a pacakge manager isn't found If a package manager isn't found the user is asked to install the package manager or the user can choose before using the package manager!
  * 6846452a4d880cf4e4a4fed8bbafa7c6927f6c98 fix: remove error return I made a mistake in returning the error it's not a good idea!
  * 82979b190f0275c766c7212d3c264efcf0c2bab8 refactor(root): remove print statements
  * 57d42fa53139aa7125c9903fc8a4c091562ea6c6 test(root): write tests to make sure the root command tries to make a JS package manager available There are two series of tests written here. 1. For making sure that when an env variable called JPD_AGENT_ENV_VAR is avaliable it's used as the package manager. 2. The user can install the package manager they want when they need to by being prompted for a command.
  * 146650b998cb4b0b6ea751f8f5df6eec0ccc532e refactor: remove viper and any related code from the codebase I decided not to have a config file! I decided to instead use a ENV variable for the pacakge manager that is being used. I don't have much use for the config! I only want to ask the user which command they want to use to install their prefered pacakge manager.
  * 7dc05e054e8a11e94000ce46ed4a0affd8512cee fix(cmd): improve command parsing with regex splitting
  * 9649e85cc9bfd86b64c809f16209033cc66da5c8 test(cmd): expand root command installation test cases
  * 33ca020ab263df84b165b4509da4c2d7dada6d09 test(root): make test to make sure when the user types a correct command they get there stuff downloaded
  * e56e64b6fb38d9c955ee68103e92b38d2b723feb refactor(test) change prompting test into prompt validation test! The test I initially wrote was wrong. I was trying to get an output indicating that the user was propmted! I could've implemented the feature for it. It's not the right kind of test! I would have to get the output during development! It's just best to check if the user uses the right value!
  * d5f3eb7d2797b51371e35bc7b9e5caf9e381bd2b feat: implement prompting in case a js package manager wasn't detected. This feature implements a new struct called `CommandTextUI` It's a wrapper around `huh.Text`. It makes sure the user is prompted for the command they want to use. If the user inputs the correct command values then it will be used to install the package manager! If not an error will be created!
  * 12eec17466554dfc4e5a514ac4cbcad9db85dfcb test(cmd/root): test if the root command propmts the user when package detection fails
  * 9597534b5222c47690f35a6b94b58e5e7959f51b fix(cmd/root): remove all code related the removed SupportedOSPackageManager()
  * 341ebe25de9e800192aa7d3a476798a215ef8ebc refactor(detect): remove tests for deleted SupportedOSPackageManager()
  * 40713f686c49b282aff1a394dc4a3dcbfb665d06 refactor(detect): remove all code related to detecting an OS package manager! I just realized tha there is no point in having the `detect.SupportedOSPackageManager` function since it's not going to be used.
  * 90af793d561a6ebd162aaf86457f43ed9527d8f4 refactor: remove all code related to installation of packages I decided to let the user write the code related to installing a js package manager instead of trying to do it myself! It makes it so that this library is maintainable without having to add support for a package manager installation based on versioning.
  * 13709b5efad88a393ab9e738d8287d11dac29ce7 refactor(cmd): make code for root cmd more robust The root cmd file now takes a mock of the detect os package manager function. It now has different code that does the same thing but in a different way! It was changed by Gemini. It now follows best practices for Cobra and Viper!
  * 753caab37d88901de96df49b91489530119fde17 refactor: sort and create more refined tests I decided to group the tests that were related to each other based on the js package manager together. I decided to add some tests to cover edge cases. The mock command runner only accounts for one command being called now!
  * 5f1dbc3b7832561b50cda3f396af6e46ff451d72 refactor(detect): turn strings into constants I realised that I needed the strings for OS and JS package managers to be constants so that they can prevent misspelling.
  * 25f99c7c5bad4470a8f01eb35359e9e04ec82524 refactor: transform install JS package manager into a function that create's it with dependencies This refactor involves removing direct access to the libraries that are in the library and placing them into structs. Now the JS Installer function will be created by passing the command runner, and two other dependencies! The first is the `NixUISelecter` and the second is the `NixProfileNameInputer` these types make it so that the root command can be mocked!
  * 5992bb9f15d501dc847ca4bf9926b6b3b8b52fa6 test: make sure the bun --dev is handled
  * c4319a19f45707fbdba3c4fd9bb4b26459116769 fix: make sure the test to check if deno supports intersctive is finished
  * ca2bfc79e95a97b9003bb109187b9f2e661ab12c test: write tests for missing update command conditions
  * 2bd3d17452f62b5fa38abbbd77c1cf37b6c660cb test: clean install returns error for unsupported package manager
  * 1fad84dea76fe84ab670e09af7e7113ea4add920 refactor: change tests so they correctly cover the unsupported package managers The tests that were supposed to test for unsupported package managers didn't work correctly at all! The errors that were sent were the package manager errors!
  * 810a6c0756363af5efd8c7f18ae4259571219d57 refactor: make it so that when there are tasks they are rendered beautifully I decided to add logic to the tasks to make it so that they would be in a lipgloss table during production. In development they would just print out a message
  * 61a4749495bd2e2ce1ed4a8b892927e514df82a5 test: write tests to check if output is emmitted based on no arguments I'm currently testing for the conditions that are supposed to happen if the user doesn't pass in tasks for the run command.
  * eb0d6acb3f65ed2f0010a5c10ffaad0972925274 feat: create deno.json reader I recently learned that deno doesn't support the `if-present` flag! it also doesn't search for a package.json file for tasks! Should've done my research! Now a `deno.json` reader is created! The conditions for the new if statements aren't covered yet!
  * c5a557093ed5b3b552dafe3e78cc3f5c493cbc2c refactor: remove uneeded logic I remove the if condition for doing something when help was passed in! I don't remember why I did that, but it's uncessessary. I'm trying to find conditions worth convering!
  * 2ae507caa431d1c862c6061ffa4fefd5583037b4 test: write tests to cover unaccounted for conditions
  * 6060a1aef0d8d29294be017f982bfd4ae016b674 test: write tests for unaccounted for conditions in update command I have to write tests to check for unaccounted for conditions and fix some typos I saw!
  * 38ebea5a723db9fc0964f741f756ac301f8f31fd refactor: move yarn version detector into it's own package I needed to find a way to make sure the code that was related to the yarn version was dectected! But in development the yarn command needed to be mocked! Now there's a dependencies struct and it injects the `YarnVersionOutputter` struct there's one for production and another for development!
  * 72f5862397d495219d77cb14deee6b0d541b63c7 style: fix typo and clarify field descriptions
  * ab04c2df115198252c3353ad31d50d1f233b0d8b fix: remove unecessary if statement
  * c28fbec0ecb26963b6031a4f163009d0ee6e4f66 refactor: implement go env in places where if statements were needed
  * 15be8af2dcb5a55214066d0116b050b273b26771 fix: add logic to the get yarn version command I forgot to make this function work
  * a9bd9db969b702292202eebf274ac36f4288ef9c feat: add go env struct! The new Go env struct makes it easy to make decisions based on the go mode! I got this idea from how vite creates env variables! But using a struct is easier and more type safe!
  * 975fe934efb621bb2ac3450b1efbddb3d0300982 test: cover missing if checks with various tests I decided to use Zed's Agent to add more tests to cover unchecked conditions. I found out that there are some things that were never implemented
  * 0746373f8cbea62e29dc86b154b395e628915c8f fix: add missing update command arg in test
  * 4e63712f867ebe8baf0729a6b73cd0acdedea96d fix: remove typo in package manager error message
  * 2188fcd606d3e4979c5486c586860d8c2ee794df refactor: implement logic to make should run npm run with if-present flag test pass In this refactor I make temporary directories to make sure the pkg json file is being found! then used for the command!
  * a6e6f7eaa94c88edbe9ce390d08f1991ff08c5e8 refactor: pass js package manager detector as second arg The detect.JSManager function is passed as a second parameter instead of being able to be used in persistent run. I can't make sure that the logic written will execute correctly unless the package manager is different each time! For me to test that my logic works. I need to mock the detect function. So I moved the detect function for that prupose.
  * 7e11b2194bb61d870cfbfd40e42cc645fdff8e7a fix: Implement should pass arguments to package manager test properly To pass arguments to a runner properly there needs to be a `--` before a flag like version or help. Doing this makes the flags pass through!
  * 12d9f541ba57926b2fb9cc0aded47499610b57ac refactor: change tests so that the mock command runner is used and more things are caught Now that a command executor is passed to the root command as a part of it's argument. Tests revolve around that! More have been written to take care of problems!
  * ee5f43d38b2bf862e4d10b49d4c9e0be4ecf6f52 refactor: implement wrapper around exec.Command This change makes it so that exec command is wrapped with a struct that calls it's commands. This is done so that testing can happen without having to create fake files and install other package managers.
  * 544a9d94a55d3005fc8543fbd6c2b9a6d7e4a812 feat: add proper env variable loading I decided to use godotenv to load env variables and use them with viper. Then I changed the env variable from APP_ENV to go mode! I got it from vite! I wish I could set up something like that!
  * cd1837385b181d82ebcddb28746880c4f8b2eca0 feat: Add interactive setup mode and config file support
  * b240a83297af280f8ff54875de10d99d6dc25335 fix: change the detected package managers from JS to os in SupportedOperatingSystemPackageManager The Wrong package choices were being used. I change it to the os package managers! I decided to also fix the naming of SupportedJSPackageManagers to the right one. The chanage in cmd/root.go reflects this!
  * 2fb8ad0d512003b9d921e30cd893b0bd7605171f feat: add ability to execute nix env or nix profiles based on choice! The user will now be propmted to choose which type of nix is being used to install packages! It's either env or profiles. When it comes to choice it's either profile or env.
  * 5d7a80f19419927e03f3707bed677aba85964faa refactor: add missing comment describing call to root.SetArgs I forgot to add the comment about root.CmdSetArgs Now the user can know why that was needed.
  * 13cb90e21076a49bd1516df7cf66eebe4f864a2a feat: allow user to use an OS package manager to install a JS one if it doesn't exist The user can select the OS package manager they want to use by using prompts. If a jpd.config file is found the variables are used to install the pkg manager. If a Supported OS Manager is detected then it's used to install the command.
  * 67ad9a3266c45b0e0d25642975c501ed67d99477 fix: make sure this command will surpress logs
  * ac2a5c267311438865a7dcea3530137bfd07bdad feat: restrict logging if a dev variable isn't set I decided to implement using env files to remove logs during development! Logs in CLI apps only create noise so I decided to supress them!
  * 89d98145827c23492d3cba5d8f201fe60aa3c8d4 refactor: move js package dectection logic into it's own package I decided to move the package detection logic because I didn't want the function available to other commands!
  * 14dfb48783735bf1e877b5d689fbc6ccee9d08a9 refactor: use package extractor and implement colored logs. This refactor has huge changes. - The logging uses Charm's log package. - The disable flag prop is now removed -- I realised the user can pass `--` to pass args to the underlying command. - The getPackageNameFromContext was implemented.
  * 14ff7145cde02ac5d3f7ef3b517faf4f023896ca fix: remove duplicate imports
  * 383f962b92c9e607a308f1abc62b1a4bebe0e8a8 refactor: move JS package manager detaction logic into root persistent pre run I decided to move JS detection logic into the persistent pre run function from Cobra. The logic is now cetralized and the package manager will be used based on if there is a lock file. There is a new fuction that is designed to extract the package manager in the rest of the commands.
  * 620f6f25cc385ce15f130651ca0a0c61f4c5083a fix: disable flag parsing The agent command is supposed to pass flags directly to the command that it's suppossed to execute. By disabling flags this command can work properly!
  * 7091d184920a62b18153ac9b805713b0f2fccfba fix: adjust commands to work as intended and with deno. The commands didn't really support Deno and the agent command didn't forward commands as intended!
  * 63cb87f415598d629e812a1cfac794604f5399c4 test: write tests for SupportedOperatingSystemPackageManager based on OS The SupportedOperatingSystemPackageManager is not going to work on different OS's so it's best to write one that can pass based on which OS is being used! So I did that!
  * 249a0d26c0bf22ed29dc66d9ef5dad1dc4e27dd6 fix: change condition to not find an error instead of finding an error I used the wrong condition! This is the right way of detecting if an executable exists!
  * be8fd988e24777d0fd1e92fe8b234dd5d52f026d fix: change map into 2d Array in JSPackageManager I forgot that maps aren't ordered! That means that the test to find out if Deno is prioritized will fail most of the time.
  * 787c5c8529c3cb9d3d0a29615218e7668b71cbf4 test: make sure SupportedOperatingSystemPackageManager works. I tested SupportedOperatingSystemPackageManager and it failed. The test to check if deno is prioritized over other function failed too.
  * 67a7cb72914786e20a07bed372d5e97f63b3d71d refactor: create test file for functions that detect things I decided that since the SupportedOSPackageManager function was created! It was best to create a test suite for functions like it and JSPackageManager one.
  * 46bc642024c975921866a8fd372996f77c97d68d feat: add a function to detect OS package managers
  * b08662a7a50dc814cf748d2924c5c9d5d74543c0 refactor: change PackageManager to JS version in tests
  * 1da3daab159ba64d74effcd3ac4252838bf0c67f refactor: move js package detector into it's own file The package detector being there was awkward now there are more things to search for!
ManifestType: defaultLocale
ManifestVersion: 1.10.0
