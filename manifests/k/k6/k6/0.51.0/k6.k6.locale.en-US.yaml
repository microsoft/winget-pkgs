# Created with komac v2.2.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.6.0.schema.json

PackageIdentifier: k6.k6
PackageVersion: 0.51.0
PackageLocale: en-US
Publisher: Raintank Inc. d.b.a. Grafana Labs
PublisherUrl: https://grafana.com/
PublisherSupportUrl: https://github.com/grafana/k6/issues
PackageName: k6
PackageUrl: https://k6.io/
License: AGPL-3.0
LicenseUrl: https://github.com/grafana/k6/blob/HEAD/LICENSE.md
ShortDescription: k6 is a developer-centric, free and open-source load testing tool built for making performance testing a productive and enjoyable experience.
Description: k6 is a developer-centric, free and open-source load testing tool built for making performance testing a productive and enjoyable experience. Using k6, you"ll be able to catch performance regression and problems earlier, allowing you to build resilient systems and robust applications.
Tags:
- cli
- cross-platform
- foss
- open-source
ReleaseNotes: "k6 v0.51.0 is here ðŸŽ‰! Some special mentions included in this release:- A new experimental streams module\n- New algorithms for WebCrypto module\n- Timers are globally available\nBreaking changes\nTransition browser APIs to Async\nIn the last release notes we mentioned this breaking change, and we wanted to remind and update you on the plan. In the next release (v0.52.0), most of the synchronous browser APIs will be migrated to be asynchronous (promisifying them). We expect this will affect most if not all of our users.This breaking change will require you to add await in front of most of the browser module APIs. Without this await you will witness undocumented and unknown behavior during the runtime. To make the migration simpler we advise that you work with the latest k6 type definitions.You can find a list of all the APIs that we expect to convert to async in a comment in issue browser#428.Awaiting on something thatâ€™s not a thenable just returns that value, which means you can add the await keyword today on the APIs that will become async to future proof your test scripts.Here are the reasons for making this large breaking change:- Most browser APIs use some form of long-running IO operation (networking) to perform the requested action on the web browser against the website under test. We need to avoid blocking JavaScript's runtime event loop for such operations.\n- We're going to add more asynchronous event-based APIs (such as page.on) that our current synchronous APIs would block.\n- To align with how developers expect to work with JavaScript APIs.\n- To have better compatibility with Playwright.\nAs a starting point, we have migrated a single API (the tap method), which you can find the details below that will help visualize the upcoming breaking changes.Browser Tap is now an async method grafana/xk6-browser#1268\nThis release converts the Tap method in the browser module into an asynchronous method. This change is necessary to ensure that the method can be used in async contexts and to align with the rest of the browser module's planned asynchronous API. To use the Tap method, you must now add the await keyword before the method call.Affected components:- locator.tap\n- page.tap\n- frame.tap\n- elementHandle.tap\nSee the following example for how to use the Tap method after this change:Before:\n\nimport browser from 'k6/experimental/browser'\n\n// ...\n\nexport default function () {\n\t// ...\n\tpage.tap(selector, { modifiers: [\"Alt\", \"Control\", \"Meta\", \"Shift\"] });\n\t// ...\n}\n\nAfter:\n\nimport browser from 'k6/experimental/browser'\n\n// ...\n\nexport default function () {\n\t// ...\n\tawait page.tap(selector, { modifiers: [\"Alt\", \"Control\", \"Meta\", \"Shift\"] });\n\t// ...\n}\n\nk6/experimental/websockets will not default binaryType to `\"arraybuffer\"'\nAs part of the stabilization of the API it needs to become as close to the specification.Early in the development the idea of adding Blob support as part was deemed feature creep and was dropped in favor of going with only \"arraybuffer\". But the specification defaults to returning binary responses as Blob - which was another thing that was changed.While adding Blob is still on our radar, moving the default is always going to be a breaking change that we need to do to align with the specification.For this release there is now a warning that will be printed if binaryType is not set to \"arraybuffer\" and a binary response is received. The warning will go away when binaryType is set to \"arraybuffer\".In the next release the warning will become an error.More info and place for discussion can be found in an this issue.k6/experimental/grpc is no longer available #3530\nAs the last step of the graduation process for the experimental gRPC module, we completely removed the module. It is now fully integrated into the stable k6/net/grpc module. So, if you haven't done this yet, replace your imports from k6/experimental/grpc to k6/net/grpc.Deprecations\nThe following pull requests start the process to introduce breaking changes. They are currently starting to emit warning if their condition is hit, but they will turn to return errors in the future release.\nIt is recommended to use the suggested alternative, or to fix the script if you see the warning message.- #3681 Use of not-compliant require expressions.\n- #3680 Modules resolution of modules not previously seen during the initialization phase.\n- #3676 Working directory is set to the current location when the script is provided using stdin, instead of the root folder.\n- #3530 Automagically resolve modules from cdnjs and github \"URLs\".\nNew features\nIntroduction of k6/experimental/streams module #3696\nThis release of k6 introduces the new k6/experimental/streams module, which partially supports the JavaScript\nStreams API, focusing initially on the ReadableStream construct.With the ReadableStream, users can define and consume data streams within k6 scripts. This is particularly useful for\nefficiently handling large datasets or for processing data sequentially in a controlled flow.The following example demonstrates creating and consuming a simple stream that emits numbers until it reaches a predefined limit:\n\nimport { ReadableStream } from 'k6/experimental/streams'\n\nfunction numbersStream() {\n    let currentNumber = 0\n\n\treturn new ReadableStream({\n\t\tstart(controller) {\n\t\t\tconst fn = () => {\n\t\t\t\tif (currentNumber < 5) {\n\t\t\t\t\tcontroller.enqueue(++currentNumber)\n\t\t\t\t\tsetTimeout(fn, 1000)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcontroller.close()\n\t\t\t}\n\t\t\tsetTimeout(fn, 1000)\n\t\t},\n\t})\n}\n\nexport default async function () {\n\tconst stream = numbersStream()\n\tconst reader = stream.getReader()\n\n\twhile (true) {\n\t\tconst { done, value } = await reader.read()\n\t\tif (done) break\n\t\tconsole.log(`received number ${value} from stream`)\n\t}\n\n\tconsole.log('we are done')\n}\n\nFor more advanced examples, please head to the MDN Web Docs on the Streams API.Limitations\nCurrently, users can define and consume readable streams. However, this release does not include support for byte readers\nand controllers, nor does it include support the tee, pipeTo, and\npipeThrough methods of the ReadableStream object.New features and updates of WebCrypto API support #3714\nThis release brings support for asymmetric cryptography to the k6/experimental/webcrypto module. We added support of the elliptic curves algorithms ECDH (xk6-webcrypto#67) and ECDSA (xk6-webcrypto#69) algorithms along with new import/export key formats like spki and pkcs8.One of the newly added operations is deriveBits, which allows parties to generate a unique shared secret by using shared public and non-shared private keys.\n\nimport { crypto } from 'k6/experimental/webcrypto';\n\nexport default async function () {\n  // Generate a key pair for Alice\n  const aliceKeyPair = await crypto.subtle.generateKey(\n    {\n      name: 'ECDH',\n      namedCurve: 'P-256',\n    },\n    true,\n    ['deriveKey', 'deriveBits']\n  );\n\n  // Generate a key pair for Bob\n  const bobKeyPair = await crypto.subtle.generateKey(\n    {\n      name: 'ECDH',\n      namedCurve: 'P-256',\n    },\n    true,\n    ['deriveKey', 'deriveBits']\n  );\n\n  // Derive shared secret for Alice\n  const aliceSharedSecret = await deriveSharedSecret(aliceKeyPair.privateKey, bobKeyPair.publicKey);\n\n  // Derive shared secret for Bob\n  const bobSharedSecret = await deriveSharedSecret(bobKeyPair.privateKey, aliceKeyPair.publicKey);\n\n  // alice shared secret and bob shared secret should be the same\n  console.log('alice shared secret: ' + printArrayBuffer(aliceSharedSecret));\n  console.log('bob shared secret: ' + printArrayBuffer(bobSharedSecret));\n}\n\nasync function deriveSharedSecret(privateKey, publicKey) {\n  return crypto.subtle.deriveBits(\n    {\n      name: 'ECDH',\n      public: publicKey,\n    },\n    privateKey,\n    256\n  );\n}\n\nconst printArrayBuffer = (buffer) => {\n  const view = new Uint8Array(buffer);\n  return Array.from(view);\n};\n\nThe sign and verify operations got support for ECDSA algorithm. The sign operation allows you to sign a message with a private key, while the verify operation allows you to verify the signature with a public key.Other notable updates and fixes:- xk6-webcrypto#68 fixes a degradation for the sign/verify operations for HMAC algorithm.\n- xk6-webcrypto#75, xk6-webcrypto#76 refactor webcrypto module to be thread-safe.\n- xk6-webcrypto#74 adds JWK import/export support for ECDH and ECDSA. Refactors JWK import/export to use only go standard library.\nSee webcrypto's module documentation for more details.Timers globally available #3589\nsetTimeout, setInterval and related clear functions have been part of the JavaScript ecosystem, probably for as long as it has existed.In the previous releases we stabilized and made them available through k6/timers module. While the module isn't going anywhere and might get more identifiers, setTimeout is usually used without importing it. For this reason it is now globally available along clearTimeout, setInterval and clearInterval.No code needs to be changed, but you no longer need to import k6/timers to use this functionality.UX improvements and enhancements\n- #3670 adds the ability to enable profiling via environment variable. Thanks @Bablzz for your contribution!\n- #3655 clarifies the error message for the validation of scenario's name.\n- #3693 adds a gRPC client's asyncInvoke method to the k6/net/grpc module. It's a non-blocking version of the invoke method.\n- browser#1259, browser#1260 adds errors to the traces that the browser module generates.\nBug fixes\n- #3708 denies access to execution.test.options from Init context.\n- #3672 picks the correct value when SystemTags are set via the k6_SYSTEM_TAGS environment variable.\n- #3657 fixes a panic when mappings field is empty in the provided SourceMap.\n- #3717 returns a correct line number when an inlined SourceMap is used.\n- browser#1261 fixes dispose context canceled errors.\n- browser#1254 fixes an indefinite wait when testing websites with iframes."
ReleaseNotesUrl: https://github.com/grafana/k6/releases/tag/v0.51.0
ManifestType: defaultLocale
ManifestVersion: 1.6.0
