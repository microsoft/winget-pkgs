# Created with komac v2.12.1
# yaml-language-server: $schema=https://aka.ms/winget-manifest.defaultLocale.1.10.0.schema.json

PackageIdentifier: BytecodeAlliance.Wasmtime.Portable
PackageVersion: 36.0.0
PackageLocale: en-US
Publisher: Bytecode Alliance
PublisherUrl: https://bytecodealliance.org/
PublisherSupportUrl: https://github.com/bytecodealliance/wasmtime/issues
PackageName: Wasmtime
PackageUrl: https://wasmtime.dev/
License: Apache-2.0
LicenseUrl: https://github.com/bytecodealliance/wasmtime/blob/HEAD/LICENSE
Copyright: Copyright Â© 2019-2023 the Bytecode Alliance contributors.
ShortDescription: A fast and secure runtime for WebAssembly
Description: Wasmtime is a Bytecode Alliance project that is a standalone wasm-only optimizing runtime for WebAssembly and WASI. It runs WebAssembly code outside of the Web, and can be used both as a command-line utility or as a library embedded in a larger application.
Tags:
- aot
- cranelift
- jit
- runtime
- rust
- sandbox
- standalone
- wasi
- wasm
- wasmtime
- webassembly
ReleaseNotes: |-
  36.0.0
  Released 2025-08-20.
  Added
  - Cranelift's has initial support for inlining between functions. Wasmtime
    additionally now has support for inlining as well, for example between modules
    in a component.
    #11210
    #11239
    #11228
    #11269
    #11283
  - The async proposal for the Component Model is now fully implemented in
    Wasmtime with a number of WASIp3 interfaces implemented. The implementation
    is still off-by-default and the implementation of WASIp3 is not fully
    complete, but is remains suitable for testing.
    #11127
    #11136
    #11137
    #11238
    #11221
    #11250
    #11257
    #11291
    #11325
  Changed
  - Users who implemented WasiHttpView::is_forbidden_header from
    wasmtime-wasi-http now need to include DEFAULT_FORBIDDEN_HEADERS, e.g.
    DEFAULT_FORBIDDEN_HEADERS.contains(name) || name.as_str() == "custom-forbidden-header"
    #11292
  - Cranelift's incremental cache has received some optimizations.
    #11186
  - Wasmtime's internal implementations of WebAssembly primitives has been
    refactored to be modeled with safer internal primitives.
    #11211
    #11212
    #11216
    #11229
    #11215
    #11254
    #11255
    #11319
    #11320
  - Detection of native hardware features has been refactored on s390x.
    #11220
  - Further progress has been made towards an implementation of the WebAssembly
    exceptions proposal, although it is not yet complete.
    #11230
    #11321
  - Cranelift's assembler for x64 now supports EVEX encoding.
    #11153
    #11270
    #11303
  - The default implementation of send_request in the wasmtime-wasi-http crate
    is now behind an on-by-default feature gate.
    #11323
  - Configuration of the bindgen! macro has been redesigned to more consistently
    configure per-function options such as whether or not it's async.
    #11328
  - Initial support fo mutatis has been added to Wasmtime's fuzzers.
    #11290
  - The debug-builtins crate feature of wasmtime no compiles on no_std
    targets.
    #11304
  Fixed
  - Deserializing external modules no long unnecessarily requires the allocation
    to be aligned.
    #11306
  - A CMake linker error and warning when using the C API on macOS has been fixed.
    #11293
    #11315
  - The C API declaration of wasmtime_component_linker_instance_add_func has
    been fixed.
    #11327
  - The calculation of reachable DWARF has been fixed.
    #11338
ReleaseNotesUrl: https://github.com/bytecodealliance/wasmtime/releases/tag/v36.0.0
ManifestType: defaultLocale
ManifestVersion: 1.10.0
